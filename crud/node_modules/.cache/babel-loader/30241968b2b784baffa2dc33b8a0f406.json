{"ast":null,"code":"/**\n * @licstart The following is the entire license notice for the\n * Javascript code in this page\n *\n * Copyright 2021 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @licend The above is the entire license notice for the\n * Javascript code in this page\n */\n(function webpackUniversalModuleDefinition(root, factory) {\n  if (typeof exports === 'object' && typeof module === 'object') module.exports = factory();else if (typeof define === 'function' && define.amd) define(\"pdfjs-dist/build/pdf\", [], factory);else if (typeof exports === 'object') exports[\"pdfjs-dist/build/pdf\"] = factory();else root[\"pdfjs-dist/build/pdf\"] = root.pdfjsLib = factory();\n})(this, function () {\n  return (\n    /******/\n    (() => {\n      // webpackBootstrap\n\n      /******/\n      \"use strict\";\n      /******/\n\n      var __webpack_modules__ = [\n        /* 0 */\n      ,\n      /* 1 */\n\n      /***/\n      (__unused_webpack_module, exports, __w_pdfjs_require__) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.StatTimer = exports.RenderingCancelledException = exports.PixelsPerInch = exports.PageViewport = exports.PDFDateString = exports.LinkTarget = exports.DOMStandardFontDataFactory = exports.DOMSVGFactory = exports.DOMCanvasFactory = exports.DOMCMapReaderFactory = void 0;\n        exports.addLinkAttributes = addLinkAttributes;\n        exports.deprecated = deprecated;\n        exports.getFilenameFromUrl = getFilenameFromUrl;\n        exports.getPdfFilenameFromUrl = getPdfFilenameFromUrl;\n        exports.getXfaPageViewport = getXfaPageViewport;\n        exports.isDataScheme = isDataScheme;\n        exports.isPdfFile = isPdfFile;\n        exports.isValidFetchUrl = isValidFetchUrl;\n        exports.loadScript = loadScript;\n\n        var _util = __w_pdfjs_require__(2);\n\n        var _base_factory = __w_pdfjs_require__(5);\n\n        const DEFAULT_LINK_REL = \"noopener noreferrer nofollow\";\n        const SVG_NS = \"http://www.w3.org/2000/svg\";\n        const PixelsPerInch = {\n          CSS: 96.0,\n          PDF: 72.0,\n\n          get PDF_TO_CSS_UNITS() {\n            return (0, _util.shadow)(this, \"PDF_TO_CSS_UNITS\", this.CSS / this.PDF);\n          }\n\n        };\n        exports.PixelsPerInch = PixelsPerInch;\n\n        class DOMCanvasFactory extends _base_factory.BaseCanvasFactory {\n          constructor() {\n            let {\n              ownerDocument = globalThis.document\n            } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n            super();\n            this._document = ownerDocument;\n          }\n\n          _createCanvas(width, height) {\n            const canvas = this._document.createElement(\"canvas\");\n\n            canvas.width = width;\n            canvas.height = height;\n            return canvas;\n          }\n\n        }\n\n        exports.DOMCanvasFactory = DOMCanvasFactory;\n\n        async function fetchData(url) {\n          let asTypedArray = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n          if (isValidFetchUrl(url, document.baseURI)) {\n            const response = await fetch(url);\n\n            if (!response.ok) {\n              throw new Error(response.statusText);\n            }\n\n            return asTypedArray ? new Uint8Array(await response.arrayBuffer()) : (0, _util.stringToBytes)(await response.text());\n          }\n\n          return new Promise((resolve, reject) => {\n            const request = new XMLHttpRequest();\n            request.open(\"GET\", url, true);\n\n            if (asTypedArray) {\n              request.responseType = \"arraybuffer\";\n            }\n\n            request.onreadystatechange = () => {\n              if (request.readyState !== XMLHttpRequest.DONE) {\n                return;\n              }\n\n              if (request.status === 200 || request.status === 0) {\n                let data;\n\n                if (asTypedArray && request.response) {\n                  data = new Uint8Array(request.response);\n                } else if (!asTypedArray && request.responseText) {\n                  data = (0, _util.stringToBytes)(request.responseText);\n                }\n\n                if (data) {\n                  resolve(data);\n                  return;\n                }\n              }\n\n              reject(new Error(request.statusText));\n            };\n\n            request.send(null);\n          });\n        }\n\n        class DOMCMapReaderFactory extends _base_factory.BaseCMapReaderFactory {\n          _fetchData(url, compressionType) {\n            return fetchData(url, this.isCompressed).then(data => {\n              return {\n                cMapData: data,\n                compressionType\n              };\n            });\n          }\n\n        }\n\n        exports.DOMCMapReaderFactory = DOMCMapReaderFactory;\n\n        class DOMStandardFontDataFactory extends _base_factory.BaseStandardFontDataFactory {\n          _fetchData(url) {\n            return fetchData(url, true);\n          }\n\n        }\n\n        exports.DOMStandardFontDataFactory = DOMStandardFontDataFactory;\n\n        class DOMSVGFactory extends _base_factory.BaseSVGFactory {\n          _createSVG(type) {\n            return document.createElementNS(SVG_NS, type);\n          }\n\n        }\n\n        exports.DOMSVGFactory = DOMSVGFactory;\n\n        class PageViewport {\n          constructor(_ref) {\n            let {\n              viewBox,\n              scale,\n              rotation,\n              offsetX = 0,\n              offsetY = 0,\n              dontFlip = false\n            } = _ref;\n            this.viewBox = viewBox;\n            this.scale = scale;\n            this.rotation = rotation;\n            this.offsetX = offsetX;\n            this.offsetY = offsetY;\n            const centerX = (viewBox[2] + viewBox[0]) / 2;\n            const centerY = (viewBox[3] + viewBox[1]) / 2;\n            let rotateA, rotateB, rotateC, rotateD;\n            rotation %= 360;\n\n            if (rotation < 0) {\n              rotation += 360;\n            }\n\n            switch (rotation) {\n              case 180:\n                rotateA = -1;\n                rotateB = 0;\n                rotateC = 0;\n                rotateD = 1;\n                break;\n\n              case 90:\n                rotateA = 0;\n                rotateB = 1;\n                rotateC = 1;\n                rotateD = 0;\n                break;\n\n              case 270:\n                rotateA = 0;\n                rotateB = -1;\n                rotateC = -1;\n                rotateD = 0;\n                break;\n\n              case 0:\n                rotateA = 1;\n                rotateB = 0;\n                rotateC = 0;\n                rotateD = -1;\n                break;\n\n              default:\n                throw new Error(\"PageViewport: Invalid rotation, must be a multiple of 90 degrees.\");\n            }\n\n            if (dontFlip) {\n              rotateC = -rotateC;\n              rotateD = -rotateD;\n            }\n\n            let offsetCanvasX, offsetCanvasY;\n            let width, height;\n\n            if (rotateA === 0) {\n              offsetCanvasX = Math.abs(centerY - viewBox[1]) * scale + offsetX;\n              offsetCanvasY = Math.abs(centerX - viewBox[0]) * scale + offsetY;\n              width = Math.abs(viewBox[3] - viewBox[1]) * scale;\n              height = Math.abs(viewBox[2] - viewBox[0]) * scale;\n            } else {\n              offsetCanvasX = Math.abs(centerX - viewBox[0]) * scale + offsetX;\n              offsetCanvasY = Math.abs(centerY - viewBox[1]) * scale + offsetY;\n              width = Math.abs(viewBox[2] - viewBox[0]) * scale;\n              height = Math.abs(viewBox[3] - viewBox[1]) * scale;\n            }\n\n            this.transform = [rotateA * scale, rotateB * scale, rotateC * scale, rotateD * scale, offsetCanvasX - rotateA * scale * centerX - rotateC * scale * centerY, offsetCanvasY - rotateB * scale * centerX - rotateD * scale * centerY];\n            this.width = width;\n            this.height = height;\n          }\n\n          clone() {\n            let {\n              scale = this.scale,\n              rotation = this.rotation,\n              offsetX = this.offsetX,\n              offsetY = this.offsetY,\n              dontFlip = false\n            } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n            return new PageViewport({\n              viewBox: this.viewBox.slice(),\n              scale,\n              rotation,\n              offsetX,\n              offsetY,\n              dontFlip\n            });\n          }\n\n          convertToViewportPoint(x, y) {\n            return _util.Util.applyTransform([x, y], this.transform);\n          }\n\n          convertToViewportRectangle(rect) {\n            const topLeft = _util.Util.applyTransform([rect[0], rect[1]], this.transform);\n\n            const bottomRight = _util.Util.applyTransform([rect[2], rect[3]], this.transform);\n\n            return [topLeft[0], topLeft[1], bottomRight[0], bottomRight[1]];\n          }\n\n          convertToPdfPoint(x, y) {\n            return _util.Util.applyInverseTransform([x, y], this.transform);\n          }\n\n        }\n\n        exports.PageViewport = PageViewport;\n\n        class RenderingCancelledException extends _util.BaseException {\n          constructor(msg, type) {\n            super(msg, \"RenderingCancelledException\");\n            this.type = type;\n          }\n\n        }\n\n        exports.RenderingCancelledException = RenderingCancelledException;\n        const LinkTarget = {\n          NONE: 0,\n          SELF: 1,\n          BLANK: 2,\n          PARENT: 3,\n          TOP: 4\n        };\n        exports.LinkTarget = LinkTarget;\n\n        function addLinkAttributes(link) {\n          let {\n            url,\n            target,\n            rel,\n            enabled = true\n          } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n          (0, _util.assert)(url && typeof url === \"string\", 'addLinkAttributes: A valid \"url\" parameter must provided.');\n          const urlNullRemoved = (0, _util.removeNullCharacters)(url);\n\n          if (enabled) {\n            link.href = link.title = urlNullRemoved;\n          } else {\n            link.href = \"\";\n            link.title = `Disabled: ${urlNullRemoved}`;\n\n            link.onclick = () => {\n              return false;\n            };\n          }\n\n          let targetStr = \"\";\n\n          switch (target) {\n            case LinkTarget.NONE:\n              break;\n\n            case LinkTarget.SELF:\n              targetStr = \"_self\";\n              break;\n\n            case LinkTarget.BLANK:\n              targetStr = \"_blank\";\n              break;\n\n            case LinkTarget.PARENT:\n              targetStr = \"_parent\";\n              break;\n\n            case LinkTarget.TOP:\n              targetStr = \"_top\";\n              break;\n          }\n\n          link.target = targetStr;\n          link.rel = typeof rel === \"string\" ? rel : DEFAULT_LINK_REL;\n        }\n\n        function isDataScheme(url) {\n          const ii = url.length;\n          let i = 0;\n\n          while (i < ii && url[i].trim() === \"\") {\n            i++;\n          }\n\n          return url.substring(i, i + 5).toLowerCase() === \"data:\";\n        }\n\n        function isPdfFile(filename) {\n          return typeof filename === \"string\" && /\\.pdf$/i.test(filename);\n        }\n\n        function getFilenameFromUrl(url) {\n          const anchor = url.indexOf(\"#\");\n          const query = url.indexOf(\"?\");\n          const end = Math.min(anchor > 0 ? anchor : url.length, query > 0 ? query : url.length);\n          return url.substring(url.lastIndexOf(\"/\", end) + 1, end);\n        }\n\n        function getPdfFilenameFromUrl(url) {\n          let defaultFilename = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"document.pdf\";\n\n          if (typeof url !== \"string\") {\n            return defaultFilename;\n          }\n\n          if (isDataScheme(url)) {\n            (0, _util.warn)('getPdfFilenameFromUrl: ignore \"data:\"-URL for performance reasons.');\n            return defaultFilename;\n          }\n\n          const reURI = /^(?:(?:[^:]+:)?\\/\\/[^/]+)?([^?#]*)(\\?[^#]*)?(#.*)?$/;\n          const reFilename = /[^/?#=]+\\.pdf\\b(?!.*\\.pdf\\b)/i;\n          const splitURI = reURI.exec(url);\n          let suggestedFilename = reFilename.exec(splitURI[1]) || reFilename.exec(splitURI[2]) || reFilename.exec(splitURI[3]);\n\n          if (suggestedFilename) {\n            suggestedFilename = suggestedFilename[0];\n\n            if (suggestedFilename.includes(\"%\")) {\n              try {\n                suggestedFilename = reFilename.exec(decodeURIComponent(suggestedFilename))[0];\n              } catch (ex) {}\n            }\n          }\n\n          return suggestedFilename || defaultFilename;\n        }\n\n        class StatTimer {\n          constructor() {\n            this.started = Object.create(null);\n            this.times = [];\n          }\n\n          time(name) {\n            if (name in this.started) {\n              (0, _util.warn)(`Timer is already running for ${name}`);\n            }\n\n            this.started[name] = Date.now();\n          }\n\n          timeEnd(name) {\n            if (!(name in this.started)) {\n              (0, _util.warn)(`Timer has not been started for ${name}`);\n            }\n\n            this.times.push({\n              name,\n              start: this.started[name],\n              end: Date.now()\n            });\n            delete this.started[name];\n          }\n\n          toString() {\n            const outBuf = [];\n            let longest = 0;\n\n            for (const time of this.times) {\n              const name = time.name;\n\n              if (name.length > longest) {\n                longest = name.length;\n              }\n            }\n\n            for (const time of this.times) {\n              const duration = time.end - time.start;\n              outBuf.push(`${time.name.padEnd(longest)} ${duration}ms\\n`);\n            }\n\n            return outBuf.join(\"\");\n          }\n\n        }\n\n        exports.StatTimer = StatTimer;\n\n        function isValidFetchUrl(url, baseUrl) {\n          try {\n            const {\n              protocol\n            } = baseUrl ? new URL(url, baseUrl) : new URL(url);\n            return protocol === \"http:\" || protocol === \"https:\";\n          } catch (ex) {\n            return false;\n          }\n        }\n\n        function loadScript(src) {\n          let removeScriptElement = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n          return new Promise((resolve, reject) => {\n            const script = document.createElement(\"script\");\n            script.src = src;\n\n            script.onload = function (evt) {\n              if (removeScriptElement) {\n                script.remove();\n              }\n\n              resolve(evt);\n            };\n\n            script.onerror = function () {\n              reject(new Error(`Cannot load script at: ${script.src}`));\n            };\n\n            (document.head || document.documentElement).appendChild(script);\n          });\n        }\n\n        function deprecated(details) {\n          console.log(\"Deprecated API usage: \" + details);\n        }\n\n        let pdfDateStringRegex;\n\n        class PDFDateString {\n          static toDateObject(input) {\n            if (!input || !(0, _util.isString)(input)) {\n              return null;\n            }\n\n            if (!pdfDateStringRegex) {\n              pdfDateStringRegex = new RegExp(\"^D:\" + \"(\\\\d{4})\" + \"(\\\\d{2})?\" + \"(\\\\d{2})?\" + \"(\\\\d{2})?\" + \"(\\\\d{2})?\" + \"(\\\\d{2})?\" + \"([Z|+|-])?\" + \"(\\\\d{2})?\" + \"'?\" + \"(\\\\d{2})?\" + \"'?\");\n            }\n\n            const matches = pdfDateStringRegex.exec(input);\n\n            if (!matches) {\n              return null;\n            }\n\n            const year = parseInt(matches[1], 10);\n            let month = parseInt(matches[2], 10);\n            month = month >= 1 && month <= 12 ? month - 1 : 0;\n            let day = parseInt(matches[3], 10);\n            day = day >= 1 && day <= 31 ? day : 1;\n            let hour = parseInt(matches[4], 10);\n            hour = hour >= 0 && hour <= 23 ? hour : 0;\n            let minute = parseInt(matches[5], 10);\n            minute = minute >= 0 && minute <= 59 ? minute : 0;\n            let second = parseInt(matches[6], 10);\n            second = second >= 0 && second <= 59 ? second : 0;\n            const universalTimeRelation = matches[7] || \"Z\";\n            let offsetHour = parseInt(matches[8], 10);\n            offsetHour = offsetHour >= 0 && offsetHour <= 23 ? offsetHour : 0;\n            let offsetMinute = parseInt(matches[9], 10) || 0;\n            offsetMinute = offsetMinute >= 0 && offsetMinute <= 59 ? offsetMinute : 0;\n\n            if (universalTimeRelation === \"-\") {\n              hour += offsetHour;\n              minute += offsetMinute;\n            } else if (universalTimeRelation === \"+\") {\n              hour -= offsetHour;\n              minute -= offsetMinute;\n            }\n\n            return new Date(Date.UTC(year, month, day, hour, minute, second));\n          }\n\n        }\n\n        exports.PDFDateString = PDFDateString;\n\n        function getXfaPageViewport(xfaPage, _ref2) {\n          let {\n            scale = 1,\n            rotation = 0\n          } = _ref2;\n          const {\n            width,\n            height\n          } = xfaPage.attributes.style;\n          const viewBox = [0, 0, parseInt(width), parseInt(height)];\n          return new PageViewport({\n            viewBox,\n            scale,\n            rotation\n          });\n        }\n        /***/\n\n      },\n      /* 2 */\n\n      /***/\n      (__unused_webpack_module, exports, __w_pdfjs_require__) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.VerbosityLevel = exports.Util = exports.UnknownErrorException = exports.UnexpectedResponseException = exports.UNSUPPORTED_FEATURES = exports.TextRenderingMode = exports.StreamType = exports.RenderingIntentFlag = exports.PermissionFlag = exports.PasswordResponses = exports.PasswordException = exports.PageActionEventType = exports.OPS = exports.MissingPDFException = exports.IsLittleEndianCached = exports.IsEvalSupportedCached = exports.InvalidPDFException = exports.ImageKind = exports.IDENTITY_MATRIX = exports.FormatError = exports.FontType = exports.FONT_IDENTITY_MATRIX = exports.DocumentActionEventType = exports.CMapCompressionType = exports.BaseException = exports.AnnotationType = exports.AnnotationStateModelType = exports.AnnotationReviewState = exports.AnnotationReplyType = exports.AnnotationMode = exports.AnnotationMarkedState = exports.AnnotationFlag = exports.AnnotationFieldFlag = exports.AnnotationBorderStyleType = exports.AnnotationActionEventType = exports.AbortException = void 0;\n        exports.arrayByteLength = arrayByteLength;\n        exports.arraysToBytes = arraysToBytes;\n        exports.assert = assert;\n        exports.bytesToString = bytesToString;\n        exports.createObjectURL = createObjectURL;\n        exports.createPromiseCapability = createPromiseCapability;\n        exports.createValidAbsoluteUrl = createValidAbsoluteUrl;\n        exports.escapeString = escapeString;\n        exports.getModificationDate = getModificationDate;\n        exports.getVerbosityLevel = getVerbosityLevel;\n        exports.info = info;\n        exports.isArrayBuffer = isArrayBuffer;\n        exports.isArrayEqual = isArrayEqual;\n        exports.isAscii = isAscii;\n        exports.isBool = isBool;\n        exports.isNum = isNum;\n        exports.isSameOrigin = isSameOrigin;\n        exports.isString = isString;\n        exports.objectFromMap = objectFromMap;\n        exports.objectSize = objectSize;\n        exports.removeNullCharacters = removeNullCharacters;\n        exports.setVerbosityLevel = setVerbosityLevel;\n        exports.shadow = shadow;\n        exports.string32 = string32;\n        exports.stringToBytes = stringToBytes;\n        exports.stringToPDFString = stringToPDFString;\n        exports.stringToUTF16BEString = stringToUTF16BEString;\n        exports.stringToUTF8String = stringToUTF8String;\n        exports.unreachable = unreachable;\n        exports.utf8StringToString = utf8StringToString;\n        exports.warn = warn;\n\n        __w_pdfjs_require__(3);\n\n        const IDENTITY_MATRIX = [1, 0, 0, 1, 0, 0];\n        exports.IDENTITY_MATRIX = IDENTITY_MATRIX;\n        const FONT_IDENTITY_MATRIX = [0.001, 0, 0, 0.001, 0, 0];\n        exports.FONT_IDENTITY_MATRIX = FONT_IDENTITY_MATRIX;\n        const RenderingIntentFlag = {\n          ANY: 0x01,\n          DISPLAY: 0x02,\n          PRINT: 0x04,\n          ANNOTATIONS_FORMS: 0x10,\n          ANNOTATIONS_STORAGE: 0x20,\n          ANNOTATIONS_DISABLE: 0x40,\n          OPLIST: 0x100\n        };\n        exports.RenderingIntentFlag = RenderingIntentFlag;\n        const AnnotationMode = {\n          DISABLE: 0,\n          ENABLE: 1,\n          ENABLE_FORMS: 2,\n          ENABLE_STORAGE: 3\n        };\n        exports.AnnotationMode = AnnotationMode;\n        const PermissionFlag = {\n          PRINT: 0x04,\n          MODIFY_CONTENTS: 0x08,\n          COPY: 0x10,\n          MODIFY_ANNOTATIONS: 0x20,\n          FILL_INTERACTIVE_FORMS: 0x100,\n          COPY_FOR_ACCESSIBILITY: 0x200,\n          ASSEMBLE: 0x400,\n          PRINT_HIGH_QUALITY: 0x800\n        };\n        exports.PermissionFlag = PermissionFlag;\n        const TextRenderingMode = {\n          FILL: 0,\n          STROKE: 1,\n          FILL_STROKE: 2,\n          INVISIBLE: 3,\n          FILL_ADD_TO_PATH: 4,\n          STROKE_ADD_TO_PATH: 5,\n          FILL_STROKE_ADD_TO_PATH: 6,\n          ADD_TO_PATH: 7,\n          FILL_STROKE_MASK: 3,\n          ADD_TO_PATH_FLAG: 4\n        };\n        exports.TextRenderingMode = TextRenderingMode;\n        const ImageKind = {\n          GRAYSCALE_1BPP: 1,\n          RGB_24BPP: 2,\n          RGBA_32BPP: 3\n        };\n        exports.ImageKind = ImageKind;\n        const AnnotationType = {\n          TEXT: 1,\n          LINK: 2,\n          FREETEXT: 3,\n          LINE: 4,\n          SQUARE: 5,\n          CIRCLE: 6,\n          POLYGON: 7,\n          POLYLINE: 8,\n          HIGHLIGHT: 9,\n          UNDERLINE: 10,\n          SQUIGGLY: 11,\n          STRIKEOUT: 12,\n          STAMP: 13,\n          CARET: 14,\n          INK: 15,\n          POPUP: 16,\n          FILEATTACHMENT: 17,\n          SOUND: 18,\n          MOVIE: 19,\n          WIDGET: 20,\n          SCREEN: 21,\n          PRINTERMARK: 22,\n          TRAPNET: 23,\n          WATERMARK: 24,\n          THREED: 25,\n          REDACT: 26\n        };\n        exports.AnnotationType = AnnotationType;\n        const AnnotationStateModelType = {\n          MARKED: \"Marked\",\n          REVIEW: \"Review\"\n        };\n        exports.AnnotationStateModelType = AnnotationStateModelType;\n        const AnnotationMarkedState = {\n          MARKED: \"Marked\",\n          UNMARKED: \"Unmarked\"\n        };\n        exports.AnnotationMarkedState = AnnotationMarkedState;\n        const AnnotationReviewState = {\n          ACCEPTED: \"Accepted\",\n          REJECTED: \"Rejected\",\n          CANCELLED: \"Cancelled\",\n          COMPLETED: \"Completed\",\n          NONE: \"None\"\n        };\n        exports.AnnotationReviewState = AnnotationReviewState;\n        const AnnotationReplyType = {\n          GROUP: \"Group\",\n          REPLY: \"R\"\n        };\n        exports.AnnotationReplyType = AnnotationReplyType;\n        const AnnotationFlag = {\n          INVISIBLE: 0x01,\n          HIDDEN: 0x02,\n          PRINT: 0x04,\n          NOZOOM: 0x08,\n          NOROTATE: 0x10,\n          NOVIEW: 0x20,\n          READONLY: 0x40,\n          LOCKED: 0x80,\n          TOGGLENOVIEW: 0x100,\n          LOCKEDCONTENTS: 0x200\n        };\n        exports.AnnotationFlag = AnnotationFlag;\n        const AnnotationFieldFlag = {\n          READONLY: 0x0000001,\n          REQUIRED: 0x0000002,\n          NOEXPORT: 0x0000004,\n          MULTILINE: 0x0001000,\n          PASSWORD: 0x0002000,\n          NOTOGGLETOOFF: 0x0004000,\n          RADIO: 0x0008000,\n          PUSHBUTTON: 0x0010000,\n          COMBO: 0x0020000,\n          EDIT: 0x0040000,\n          SORT: 0x0080000,\n          FILESELECT: 0x0100000,\n          MULTISELECT: 0x0200000,\n          DONOTSPELLCHECK: 0x0400000,\n          DONOTSCROLL: 0x0800000,\n          COMB: 0x1000000,\n          RICHTEXT: 0x2000000,\n          RADIOSINUNISON: 0x2000000,\n          COMMITONSELCHANGE: 0x4000000\n        };\n        exports.AnnotationFieldFlag = AnnotationFieldFlag;\n        const AnnotationBorderStyleType = {\n          SOLID: 1,\n          DASHED: 2,\n          BEVELED: 3,\n          INSET: 4,\n          UNDERLINE: 5\n        };\n        exports.AnnotationBorderStyleType = AnnotationBorderStyleType;\n        const AnnotationActionEventType = {\n          E: \"Mouse Enter\",\n          X: \"Mouse Exit\",\n          D: \"Mouse Down\",\n          U: \"Mouse Up\",\n          Fo: \"Focus\",\n          Bl: \"Blur\",\n          PO: \"PageOpen\",\n          PC: \"PageClose\",\n          PV: \"PageVisible\",\n          PI: \"PageInvisible\",\n          K: \"Keystroke\",\n          F: \"Format\",\n          V: \"Validate\",\n          C: \"Calculate\"\n        };\n        exports.AnnotationActionEventType = AnnotationActionEventType;\n        const DocumentActionEventType = {\n          WC: \"WillClose\",\n          WS: \"WillSave\",\n          DS: \"DidSave\",\n          WP: \"WillPrint\",\n          DP: \"DidPrint\"\n        };\n        exports.DocumentActionEventType = DocumentActionEventType;\n        const PageActionEventType = {\n          O: \"PageOpen\",\n          C: \"PageClose\"\n        };\n        exports.PageActionEventType = PageActionEventType;\n        const StreamType = {\n          UNKNOWN: \"UNKNOWN\",\n          FLATE: \"FLATE\",\n          LZW: \"LZW\",\n          DCT: \"DCT\",\n          JPX: \"JPX\",\n          JBIG: \"JBIG\",\n          A85: \"A85\",\n          AHX: \"AHX\",\n          CCF: \"CCF\",\n          RLX: \"RLX\"\n        };\n        exports.StreamType = StreamType;\n        const FontType = {\n          UNKNOWN: \"UNKNOWN\",\n          TYPE1: \"TYPE1\",\n          TYPE1STANDARD: \"TYPE1STANDARD\",\n          TYPE1C: \"TYPE1C\",\n          CIDFONTTYPE0: \"CIDFONTTYPE0\",\n          CIDFONTTYPE0C: \"CIDFONTTYPE0C\",\n          TRUETYPE: \"TRUETYPE\",\n          CIDFONTTYPE2: \"CIDFONTTYPE2\",\n          TYPE3: \"TYPE3\",\n          OPENTYPE: \"OPENTYPE\",\n          TYPE0: \"TYPE0\",\n          MMTYPE1: \"MMTYPE1\"\n        };\n        exports.FontType = FontType;\n        const VerbosityLevel = {\n          ERRORS: 0,\n          WARNINGS: 1,\n          INFOS: 5\n        };\n        exports.VerbosityLevel = VerbosityLevel;\n        const CMapCompressionType = {\n          NONE: 0,\n          BINARY: 1,\n          STREAM: 2\n        };\n        exports.CMapCompressionType = CMapCompressionType;\n        const OPS = {\n          dependency: 1,\n          setLineWidth: 2,\n          setLineCap: 3,\n          setLineJoin: 4,\n          setMiterLimit: 5,\n          setDash: 6,\n          setRenderingIntent: 7,\n          setFlatness: 8,\n          setGState: 9,\n          save: 10,\n          restore: 11,\n          transform: 12,\n          moveTo: 13,\n          lineTo: 14,\n          curveTo: 15,\n          curveTo2: 16,\n          curveTo3: 17,\n          closePath: 18,\n          rectangle: 19,\n          stroke: 20,\n          closeStroke: 21,\n          fill: 22,\n          eoFill: 23,\n          fillStroke: 24,\n          eoFillStroke: 25,\n          closeFillStroke: 26,\n          closeEOFillStroke: 27,\n          endPath: 28,\n          clip: 29,\n          eoClip: 30,\n          beginText: 31,\n          endText: 32,\n          setCharSpacing: 33,\n          setWordSpacing: 34,\n          setHScale: 35,\n          setLeading: 36,\n          setFont: 37,\n          setTextRenderingMode: 38,\n          setTextRise: 39,\n          moveText: 40,\n          setLeadingMoveText: 41,\n          setTextMatrix: 42,\n          nextLine: 43,\n          showText: 44,\n          showSpacedText: 45,\n          nextLineShowText: 46,\n          nextLineSetSpacingShowText: 47,\n          setCharWidth: 48,\n          setCharWidthAndBounds: 49,\n          setStrokeColorSpace: 50,\n          setFillColorSpace: 51,\n          setStrokeColor: 52,\n          setStrokeColorN: 53,\n          setFillColor: 54,\n          setFillColorN: 55,\n          setStrokeGray: 56,\n          setFillGray: 57,\n          setStrokeRGBColor: 58,\n          setFillRGBColor: 59,\n          setStrokeCMYKColor: 60,\n          setFillCMYKColor: 61,\n          shadingFill: 62,\n          beginInlineImage: 63,\n          beginImageData: 64,\n          endInlineImage: 65,\n          paintXObject: 66,\n          markPoint: 67,\n          markPointProps: 68,\n          beginMarkedContent: 69,\n          beginMarkedContentProps: 70,\n          endMarkedContent: 71,\n          beginCompat: 72,\n          endCompat: 73,\n          paintFormXObjectBegin: 74,\n          paintFormXObjectEnd: 75,\n          beginGroup: 76,\n          endGroup: 77,\n          beginAnnotations: 78,\n          endAnnotations: 79,\n          beginAnnotation: 80,\n          endAnnotation: 81,\n          paintJpegXObject: 82,\n          paintImageMaskXObject: 83,\n          paintImageMaskXObjectGroup: 84,\n          paintImageXObject: 85,\n          paintInlineImageXObject: 86,\n          paintInlineImageXObjectGroup: 87,\n          paintImageXObjectRepeat: 88,\n          paintImageMaskXObjectRepeat: 89,\n          paintSolidColorImageMask: 90,\n          constructPath: 91\n        };\n        exports.OPS = OPS;\n        const UNSUPPORTED_FEATURES = {\n          unknown: \"unknown\",\n          forms: \"forms\",\n          javaScript: \"javaScript\",\n          signatures: \"signatures\",\n          smask: \"smask\",\n          shadingPattern: \"shadingPattern\",\n          font: \"font\",\n          errorTilingPattern: \"errorTilingPattern\",\n          errorExtGState: \"errorExtGState\",\n          errorXObject: \"errorXObject\",\n          errorFontLoadType3: \"errorFontLoadType3\",\n          errorFontState: \"errorFontState\",\n          errorFontMissing: \"errorFontMissing\",\n          errorFontTranslate: \"errorFontTranslate\",\n          errorColorSpace: \"errorColorSpace\",\n          errorOperatorList: \"errorOperatorList\",\n          errorFontToUnicode: \"errorFontToUnicode\",\n          errorFontLoadNative: \"errorFontLoadNative\",\n          errorFontBuildPath: \"errorFontBuildPath\",\n          errorFontGetPath: \"errorFontGetPath\",\n          errorMarkedContent: \"errorMarkedContent\",\n          errorContentSubStream: \"errorContentSubStream\"\n        };\n        exports.UNSUPPORTED_FEATURES = UNSUPPORTED_FEATURES;\n        const PasswordResponses = {\n          NEED_PASSWORD: 1,\n          INCORRECT_PASSWORD: 2\n        };\n        exports.PasswordResponses = PasswordResponses;\n        let verbosity = VerbosityLevel.WARNINGS;\n\n        function setVerbosityLevel(level) {\n          if (Number.isInteger(level)) {\n            verbosity = level;\n          }\n        }\n\n        function getVerbosityLevel() {\n          return verbosity;\n        }\n\n        function info(msg) {\n          if (verbosity >= VerbosityLevel.INFOS) {\n            console.log(`Info: ${msg}`);\n          }\n        }\n\n        function warn(msg) {\n          if (verbosity >= VerbosityLevel.WARNINGS) {\n            console.log(`Warning: ${msg}`);\n          }\n        }\n\n        function unreachable(msg) {\n          throw new Error(msg);\n        }\n\n        function assert(cond, msg) {\n          if (!cond) {\n            unreachable(msg);\n          }\n        }\n\n        function isSameOrigin(baseUrl, otherUrl) {\n          let base;\n\n          try {\n            base = new URL(baseUrl);\n\n            if (!base.origin || base.origin === \"null\") {\n              return false;\n            }\n          } catch (e) {\n            return false;\n          }\n\n          const other = new URL(otherUrl, base);\n          return base.origin === other.origin;\n        }\n\n        function _isValidProtocol(url) {\n          if (!url) {\n            return false;\n          }\n\n          switch (url.protocol) {\n            case \"http:\":\n            case \"https:\":\n            case \"ftp:\":\n            case \"mailto:\":\n            case \"tel:\":\n              return true;\n\n            default:\n              return false;\n          }\n        }\n\n        function createValidAbsoluteUrl(url) {\n          let baseUrl = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n          let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n          if (!url) {\n            return null;\n          }\n\n          try {\n            if (options && typeof url === \"string\") {\n              if (options.addDefaultProtocol && url.startsWith(\"www.\")) {\n                const dots = url.match(/\\./g);\n\n                if (dots && dots.length >= 2) {\n                  url = `http://${url}`;\n                }\n              }\n\n              if (options.tryConvertEncoding) {\n                try {\n                  url = stringToUTF8String(url);\n                } catch (ex) {}\n              }\n            }\n\n            const absoluteUrl = baseUrl ? new URL(url, baseUrl) : new URL(url);\n\n            if (_isValidProtocol(absoluteUrl)) {\n              return absoluteUrl;\n            }\n          } catch (ex) {}\n\n          return null;\n        }\n\n        function shadow(obj, prop, value) {\n          Object.defineProperty(obj, prop, {\n            value,\n            enumerable: true,\n            configurable: true,\n            writable: false\n          });\n          return value;\n        }\n\n        const BaseException = function BaseExceptionClosure() {\n          function BaseException(message, name) {\n            if (this.constructor === BaseException) {\n              unreachable(\"Cannot initialize BaseException.\");\n            }\n\n            this.message = message;\n            this.name = name;\n          }\n\n          BaseException.prototype = new Error();\n          BaseException.constructor = BaseException;\n          return BaseException;\n        }();\n\n        exports.BaseException = BaseException;\n\n        class PasswordException extends BaseException {\n          constructor(msg, code) {\n            super(msg, \"PasswordException\");\n            this.code = code;\n          }\n\n        }\n\n        exports.PasswordException = PasswordException;\n\n        class UnknownErrorException extends BaseException {\n          constructor(msg, details) {\n            super(msg, \"UnknownErrorException\");\n            this.details = details;\n          }\n\n        }\n\n        exports.UnknownErrorException = UnknownErrorException;\n\n        class InvalidPDFException extends BaseException {\n          constructor(msg) {\n            super(msg, \"InvalidPDFException\");\n          }\n\n        }\n\n        exports.InvalidPDFException = InvalidPDFException;\n\n        class MissingPDFException extends BaseException {\n          constructor(msg) {\n            super(msg, \"MissingPDFException\");\n          }\n\n        }\n\n        exports.MissingPDFException = MissingPDFException;\n\n        class UnexpectedResponseException extends BaseException {\n          constructor(msg, status) {\n            super(msg, \"UnexpectedResponseException\");\n            this.status = status;\n          }\n\n        }\n\n        exports.UnexpectedResponseException = UnexpectedResponseException;\n\n        class FormatError extends BaseException {\n          constructor(msg) {\n            super(msg, \"FormatError\");\n          }\n\n        }\n\n        exports.FormatError = FormatError;\n\n        class AbortException extends BaseException {\n          constructor(msg) {\n            super(msg, \"AbortException\");\n          }\n\n        }\n\n        exports.AbortException = AbortException;\n        const NullCharactersRegExp = /\\x00+/g;\n        const InvisibleCharactersRegExp = /[\\x01-\\x1F]/g;\n\n        function removeNullCharacters(str) {\n          let replaceInvisible = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n          if (typeof str !== \"string\") {\n            warn(\"The argument for removeNullCharacters must be a string.\");\n            return str;\n          }\n\n          if (replaceInvisible) {\n            str = str.replace(InvisibleCharactersRegExp, \" \");\n          }\n\n          return str.replace(NullCharactersRegExp, \"\");\n        }\n\n        function bytesToString(bytes) {\n          assert(bytes !== null && typeof bytes === \"object\" && bytes.length !== undefined, \"Invalid argument for bytesToString\");\n          const length = bytes.length;\n          const MAX_ARGUMENT_COUNT = 8192;\n\n          if (length < MAX_ARGUMENT_COUNT) {\n            return String.fromCharCode.apply(null, bytes);\n          }\n\n          const strBuf = [];\n\n          for (let i = 0; i < length; i += MAX_ARGUMENT_COUNT) {\n            const chunkEnd = Math.min(i + MAX_ARGUMENT_COUNT, length);\n            const chunk = bytes.subarray(i, chunkEnd);\n            strBuf.push(String.fromCharCode.apply(null, chunk));\n          }\n\n          return strBuf.join(\"\");\n        }\n\n        function stringToBytes(str) {\n          assert(typeof str === \"string\", \"Invalid argument for stringToBytes\");\n          const length = str.length;\n          const bytes = new Uint8Array(length);\n\n          for (let i = 0; i < length; ++i) {\n            bytes[i] = str.charCodeAt(i) & 0xff;\n          }\n\n          return bytes;\n        }\n\n        function arrayByteLength(arr) {\n          if (arr.length !== undefined) {\n            return arr.length;\n          }\n\n          assert(arr.byteLength !== undefined, \"arrayByteLength - invalid argument.\");\n          return arr.byteLength;\n        }\n\n        function arraysToBytes(arr) {\n          const length = arr.length;\n\n          if (length === 1 && arr[0] instanceof Uint8Array) {\n            return arr[0];\n          }\n\n          let resultLength = 0;\n\n          for (let i = 0; i < length; i++) {\n            resultLength += arrayByteLength(arr[i]);\n          }\n\n          let pos = 0;\n          const data = new Uint8Array(resultLength);\n\n          for (let i = 0; i < length; i++) {\n            let item = arr[i];\n\n            if (!(item instanceof Uint8Array)) {\n              if (typeof item === \"string\") {\n                item = stringToBytes(item);\n              } else {\n                item = new Uint8Array(item);\n              }\n            }\n\n            const itemLength = item.byteLength;\n            data.set(item, pos);\n            pos += itemLength;\n          }\n\n          return data;\n        }\n\n        function string32(value) {\n          return String.fromCharCode(value >> 24 & 0xff, value >> 16 & 0xff, value >> 8 & 0xff, value & 0xff);\n        }\n\n        function objectSize(obj) {\n          return Object.keys(obj).length;\n        }\n\n        function objectFromMap(map) {\n          const obj = Object.create(null);\n\n          for (const [key, value] of map) {\n            obj[key] = value;\n          }\n\n          return obj;\n        }\n\n        function isLittleEndian() {\n          const buffer8 = new Uint8Array(4);\n          buffer8[0] = 1;\n          const view32 = new Uint32Array(buffer8.buffer, 0, 1);\n          return view32[0] === 1;\n        }\n\n        const IsLittleEndianCached = {\n          get value() {\n            return shadow(this, \"value\", isLittleEndian());\n          }\n\n        };\n        exports.IsLittleEndianCached = IsLittleEndianCached;\n\n        function isEvalSupported() {\n          try {\n            new Function(\"\");\n            return true;\n          } catch (e) {\n            return false;\n          }\n        }\n\n        const IsEvalSupportedCached = {\n          get value() {\n            return shadow(this, \"value\", isEvalSupported());\n          }\n\n        };\n        exports.IsEvalSupportedCached = IsEvalSupportedCached;\n        const hexNumbers = [...Array(256).keys()].map(n => n.toString(16).padStart(2, \"0\"));\n\n        class Util {\n          static makeHexColor(r, g, b) {\n            return `#${hexNumbers[r]}${hexNumbers[g]}${hexNumbers[b]}`;\n          }\n\n          static transform(m1, m2) {\n            return [m1[0] * m2[0] + m1[2] * m2[1], m1[1] * m2[0] + m1[3] * m2[1], m1[0] * m2[2] + m1[2] * m2[3], m1[1] * m2[2] + m1[3] * m2[3], m1[0] * m2[4] + m1[2] * m2[5] + m1[4], m1[1] * m2[4] + m1[3] * m2[5] + m1[5]];\n          }\n\n          static applyTransform(p, m) {\n            const xt = p[0] * m[0] + p[1] * m[2] + m[4];\n            const yt = p[0] * m[1] + p[1] * m[3] + m[5];\n            return [xt, yt];\n          }\n\n          static applyInverseTransform(p, m) {\n            const d = m[0] * m[3] - m[1] * m[2];\n            const xt = (p[0] * m[3] - p[1] * m[2] + m[2] * m[5] - m[4] * m[3]) / d;\n            const yt = (-p[0] * m[1] + p[1] * m[0] + m[4] * m[1] - m[5] * m[0]) / d;\n            return [xt, yt];\n          }\n\n          static getAxialAlignedBoundingBox(r, m) {\n            const p1 = Util.applyTransform(r, m);\n            const p2 = Util.applyTransform(r.slice(2, 4), m);\n            const p3 = Util.applyTransform([r[0], r[3]], m);\n            const p4 = Util.applyTransform([r[2], r[1]], m);\n            return [Math.min(p1[0], p2[0], p3[0], p4[0]), Math.min(p1[1], p2[1], p3[1], p4[1]), Math.max(p1[0], p2[0], p3[0], p4[0]), Math.max(p1[1], p2[1], p3[1], p4[1])];\n          }\n\n          static inverseTransform(m) {\n            const d = m[0] * m[3] - m[1] * m[2];\n            return [m[3] / d, -m[1] / d, -m[2] / d, m[0] / d, (m[2] * m[5] - m[4] * m[3]) / d, (m[4] * m[1] - m[5] * m[0]) / d];\n          }\n\n          static apply3dTransform(m, v) {\n            return [m[0] * v[0] + m[1] * v[1] + m[2] * v[2], m[3] * v[0] + m[4] * v[1] + m[5] * v[2], m[6] * v[0] + m[7] * v[1] + m[8] * v[2]];\n          }\n\n          static singularValueDecompose2dScale(m) {\n            const transpose = [m[0], m[2], m[1], m[3]];\n            const a = m[0] * transpose[0] + m[1] * transpose[2];\n            const b = m[0] * transpose[1] + m[1] * transpose[3];\n            const c = m[2] * transpose[0] + m[3] * transpose[2];\n            const d = m[2] * transpose[1] + m[3] * transpose[3];\n            const first = (a + d) / 2;\n            const second = Math.sqrt((a + d) ** 2 - 4 * (a * d - c * b)) / 2;\n            const sx = first + second || 1;\n            const sy = first - second || 1;\n            return [Math.sqrt(sx), Math.sqrt(sy)];\n          }\n\n          static normalizeRect(rect) {\n            const r = rect.slice(0);\n\n            if (rect[0] > rect[2]) {\n              r[0] = rect[2];\n              r[2] = rect[0];\n            }\n\n            if (rect[1] > rect[3]) {\n              r[1] = rect[3];\n              r[3] = rect[1];\n            }\n\n            return r;\n          }\n\n          static intersect(rect1, rect2) {\n            function compare(a, b) {\n              return a - b;\n            }\n\n            const orderedX = [rect1[0], rect1[2], rect2[0], rect2[2]].sort(compare);\n            const orderedY = [rect1[1], rect1[3], rect2[1], rect2[3]].sort(compare);\n            const result = [];\n            rect1 = Util.normalizeRect(rect1);\n            rect2 = Util.normalizeRect(rect2);\n\n            if (orderedX[0] === rect1[0] && orderedX[1] === rect2[0] || orderedX[0] === rect2[0] && orderedX[1] === rect1[0]) {\n              result[0] = orderedX[1];\n              result[2] = orderedX[2];\n            } else {\n              return null;\n            }\n\n            if (orderedY[0] === rect1[1] && orderedY[1] === rect2[1] || orderedY[0] === rect2[1] && orderedY[1] === rect1[1]) {\n              result[1] = orderedY[1];\n              result[3] = orderedY[2];\n            } else {\n              return null;\n            }\n\n            return result;\n          }\n\n          static bezierBoundingBox(x0, y0, x1, y1, x2, y2, x3, y3) {\n            const tvalues = [],\n                  bounds = [[], []];\n            let a, b, c, t, t1, t2, b2ac, sqrtb2ac;\n\n            for (let i = 0; i < 2; ++i) {\n              if (i === 0) {\n                b = 6 * x0 - 12 * x1 + 6 * x2;\n                a = -3 * x0 + 9 * x1 - 9 * x2 + 3 * x3;\n                c = 3 * x1 - 3 * x0;\n              } else {\n                b = 6 * y0 - 12 * y1 + 6 * y2;\n                a = -3 * y0 + 9 * y1 - 9 * y2 + 3 * y3;\n                c = 3 * y1 - 3 * y0;\n              }\n\n              if (Math.abs(a) < 1e-12) {\n                if (Math.abs(b) < 1e-12) {\n                  continue;\n                }\n\n                t = -c / b;\n\n                if (0 < t && t < 1) {\n                  tvalues.push(t);\n                }\n\n                continue;\n              }\n\n              b2ac = b * b - 4 * c * a;\n              sqrtb2ac = Math.sqrt(b2ac);\n\n              if (b2ac < 0) {\n                continue;\n              }\n\n              t1 = (-b + sqrtb2ac) / (2 * a);\n\n              if (0 < t1 && t1 < 1) {\n                tvalues.push(t1);\n              }\n\n              t2 = (-b - sqrtb2ac) / (2 * a);\n\n              if (0 < t2 && t2 < 1) {\n                tvalues.push(t2);\n              }\n            }\n\n            let j = tvalues.length,\n                mt;\n            const jlen = j;\n\n            while (j--) {\n              t = tvalues[j];\n              mt = 1 - t;\n              bounds[0][j] = mt * mt * mt * x0 + 3 * mt * mt * t * x1 + 3 * mt * t * t * x2 + t * t * t * x3;\n              bounds[1][j] = mt * mt * mt * y0 + 3 * mt * mt * t * y1 + 3 * mt * t * t * y2 + t * t * t * y3;\n            }\n\n            bounds[0][jlen] = x0;\n            bounds[1][jlen] = y0;\n            bounds[0][jlen + 1] = x3;\n            bounds[1][jlen + 1] = y3;\n            bounds[0].length = bounds[1].length = jlen + 2;\n            return [Math.min(...bounds[0]), Math.min(...bounds[1]), Math.max(...bounds[0]), Math.max(...bounds[1])];\n          }\n\n        }\n\n        exports.Util = Util;\n        const PDFStringTranslateTable = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x2d8, 0x2c7, 0x2c6, 0x2d9, 0x2dd, 0x2db, 0x2da, 0x2dc, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x2022, 0x2020, 0x2021, 0x2026, 0x2014, 0x2013, 0x192, 0x2044, 0x2039, 0x203a, 0x2212, 0x2030, 0x201e, 0x201c, 0x201d, 0x2018, 0x2019, 0x201a, 0x2122, 0xfb01, 0xfb02, 0x141, 0x152, 0x160, 0x178, 0x17d, 0x131, 0x142, 0x153, 0x161, 0x17e, 0, 0x20ac];\n\n        function stringToPDFString(str) {\n          const length = str.length,\n                strBuf = [];\n\n          if (str[0] === \"\\xFE\" && str[1] === \"\\xFF\") {\n            for (let i = 2; i < length; i += 2) {\n              strBuf.push(String.fromCharCode(str.charCodeAt(i) << 8 | str.charCodeAt(i + 1)));\n            }\n          } else if (str[0] === \"\\xFF\" && str[1] === \"\\xFE\") {\n            for (let i = 2; i < length; i += 2) {\n              strBuf.push(String.fromCharCode(str.charCodeAt(i + 1) << 8 | str.charCodeAt(i)));\n            }\n          } else {\n            for (let i = 0; i < length; ++i) {\n              const code = PDFStringTranslateTable[str.charCodeAt(i)];\n              strBuf.push(code ? String.fromCharCode(code) : str.charAt(i));\n            }\n          }\n\n          return strBuf.join(\"\");\n        }\n\n        function escapeString(str) {\n          return str.replace(/([()\\\\\\n\\r])/g, match => {\n            if (match === \"\\n\") {\n              return \"\\\\n\";\n            } else if (match === \"\\r\") {\n              return \"\\\\r\";\n            }\n\n            return `\\\\${match}`;\n          });\n        }\n\n        function isAscii(str) {\n          return /^[\\x00-\\x7F]*$/.test(str);\n        }\n\n        function stringToUTF16BEString(str) {\n          const buf = [\"\\xFE\\xFF\"];\n\n          for (let i = 0, ii = str.length; i < ii; i++) {\n            const char = str.charCodeAt(i);\n            buf.push(String.fromCharCode(char >> 8 & 0xff), String.fromCharCode(char & 0xff));\n          }\n\n          return buf.join(\"\");\n        }\n\n        function stringToUTF8String(str) {\n          return decodeURIComponent(escape(str));\n        }\n\n        function utf8StringToString(str) {\n          return unescape(encodeURIComponent(str));\n        }\n\n        function isBool(v) {\n          return typeof v === \"boolean\";\n        }\n\n        function isNum(v) {\n          return typeof v === \"number\";\n        }\n\n        function isString(v) {\n          return typeof v === \"string\";\n        }\n\n        function isArrayBuffer(v) {\n          return typeof v === \"object\" && v !== null && v.byteLength !== undefined;\n        }\n\n        function isArrayEqual(arr1, arr2) {\n          if (arr1.length !== arr2.length) {\n            return false;\n          }\n\n          for (let i = 0, ii = arr1.length; i < ii; i++) {\n            if (arr1[i] !== arr2[i]) {\n              return false;\n            }\n          }\n\n          return true;\n        }\n\n        function getModificationDate() {\n          let date = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Date();\n          const buffer = [date.getUTCFullYear().toString(), (date.getUTCMonth() + 1).toString().padStart(2, \"0\"), date.getUTCDate().toString().padStart(2, \"0\"), date.getUTCHours().toString().padStart(2, \"0\"), date.getUTCMinutes().toString().padStart(2, \"0\"), date.getUTCSeconds().toString().padStart(2, \"0\")];\n          return buffer.join(\"\");\n        }\n\n        function createPromiseCapability() {\n          const capability = Object.create(null);\n          let isSettled = false;\n          Object.defineProperty(capability, \"settled\", {\n            get() {\n              return isSettled;\n            }\n\n          });\n          capability.promise = new Promise(function (resolve, reject) {\n            capability.resolve = function (data) {\n              isSettled = true;\n              resolve(data);\n            };\n\n            capability.reject = function (reason) {\n              isSettled = true;\n              reject(reason);\n            };\n          });\n          return capability;\n        }\n\n        function createObjectURL(data) {\n          let contentType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n          let forceDataSchema = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n          if (URL.createObjectURL && typeof Blob !== \"undefined\" && !forceDataSchema) {\n            return URL.createObjectURL(new Blob([data], {\n              type: contentType\n            }));\n          }\n\n          const digits = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n          let buffer = `data:${contentType};base64,`;\n\n          for (let i = 0, ii = data.length; i < ii; i += 3) {\n            const b1 = data[i] & 0xff;\n            const b2 = data[i + 1] & 0xff;\n            const b3 = data[i + 2] & 0xff;\n            const d1 = b1 >> 2,\n                  d2 = (b1 & 3) << 4 | b2 >> 4;\n            const d3 = i + 1 < ii ? (b2 & 0xf) << 2 | b3 >> 6 : 64;\n            const d4 = i + 2 < ii ? b3 & 0x3f : 64;\n            buffer += digits[d1] + digits[d2] + digits[d3] + digits[d4];\n          }\n\n          return buffer;\n        }\n        /***/\n\n      },\n      /* 3 */\n\n      /***/\n      (__unused_webpack_module, __unused_webpack_exports, __w_pdfjs_require__) => {\n        var _is_node = __w_pdfjs_require__(4);\n\n        ;\n        /***/\n      },\n      /* 4 */\n\n      /***/\n      (__unused_webpack_module, exports) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.isNodeJS = void 0;\n        const isNodeJS = typeof process === \"object\" && process + \"\" === \"[object process]\" && !process.versions.nw && !(process.versions.electron && process.type && process.type !== \"browser\");\n        exports.isNodeJS = isNodeJS;\n        /***/\n      },\n      /* 5 */\n\n      /***/\n      (__unused_webpack_module, exports, __w_pdfjs_require__) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.BaseStandardFontDataFactory = exports.BaseSVGFactory = exports.BaseCanvasFactory = exports.BaseCMapReaderFactory = void 0;\n\n        var _util = __w_pdfjs_require__(2);\n\n        class BaseCanvasFactory {\n          constructor() {\n            if (this.constructor === BaseCanvasFactory) {\n              (0, _util.unreachable)(\"Cannot initialize BaseCanvasFactory.\");\n            }\n          }\n\n          create(width, height) {\n            if (width <= 0 || height <= 0) {\n              throw new Error(\"Invalid canvas size\");\n            }\n\n            const canvas = this._createCanvas(width, height);\n\n            return {\n              canvas,\n              context: canvas.getContext(\"2d\")\n            };\n          }\n\n          reset(canvasAndContext, width, height) {\n            if (!canvasAndContext.canvas) {\n              throw new Error(\"Canvas is not specified\");\n            }\n\n            if (width <= 0 || height <= 0) {\n              throw new Error(\"Invalid canvas size\");\n            }\n\n            canvasAndContext.canvas.width = width;\n            canvasAndContext.canvas.height = height;\n          }\n\n          destroy(canvasAndContext) {\n            if (!canvasAndContext.canvas) {\n              throw new Error(\"Canvas is not specified\");\n            }\n\n            canvasAndContext.canvas.width = 0;\n            canvasAndContext.canvas.height = 0;\n            canvasAndContext.canvas = null;\n            canvasAndContext.context = null;\n          }\n\n          _createCanvas(width, height) {\n            (0, _util.unreachable)(\"Abstract method `_createCanvas` called.\");\n          }\n\n        }\n\n        exports.BaseCanvasFactory = BaseCanvasFactory;\n\n        class BaseCMapReaderFactory {\n          constructor(_ref3) {\n            let {\n              baseUrl = null,\n              isCompressed = false\n            } = _ref3;\n\n            if (this.constructor === BaseCMapReaderFactory) {\n              (0, _util.unreachable)(\"Cannot initialize BaseCMapReaderFactory.\");\n            }\n\n            this.baseUrl = baseUrl;\n            this.isCompressed = isCompressed;\n          }\n\n          async fetch(_ref4) {\n            let {\n              name\n            } = _ref4;\n\n            if (!this.baseUrl) {\n              throw new Error('The CMap \"baseUrl\" parameter must be specified, ensure that ' + 'the \"cMapUrl\" and \"cMapPacked\" API parameters are provided.');\n            }\n\n            if (!name) {\n              throw new Error(\"CMap name must be specified.\");\n            }\n\n            const url = this.baseUrl + name + (this.isCompressed ? \".bcmap\" : \"\");\n            const compressionType = this.isCompressed ? _util.CMapCompressionType.BINARY : _util.CMapCompressionType.NONE;\n            return this._fetchData(url, compressionType).catch(reason => {\n              throw new Error(`Unable to load ${this.isCompressed ? \"binary \" : \"\"}CMap at: ${url}`);\n            });\n          }\n\n          _fetchData(url, compressionType) {\n            (0, _util.unreachable)(\"Abstract method `_fetchData` called.\");\n          }\n\n        }\n\n        exports.BaseCMapReaderFactory = BaseCMapReaderFactory;\n\n        class BaseStandardFontDataFactory {\n          constructor(_ref5) {\n            let {\n              baseUrl = null\n            } = _ref5;\n\n            if (this.constructor === BaseStandardFontDataFactory) {\n              (0, _util.unreachable)(\"Cannot initialize BaseStandardFontDataFactory.\");\n            }\n\n            this.baseUrl = baseUrl;\n          }\n\n          async fetch(_ref6) {\n            let {\n              filename\n            } = _ref6;\n\n            if (!this.baseUrl) {\n              throw new Error('The standard font \"baseUrl\" parameter must be specified, ensure that ' + 'the \"standardFontDataUrl\" API parameter is provided.');\n            }\n\n            if (!filename) {\n              throw new Error(\"Font filename must be specified.\");\n            }\n\n            const url = `${this.baseUrl}${filename}`;\n            return this._fetchData(url).catch(reason => {\n              throw new Error(`Unable to load font data at: ${url}`);\n            });\n          }\n\n          _fetchData(url) {\n            (0, _util.unreachable)(\"Abstract method `_fetchData` called.\");\n          }\n\n        }\n\n        exports.BaseStandardFontDataFactory = BaseStandardFontDataFactory;\n\n        class BaseSVGFactory {\n          constructor() {\n            if (this.constructor === BaseSVGFactory) {\n              (0, _util.unreachable)(\"Cannot initialize BaseSVGFactory.\");\n            }\n          }\n\n          create(width, height) {\n            if (width <= 0 || height <= 0) {\n              throw new Error(\"Invalid SVG dimensions\");\n            }\n\n            const svg = this._createSVG(\"svg:svg\");\n\n            svg.setAttribute(\"version\", \"1.1\");\n            svg.setAttribute(\"width\", `${width}px`);\n            svg.setAttribute(\"height\", `${height}px`);\n            svg.setAttribute(\"preserveAspectRatio\", \"none\");\n            svg.setAttribute(\"viewBox\", `0 0 ${width} ${height}`);\n            return svg;\n          }\n\n          createElement(type) {\n            if (typeof type !== \"string\") {\n              throw new Error(\"Invalid SVG element type\");\n            }\n\n            return this._createSVG(type);\n          }\n\n          _createSVG(type) {\n            (0, _util.unreachable)(\"Abstract method `_createSVG` called.\");\n          }\n\n        }\n\n        exports.BaseSVGFactory = BaseSVGFactory;\n        /***/\n      },\n      /* 6 */\n\n      /***/\n      (__unused_webpack_module, exports, __w_pdfjs_require__) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.build = exports.RenderTask = exports.PDFWorker = exports.PDFPageProxy = exports.PDFDocumentProxy = exports.PDFDocumentLoadingTask = exports.PDFDataRangeTransport = exports.LoopbackPort = exports.DefaultStandardFontDataFactory = exports.DefaultCanvasFactory = exports.DefaultCMapReaderFactory = void 0;\n        exports.getDocument = getDocument;\n        exports.setPDFNetworkStreamFactory = setPDFNetworkStreamFactory;\n        exports.version = void 0;\n\n        var _util = __w_pdfjs_require__(2);\n\n        var _display_utils = __w_pdfjs_require__(1);\n\n        var _font_loader = __w_pdfjs_require__(7);\n\n        var _node_utils = __w_pdfjs_require__(8);\n\n        var _annotation_storage = __w_pdfjs_require__(9);\n\n        var _canvas = __w_pdfjs_require__(10);\n\n        var _worker_options = __w_pdfjs_require__(12);\n\n        var _is_node = __w_pdfjs_require__(4);\n\n        var _message_handler = __w_pdfjs_require__(13);\n\n        var _metadata = __w_pdfjs_require__(14);\n\n        var _optional_content_config = __w_pdfjs_require__(15);\n\n        var _transport_stream = __w_pdfjs_require__(16);\n\n        var _xfa_text = __w_pdfjs_require__(17);\n\n        const DEFAULT_RANGE_CHUNK_SIZE = 65536;\n        const RENDERING_CANCELLED_TIMEOUT = 100;\n        const DefaultCanvasFactory = _is_node.isNodeJS ? _node_utils.NodeCanvasFactory : _display_utils.DOMCanvasFactory;\n        exports.DefaultCanvasFactory = DefaultCanvasFactory;\n        const DefaultCMapReaderFactory = _is_node.isNodeJS ? _node_utils.NodeCMapReaderFactory : _display_utils.DOMCMapReaderFactory;\n        exports.DefaultCMapReaderFactory = DefaultCMapReaderFactory;\n        const DefaultStandardFontDataFactory = _is_node.isNodeJS ? _node_utils.NodeStandardFontDataFactory : _display_utils.DOMStandardFontDataFactory;\n        exports.DefaultStandardFontDataFactory = DefaultStandardFontDataFactory;\n        let createPDFNetworkStream;\n\n        function setPDFNetworkStreamFactory(pdfNetworkStreamFactory) {\n          createPDFNetworkStream = pdfNetworkStreamFactory;\n        }\n\n        function getDocument(src) {\n          const task = new PDFDocumentLoadingTask();\n          let source;\n\n          if (typeof src === \"string\" || src instanceof URL) {\n            source = {\n              url: src\n            };\n          } else if ((0, _util.isArrayBuffer)(src)) {\n            source = {\n              data: src\n            };\n          } else if (src instanceof PDFDataRangeTransport) {\n            source = {\n              range: src\n            };\n          } else {\n            if (typeof src !== \"object\") {\n              throw new Error(\"Invalid parameter in getDocument, \" + \"need either string, URL, Uint8Array, or parameter object.\");\n            }\n\n            if (!src.url && !src.data && !src.range) {\n              throw new Error(\"Invalid parameter object: need either .data, .range or .url\");\n            }\n\n            source = src;\n          }\n\n          const params = Object.create(null);\n          let rangeTransport = null,\n              worker = null;\n\n          for (const key in source) {\n            const value = source[key];\n\n            switch (key) {\n              case \"url\":\n                if (typeof window !== \"undefined\") {\n                  try {\n                    params[key] = new URL(value, window.location).href;\n                    continue;\n                  } catch (ex) {\n                    (0, _util.warn)(`Cannot create valid URL: \"${ex}\".`);\n                  }\n                } else if (typeof value === \"string\" || value instanceof URL) {\n                  params[key] = value.toString();\n                  continue;\n                }\n\n                throw new Error(\"Invalid PDF url data: \" + \"either string or URL-object is expected in the url property.\");\n\n              case \"range\":\n                rangeTransport = value;\n                continue;\n\n              case \"worker\":\n                worker = value;\n                continue;\n\n              case \"data\":\n                if (_is_node.isNodeJS && typeof Buffer !== \"undefined\" && value instanceof Buffer) {\n                  params[key] = new Uint8Array(value);\n                } else if (value instanceof Uint8Array) {\n                  break;\n                } else if (typeof value === \"string\") {\n                  params[key] = (0, _util.stringToBytes)(value);\n                } else if (typeof value === \"object\" && value !== null && !isNaN(value.length)) {\n                  params[key] = new Uint8Array(value);\n                } else if ((0, _util.isArrayBuffer)(value)) {\n                  params[key] = new Uint8Array(value);\n                } else {\n                  throw new Error(\"Invalid PDF binary data: either typed array, \" + \"string, or array-like object is expected in the data property.\");\n                }\n\n                continue;\n            }\n\n            params[key] = value;\n          }\n\n          params.rangeChunkSize = params.rangeChunkSize || DEFAULT_RANGE_CHUNK_SIZE;\n          params.CMapReaderFactory = params.CMapReaderFactory || DefaultCMapReaderFactory;\n          params.StandardFontDataFactory = params.StandardFontDataFactory || DefaultStandardFontDataFactory;\n          params.ignoreErrors = params.stopAtErrors !== true;\n          params.fontExtraProperties = params.fontExtraProperties === true;\n          params.pdfBug = params.pdfBug === true;\n          params.enableXfa = params.enableXfa === true;\n\n          if (typeof params.docBaseUrl !== \"string\" || (0, _display_utils.isDataScheme)(params.docBaseUrl)) {\n            params.docBaseUrl = null;\n          }\n\n          if (!Number.isInteger(params.maxImageSize)) {\n            params.maxImageSize = -1;\n          }\n\n          if (typeof params.useWorkerFetch !== \"boolean\") {\n            params.useWorkerFetch = params.CMapReaderFactory === _display_utils.DOMCMapReaderFactory && params.StandardFontDataFactory === _display_utils.DOMStandardFontDataFactory;\n          }\n\n          if (typeof params.isEvalSupported !== \"boolean\") {\n            params.isEvalSupported = true;\n          }\n\n          if (typeof params.disableFontFace !== \"boolean\") {\n            params.disableFontFace = _is_node.isNodeJS;\n          }\n\n          if (typeof params.useSystemFonts !== \"boolean\") {\n            params.useSystemFonts = !_is_node.isNodeJS && !params.disableFontFace;\n          }\n\n          if (typeof params.ownerDocument === \"undefined\") {\n            params.ownerDocument = globalThis.document;\n          }\n\n          if (typeof params.disableRange !== \"boolean\") {\n            params.disableRange = false;\n          }\n\n          if (typeof params.disableStream !== \"boolean\") {\n            params.disableStream = false;\n          }\n\n          if (typeof params.disableAutoFetch !== \"boolean\") {\n            params.disableAutoFetch = false;\n          }\n\n          (0, _util.setVerbosityLevel)(params.verbosity);\n\n          if (!worker) {\n            const workerParams = {\n              verbosity: params.verbosity,\n              port: _worker_options.GlobalWorkerOptions.workerPort\n            };\n            worker = workerParams.port ? PDFWorker.fromPort(workerParams) : new PDFWorker(workerParams);\n            task._worker = worker;\n          }\n\n          const docId = task.docId;\n          worker.promise.then(function () {\n            if (task.destroyed) {\n              throw new Error(\"Loading aborted\");\n            }\n\n            const workerIdPromise = _fetchDocument(worker, params, rangeTransport, docId);\n\n            const networkStreamPromise = new Promise(function (resolve) {\n              let networkStream;\n\n              if (rangeTransport) {\n                networkStream = new _transport_stream.PDFDataTransportStream({\n                  length: params.length,\n                  initialData: params.initialData,\n                  progressiveDone: params.progressiveDone,\n                  contentDispositionFilename: params.contentDispositionFilename,\n                  disableRange: params.disableRange,\n                  disableStream: params.disableStream\n                }, rangeTransport);\n              } else if (!params.data) {\n                networkStream = createPDFNetworkStream({\n                  url: params.url,\n                  length: params.length,\n                  httpHeaders: params.httpHeaders,\n                  withCredentials: params.withCredentials,\n                  rangeChunkSize: params.rangeChunkSize,\n                  disableRange: params.disableRange,\n                  disableStream: params.disableStream\n                });\n              }\n\n              resolve(networkStream);\n            });\n            return Promise.all([workerIdPromise, networkStreamPromise]).then(function (_ref7) {\n              let [workerId, networkStream] = _ref7;\n\n              if (task.destroyed) {\n                throw new Error(\"Loading aborted\");\n              }\n\n              const messageHandler = new _message_handler.MessageHandler(docId, workerId, worker.port);\n              const transport = new WorkerTransport(messageHandler, task, networkStream, params);\n              task._transport = transport;\n              messageHandler.send(\"Ready\", null);\n            });\n          }).catch(task._capability.reject);\n          return task;\n        }\n\n        async function _fetchDocument(worker, source, pdfDataRangeTransport, docId) {\n          if (worker.destroyed) {\n            throw new Error(\"Worker was destroyed\");\n          }\n\n          if (pdfDataRangeTransport) {\n            source.length = pdfDataRangeTransport.length;\n            source.initialData = pdfDataRangeTransport.initialData;\n            source.progressiveDone = pdfDataRangeTransport.progressiveDone;\n            source.contentDispositionFilename = pdfDataRangeTransport.contentDispositionFilename;\n          }\n\n          const workerId = await worker.messageHandler.sendWithPromise(\"GetDocRequest\", {\n            docId,\n            apiVersion: '2.12.313',\n            source: {\n              data: source.data,\n              url: source.url,\n              password: source.password,\n              disableAutoFetch: source.disableAutoFetch,\n              rangeChunkSize: source.rangeChunkSize,\n              length: source.length\n            },\n            maxImageSize: source.maxImageSize,\n            disableFontFace: source.disableFontFace,\n            docBaseUrl: source.docBaseUrl,\n            ignoreErrors: source.ignoreErrors,\n            isEvalSupported: source.isEvalSupported,\n            fontExtraProperties: source.fontExtraProperties,\n            enableXfa: source.enableXfa,\n            useSystemFonts: source.useSystemFonts,\n            cMapUrl: source.useWorkerFetch ? source.cMapUrl : null,\n            standardFontDataUrl: source.useWorkerFetch ? source.standardFontDataUrl : null\n          });\n\n          if (worker.destroyed) {\n            throw new Error(\"Worker was destroyed\");\n          }\n\n          return workerId;\n        }\n\n        class PDFDocumentLoadingTask {\n          static get idCounters() {\n            return (0, _util.shadow)(this, \"idCounters\", {\n              doc: 0\n            });\n          }\n\n          constructor() {\n            this._capability = (0, _util.createPromiseCapability)();\n            this._transport = null;\n            this._worker = null;\n            this.docId = `d${PDFDocumentLoadingTask.idCounters.doc++}`;\n            this.destroyed = false;\n            this.onPassword = null;\n            this.onProgress = null;\n            this.onUnsupportedFeature = null;\n          }\n\n          get promise() {\n            return this._capability.promise;\n          }\n\n          async destroy() {\n            this.destroyed = true;\n            await this._transport?.destroy();\n            this._transport = null;\n\n            if (this._worker) {\n              this._worker.destroy();\n\n              this._worker = null;\n            }\n          }\n\n        }\n\n        exports.PDFDocumentLoadingTask = PDFDocumentLoadingTask;\n\n        class PDFDataRangeTransport {\n          constructor(length, initialData) {\n            let progressiveDone = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n            let contentDispositionFilename = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n            this.length = length;\n            this.initialData = initialData;\n            this.progressiveDone = progressiveDone;\n            this.contentDispositionFilename = contentDispositionFilename;\n            this._rangeListeners = [];\n            this._progressListeners = [];\n            this._progressiveReadListeners = [];\n            this._progressiveDoneListeners = [];\n            this._readyCapability = (0, _util.createPromiseCapability)();\n          }\n\n          addRangeListener(listener) {\n            this._rangeListeners.push(listener);\n          }\n\n          addProgressListener(listener) {\n            this._progressListeners.push(listener);\n          }\n\n          addProgressiveReadListener(listener) {\n            this._progressiveReadListeners.push(listener);\n          }\n\n          addProgressiveDoneListener(listener) {\n            this._progressiveDoneListeners.push(listener);\n          }\n\n          onDataRange(begin, chunk) {\n            for (const listener of this._rangeListeners) {\n              listener(begin, chunk);\n            }\n          }\n\n          onDataProgress(loaded, total) {\n            this._readyCapability.promise.then(() => {\n              for (const listener of this._progressListeners) {\n                listener(loaded, total);\n              }\n            });\n          }\n\n          onDataProgressiveRead(chunk) {\n            this._readyCapability.promise.then(() => {\n              for (const listener of this._progressiveReadListeners) {\n                listener(chunk);\n              }\n            });\n          }\n\n          onDataProgressiveDone() {\n            this._readyCapability.promise.then(() => {\n              for (const listener of this._progressiveDoneListeners) {\n                listener();\n              }\n            });\n          }\n\n          transportReady() {\n            this._readyCapability.resolve();\n          }\n\n          requestDataRange(begin, end) {\n            (0, _util.unreachable)(\"Abstract method PDFDataRangeTransport.requestDataRange\");\n          }\n\n          abort() {}\n\n        }\n\n        exports.PDFDataRangeTransport = PDFDataRangeTransport;\n\n        class PDFDocumentProxy {\n          constructor(pdfInfo, transport) {\n            this._pdfInfo = pdfInfo;\n            this._transport = transport;\n            Object.defineProperty(this, \"fingerprint\", {\n              get() {\n                (0, _display_utils.deprecated)(\"`PDFDocumentProxy.fingerprint`, \" + \"please use `PDFDocumentProxy.fingerprints` instead.\");\n                return this.fingerprints[0];\n              }\n\n            });\n            Object.defineProperty(this, \"getStats\", {\n              value: async () => {\n                (0, _display_utils.deprecated)(\"`PDFDocumentProxy.getStats`, \" + \"please use the `PDFDocumentProxy.stats`-getter instead.\");\n                return this.stats || {\n                  streamTypes: {},\n                  fontTypes: {}\n                };\n              }\n            });\n          }\n\n          get annotationStorage() {\n            return this._transport.annotationStorage;\n          }\n\n          get numPages() {\n            return this._pdfInfo.numPages;\n          }\n\n          get fingerprints() {\n            return this._pdfInfo.fingerprints;\n          }\n\n          get stats() {\n            return this._transport.stats;\n          }\n\n          get isPureXfa() {\n            return !!this._transport._htmlForXfa;\n          }\n\n          get allXfaHtml() {\n            return this._transport._htmlForXfa;\n          }\n\n          getPage(pageNumber) {\n            return this._transport.getPage(pageNumber);\n          }\n\n          getPageIndex(ref) {\n            return this._transport.getPageIndex(ref);\n          }\n\n          getDestinations() {\n            return this._transport.getDestinations();\n          }\n\n          getDestination(id) {\n            return this._transport.getDestination(id);\n          }\n\n          getPageLabels() {\n            return this._transport.getPageLabels();\n          }\n\n          getPageLayout() {\n            return this._transport.getPageLayout();\n          }\n\n          getPageMode() {\n            return this._transport.getPageMode();\n          }\n\n          getViewerPreferences() {\n            return this._transport.getViewerPreferences();\n          }\n\n          getOpenAction() {\n            return this._transport.getOpenAction();\n          }\n\n          getAttachments() {\n            return this._transport.getAttachments();\n          }\n\n          getJavaScript() {\n            return this._transport.getJavaScript();\n          }\n\n          getJSActions() {\n            return this._transport.getDocJSActions();\n          }\n\n          getOutline() {\n            return this._transport.getOutline();\n          }\n\n          getOptionalContentConfig() {\n            return this._transport.getOptionalContentConfig();\n          }\n\n          getPermissions() {\n            return this._transport.getPermissions();\n          }\n\n          getMetadata() {\n            return this._transport.getMetadata();\n          }\n\n          getMarkInfo() {\n            return this._transport.getMarkInfo();\n          }\n\n          getData() {\n            return this._transport.getData();\n          }\n\n          getDownloadInfo() {\n            return this._transport.downloadInfoCapability.promise;\n          }\n\n          cleanup() {\n            let keepLoadedFonts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n            return this._transport.startCleanup(keepLoadedFonts || this.isPureXfa);\n          }\n\n          destroy() {\n            return this.loadingTask.destroy();\n          }\n\n          get loadingParams() {\n            return this._transport.loadingParams;\n          }\n\n          get loadingTask() {\n            return this._transport.loadingTask;\n          }\n\n          saveDocument() {\n            if (this._transport.annotationStorage.size <= 0) {\n              (0, _display_utils.deprecated)(\"saveDocument called while `annotationStorage` is empty, \" + \"please use the getData-method instead.\");\n            }\n\n            return this._transport.saveDocument();\n          }\n\n          getFieldObjects() {\n            return this._transport.getFieldObjects();\n          }\n\n          hasJSActions() {\n            return this._transport.hasJSActions();\n          }\n\n          getCalculationOrderIds() {\n            return this._transport.getCalculationOrderIds();\n          }\n\n        }\n\n        exports.PDFDocumentProxy = PDFDocumentProxy;\n\n        class PDFPageProxy {\n          constructor(pageIndex, pageInfo, transport, ownerDocument) {\n            let pdfBug = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n            this._pageIndex = pageIndex;\n            this._pageInfo = pageInfo;\n            this._ownerDocument = ownerDocument;\n            this._transport = transport;\n            this._stats = pdfBug ? new _display_utils.StatTimer() : null;\n            this._pdfBug = pdfBug;\n            this.commonObjs = transport.commonObjs;\n            this.objs = new PDFObjects();\n            this.cleanupAfterRender = false;\n            this.pendingCleanup = false;\n            this._intentStates = new Map();\n            this._annotationPromises = new Map();\n            this.destroyed = false;\n          }\n\n          get pageNumber() {\n            return this._pageIndex + 1;\n          }\n\n          get rotate() {\n            return this._pageInfo.rotate;\n          }\n\n          get ref() {\n            return this._pageInfo.ref;\n          }\n\n          get userUnit() {\n            return this._pageInfo.userUnit;\n          }\n\n          get view() {\n            return this._pageInfo.view;\n          }\n\n          getViewport() {\n            let {\n              scale,\n              rotation = this.rotate,\n              offsetX = 0,\n              offsetY = 0,\n              dontFlip = false\n            } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n            return new _display_utils.PageViewport({\n              viewBox: this.view,\n              scale,\n              rotation,\n              offsetX,\n              offsetY,\n              dontFlip\n            });\n          }\n\n          getAnnotations() {\n            let {\n              intent = \"display\"\n            } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n            const intentArgs = this._transport.getRenderingIntent(intent);\n\n            let promise = this._annotationPromises.get(intentArgs.cacheKey);\n\n            if (!promise) {\n              promise = this._transport.getAnnotations(this._pageIndex, intentArgs.renderingIntent);\n\n              this._annotationPromises.set(intentArgs.cacheKey, promise);\n\n              promise = promise.then(annotations => {\n                for (const annotation of annotations) {\n                  if (annotation.titleObj !== undefined) {\n                    Object.defineProperty(annotation, \"title\", {\n                      get() {\n                        (0, _display_utils.deprecated)(\"`title`-property on annotation, please use `titleObj` instead.\");\n                        return annotation.titleObj.str;\n                      }\n\n                    });\n                  }\n\n                  if (annotation.contentsObj !== undefined) {\n                    Object.defineProperty(annotation, \"contents\", {\n                      get() {\n                        (0, _display_utils.deprecated)(\"`contents`-property on annotation, please use `contentsObj` instead.\");\n                        return annotation.contentsObj.str;\n                      }\n\n                    });\n                  }\n                }\n\n                return annotations;\n              });\n            }\n\n            return promise;\n          }\n\n          getJSActions() {\n            return this._jsActionsPromise ||= this._transport.getPageJSActions(this._pageIndex);\n          }\n\n          async getXfa() {\n            return this._transport._htmlForXfa?.children[this._pageIndex] || null;\n          }\n\n          render(_ref8) {\n            let {\n              canvasContext,\n              viewport,\n              intent = \"display\",\n              annotationMode = _util.AnnotationMode.ENABLE,\n              transform = null,\n              imageLayer = null,\n              canvasFactory = null,\n              background = null,\n              optionalContentConfigPromise = null,\n              annotationCanvasMap = null\n            } = _ref8;\n\n            if (arguments[0]?.renderInteractiveForms !== undefined) {\n              (0, _display_utils.deprecated)(\"render no longer accepts the `renderInteractiveForms`-option, \" + \"please use the `annotationMode`-option instead.\");\n\n              if (arguments[0].renderInteractiveForms === true && annotationMode === _util.AnnotationMode.ENABLE) {\n                annotationMode = _util.AnnotationMode.ENABLE_FORMS;\n              }\n            }\n\n            if (arguments[0]?.includeAnnotationStorage !== undefined) {\n              (0, _display_utils.deprecated)(\"render no longer accepts the `includeAnnotationStorage`-option, \" + \"please use the `annotationMode`-option instead.\");\n\n              if (arguments[0].includeAnnotationStorage === true && annotationMode === _util.AnnotationMode.ENABLE) {\n                annotationMode = _util.AnnotationMode.ENABLE_STORAGE;\n              }\n            }\n\n            if (this._stats) {\n              this._stats.time(\"Overall\");\n            }\n\n            const intentArgs = this._transport.getRenderingIntent(intent, annotationMode);\n\n            this.pendingCleanup = false;\n\n            if (!optionalContentConfigPromise) {\n              optionalContentConfigPromise = this._transport.getOptionalContentConfig();\n            }\n\n            let intentState = this._intentStates.get(intentArgs.cacheKey);\n\n            if (!intentState) {\n              intentState = Object.create(null);\n\n              this._intentStates.set(intentArgs.cacheKey, intentState);\n            }\n\n            if (intentState.streamReaderCancelTimeout) {\n              clearTimeout(intentState.streamReaderCancelTimeout);\n              intentState.streamReaderCancelTimeout = null;\n            }\n\n            const canvasFactoryInstance = canvasFactory || new DefaultCanvasFactory({\n              ownerDocument: this._ownerDocument\n            });\n            const intentPrint = !!(intentArgs.renderingIntent & _util.RenderingIntentFlag.PRINT);\n\n            if (!intentState.displayReadyCapability) {\n              intentState.displayReadyCapability = (0, _util.createPromiseCapability)();\n              intentState.operatorList = {\n                fnArray: [],\n                argsArray: [],\n                lastChunk: false\n              };\n\n              if (this._stats) {\n                this._stats.time(\"Page Request\");\n              }\n\n              this._pumpOperatorList(intentArgs);\n            }\n\n            const complete = error => {\n              intentState.renderTasks.delete(internalRenderTask);\n\n              if (this.cleanupAfterRender || intentPrint) {\n                this.pendingCleanup = true;\n              }\n\n              this._tryCleanup();\n\n              if (error) {\n                internalRenderTask.capability.reject(error);\n\n                this._abortOperatorList({\n                  intentState,\n                  reason: error instanceof Error ? error : new Error(error)\n                });\n              } else {\n                internalRenderTask.capability.resolve();\n              }\n\n              if (this._stats) {\n                this._stats.timeEnd(\"Rendering\");\n\n                this._stats.timeEnd(\"Overall\");\n              }\n            };\n\n            const internalRenderTask = new InternalRenderTask({\n              callback: complete,\n              params: {\n                canvasContext,\n                viewport,\n                transform,\n                imageLayer,\n                background\n              },\n              objs: this.objs,\n              commonObjs: this.commonObjs,\n              annotationCanvasMap,\n              operatorList: intentState.operatorList,\n              pageIndex: this._pageIndex,\n              canvasFactory: canvasFactoryInstance,\n              useRequestAnimationFrame: !intentPrint,\n              pdfBug: this._pdfBug\n            });\n            (intentState.renderTasks ||= new Set()).add(internalRenderTask);\n            const renderTask = internalRenderTask.task;\n            Promise.all([intentState.displayReadyCapability.promise, optionalContentConfigPromise]).then(_ref9 => {\n              let [transparency, optionalContentConfig] = _ref9;\n\n              if (this.pendingCleanup) {\n                complete();\n                return;\n              }\n\n              if (this._stats) {\n                this._stats.time(\"Rendering\");\n              }\n\n              internalRenderTask.initializeGraphics({\n                transparency,\n                optionalContentConfig\n              });\n              internalRenderTask.operatorListChanged();\n            }).catch(complete);\n            return renderTask;\n          }\n\n          getOperatorList() {\n            let {\n              intent = \"display\",\n              annotationMode = _util.AnnotationMode.ENABLE\n            } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n            function operatorListChanged() {\n              if (intentState.operatorList.lastChunk) {\n                intentState.opListReadCapability.resolve(intentState.operatorList);\n                intentState.renderTasks.delete(opListTask);\n              }\n            }\n\n            const intentArgs = this._transport.getRenderingIntent(intent, annotationMode, true);\n\n            let intentState = this._intentStates.get(intentArgs.cacheKey);\n\n            if (!intentState) {\n              intentState = Object.create(null);\n\n              this._intentStates.set(intentArgs.cacheKey, intentState);\n            }\n\n            let opListTask;\n\n            if (!intentState.opListReadCapability) {\n              opListTask = Object.create(null);\n              opListTask.operatorListChanged = operatorListChanged;\n              intentState.opListReadCapability = (0, _util.createPromiseCapability)();\n              (intentState.renderTasks ||= new Set()).add(opListTask);\n              intentState.operatorList = {\n                fnArray: [],\n                argsArray: [],\n                lastChunk: false\n              };\n\n              if (this._stats) {\n                this._stats.time(\"Page Request\");\n              }\n\n              this._pumpOperatorList(intentArgs);\n            }\n\n            return intentState.opListReadCapability.promise;\n          }\n\n          streamTextContent() {\n            let {\n              normalizeWhitespace = false,\n              disableCombineTextItems = false,\n              includeMarkedContent = false\n            } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n            const TEXT_CONTENT_CHUNK_SIZE = 100;\n            return this._transport.messageHandler.sendWithStream(\"GetTextContent\", {\n              pageIndex: this._pageIndex,\n              normalizeWhitespace: normalizeWhitespace === true,\n              combineTextItems: disableCombineTextItems !== true,\n              includeMarkedContent: includeMarkedContent === true\n            }, {\n              highWaterMark: TEXT_CONTENT_CHUNK_SIZE,\n\n              size(textContent) {\n                return textContent.items.length;\n              }\n\n            });\n          }\n\n          getTextContent() {\n            let params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n            if (this._transport._htmlForXfa) {\n              return this.getXfa().then(xfa => {\n                return _xfa_text.XfaText.textContent(xfa);\n              });\n            }\n\n            const readableStream = this.streamTextContent(params);\n            return new Promise(function (resolve, reject) {\n              function pump() {\n                reader.read().then(function (_ref10) {\n                  let {\n                    value,\n                    done\n                  } = _ref10;\n\n                  if (done) {\n                    resolve(textContent);\n                    return;\n                  }\n\n                  Object.assign(textContent.styles, value.styles);\n                  textContent.items.push(...value.items);\n                  pump();\n                }, reject);\n              }\n\n              const reader = readableStream.getReader();\n              const textContent = {\n                items: [],\n                styles: Object.create(null)\n              };\n              pump();\n            });\n          }\n\n          getStructTree() {\n            return this._structTreePromise ||= this._transport.getStructTree(this._pageIndex);\n          }\n\n          _destroy() {\n            this.destroyed = true;\n            const waitOn = [];\n\n            for (const intentState of this._intentStates.values()) {\n              this._abortOperatorList({\n                intentState,\n                reason: new Error(\"Page was destroyed.\"),\n                force: true\n              });\n\n              if (intentState.opListReadCapability) {\n                continue;\n              }\n\n              for (const internalRenderTask of intentState.renderTasks) {\n                waitOn.push(internalRenderTask.completed);\n                internalRenderTask.cancel();\n              }\n            }\n\n            this.objs.clear();\n\n            this._annotationPromises.clear();\n\n            this._jsActionsPromise = null;\n            this._structTreePromise = null;\n            this.pendingCleanup = false;\n            return Promise.all(waitOn);\n          }\n\n          cleanup() {\n            let resetStats = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n            this.pendingCleanup = true;\n            return this._tryCleanup(resetStats);\n          }\n\n          _tryCleanup() {\n            let resetStats = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n            if (!this.pendingCleanup) {\n              return false;\n            }\n\n            for (const {\n              renderTasks,\n              operatorList\n            } of this._intentStates.values()) {\n              if (renderTasks.size > 0 || !operatorList.lastChunk) {\n                return false;\n              }\n            }\n\n            this._intentStates.clear();\n\n            this.objs.clear();\n\n            this._annotationPromises.clear();\n\n            this._jsActionsPromise = null;\n            this._structTreePromise = null;\n\n            if (resetStats && this._stats) {\n              this._stats = new _display_utils.StatTimer();\n            }\n\n            this.pendingCleanup = false;\n            return true;\n          }\n\n          _startRenderPage(transparency, cacheKey) {\n            const intentState = this._intentStates.get(cacheKey);\n\n            if (!intentState) {\n              return;\n            }\n\n            if (this._stats) {\n              this._stats.timeEnd(\"Page Request\");\n            }\n\n            if (intentState.displayReadyCapability) {\n              intentState.displayReadyCapability.resolve(transparency);\n            }\n          }\n\n          _renderPageChunk(operatorListChunk, intentState) {\n            for (let i = 0, ii = operatorListChunk.length; i < ii; i++) {\n              intentState.operatorList.fnArray.push(operatorListChunk.fnArray[i]);\n              intentState.operatorList.argsArray.push(operatorListChunk.argsArray[i]);\n            }\n\n            intentState.operatorList.lastChunk = operatorListChunk.lastChunk;\n\n            for (const internalRenderTask of intentState.renderTasks) {\n              internalRenderTask.operatorListChanged();\n            }\n\n            if (operatorListChunk.lastChunk) {\n              this._tryCleanup();\n            }\n          }\n\n          _pumpOperatorList(_ref11) {\n            let {\n              renderingIntent,\n              cacheKey\n            } = _ref11;\n\n            const readableStream = this._transport.messageHandler.sendWithStream(\"GetOperatorList\", {\n              pageIndex: this._pageIndex,\n              intent: renderingIntent,\n              cacheKey,\n              annotationStorage: renderingIntent & _util.RenderingIntentFlag.ANNOTATIONS_STORAGE ? this._transport.annotationStorage.serializable : null\n            });\n\n            const reader = readableStream.getReader();\n\n            const intentState = this._intentStates.get(cacheKey);\n\n            intentState.streamReader = reader;\n\n            const pump = () => {\n              reader.read().then(_ref12 => {\n                let {\n                  value,\n                  done\n                } = _ref12;\n\n                if (done) {\n                  intentState.streamReader = null;\n                  return;\n                }\n\n                if (this._transport.destroyed) {\n                  return;\n                }\n\n                this._renderPageChunk(value, intentState);\n\n                pump();\n              }, reason => {\n                intentState.streamReader = null;\n\n                if (this._transport.destroyed) {\n                  return;\n                }\n\n                if (intentState.operatorList) {\n                  intentState.operatorList.lastChunk = true;\n\n                  for (const internalRenderTask of intentState.renderTasks) {\n                    internalRenderTask.operatorListChanged();\n                  }\n\n                  this._tryCleanup();\n                }\n\n                if (intentState.displayReadyCapability) {\n                  intentState.displayReadyCapability.reject(reason);\n                } else if (intentState.opListReadCapability) {\n                  intentState.opListReadCapability.reject(reason);\n                } else {\n                  throw reason;\n                }\n              });\n            };\n\n            pump();\n          }\n\n          _abortOperatorList(_ref13) {\n            let {\n              intentState,\n              reason,\n              force = false\n            } = _ref13;\n\n            if (!intentState.streamReader) {\n              return;\n            }\n\n            if (!force) {\n              if (intentState.renderTasks.size > 0) {\n                return;\n              }\n\n              if (reason instanceof _display_utils.RenderingCancelledException) {\n                intentState.streamReaderCancelTimeout = setTimeout(() => {\n                  this._abortOperatorList({\n                    intentState,\n                    reason,\n                    force: true\n                  });\n\n                  intentState.streamReaderCancelTimeout = null;\n                }, RENDERING_CANCELLED_TIMEOUT);\n                return;\n              }\n            }\n\n            intentState.streamReader.cancel(new _util.AbortException(reason.message)).catch(() => {});\n            intentState.streamReader = null;\n\n            if (this._transport.destroyed) {\n              return;\n            }\n\n            for (const [curCacheKey, curIntentState] of this._intentStates) {\n              if (curIntentState === intentState) {\n                this._intentStates.delete(curCacheKey);\n\n                break;\n              }\n            }\n\n            this.cleanup();\n          }\n\n          get stats() {\n            return this._stats;\n          }\n\n        }\n\n        exports.PDFPageProxy = PDFPageProxy;\n\n        class LoopbackPort {\n          constructor() {\n            this._listeners = [];\n            this._deferred = Promise.resolve();\n          }\n\n          postMessage(obj, transfers) {\n            function cloneValue(object) {\n              if (globalThis.structuredClone) {\n                return globalThis.structuredClone(object, transfers);\n              }\n\n              function fallbackCloneValue(value) {\n                if (typeof value === \"function\" || typeof value === \"symbol\" || value instanceof URL) {\n                  throw new Error(`LoopbackPort.postMessage - cannot clone: ${value?.toString()}`);\n                }\n\n                if (typeof value !== \"object\" || value === null) {\n                  return value;\n                }\n\n                if (cloned.has(value)) {\n                  return cloned.get(value);\n                }\n\n                let buffer, result;\n\n                if ((buffer = value.buffer) && (0, _util.isArrayBuffer)(buffer)) {\n                  if (transfers?.includes(buffer)) {\n                    result = new value.constructor(buffer, value.byteOffset, value.byteLength);\n                  } else {\n                    result = new value.constructor(value);\n                  }\n\n                  cloned.set(value, result);\n                  return result;\n                }\n\n                if (value instanceof Map) {\n                  result = new Map();\n                  cloned.set(value, result);\n\n                  for (const [key, val] of value) {\n                    result.set(key, fallbackCloneValue(val));\n                  }\n\n                  return result;\n                }\n\n                if (value instanceof Set) {\n                  result = new Set();\n                  cloned.set(value, result);\n\n                  for (const val of value) {\n                    result.add(fallbackCloneValue(val));\n                  }\n\n                  return result;\n                }\n\n                result = Array.isArray(value) ? [] : Object.create(null);\n                cloned.set(value, result);\n\n                for (const i in value) {\n                  let desc,\n                      p = value;\n\n                  while (!(desc = Object.getOwnPropertyDescriptor(p, i))) {\n                    p = Object.getPrototypeOf(p);\n                  }\n\n                  if (typeof desc.value === \"undefined\") {\n                    continue;\n                  }\n\n                  if (typeof desc.value === \"function\" && !value.hasOwnProperty?.(i)) {\n                    continue;\n                  }\n\n                  result[i] = fallbackCloneValue(desc.value);\n                }\n\n                return result;\n              }\n\n              const cloned = new WeakMap();\n              return fallbackCloneValue(object);\n            }\n\n            const event = {\n              data: cloneValue(obj)\n            };\n\n            this._deferred.then(() => {\n              for (const listener of this._listeners) {\n                listener.call(this, event);\n              }\n            });\n          }\n\n          addEventListener(name, listener) {\n            this._listeners.push(listener);\n          }\n\n          removeEventListener(name, listener) {\n            const i = this._listeners.indexOf(listener);\n\n            this._listeners.splice(i, 1);\n          }\n\n          terminate() {\n            this._listeners.length = 0;\n          }\n\n        }\n\n        exports.LoopbackPort = LoopbackPort;\n        const PDFWorkerUtil = {\n          isWorkerDisabled: false,\n          fallbackWorkerSrc: null,\n          fakeWorkerId: 0\n        };\n        {\n          if (_is_node.isNodeJS && typeof require === \"function\") {\n            PDFWorkerUtil.isWorkerDisabled = true;\n            PDFWorkerUtil.fallbackWorkerSrc = \"./pdf.worker.js\";\n          } else if (typeof document === \"object\") {\n            const pdfjsFilePath = document?.currentScript?.src;\n\n            if (pdfjsFilePath) {\n              PDFWorkerUtil.fallbackWorkerSrc = pdfjsFilePath.replace(/(\\.(?:min\\.)?js)(\\?.*)?$/i, \".worker$1$2\");\n            }\n          }\n\n          PDFWorkerUtil.createCDNWrapper = function (url) {\n            const wrapper = `importScripts(\"${url}\");`;\n            return URL.createObjectURL(new Blob([wrapper]));\n          };\n        }\n\n        class PDFWorker {\n          static get _workerPorts() {\n            return (0, _util.shadow)(this, \"_workerPorts\", new WeakMap());\n          }\n\n          constructor() {\n            let {\n              name = null,\n              port = null,\n              verbosity = (0, _util.getVerbosityLevel)()\n            } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n            if (port && PDFWorker._workerPorts.has(port)) {\n              throw new Error(\"Cannot use more than one PDFWorker per port.\");\n            }\n\n            this.name = name;\n            this.destroyed = false;\n            this.verbosity = verbosity;\n            this._readyCapability = (0, _util.createPromiseCapability)();\n            this._port = null;\n            this._webWorker = null;\n            this._messageHandler = null;\n\n            if (port) {\n              PDFWorker._workerPorts.set(port, this);\n\n              this._initializeFromPort(port);\n\n              return;\n            }\n\n            this._initialize();\n          }\n\n          get promise() {\n            return this._readyCapability.promise;\n          }\n\n          get port() {\n            return this._port;\n          }\n\n          get messageHandler() {\n            return this._messageHandler;\n          }\n\n          _initializeFromPort(port) {\n            this._port = port;\n            this._messageHandler = new _message_handler.MessageHandler(\"main\", \"worker\", port);\n\n            this._messageHandler.on(\"ready\", function () {});\n\n            this._readyCapability.resolve();\n          }\n\n          _initialize() {\n            if (typeof Worker !== \"undefined\" && !PDFWorkerUtil.isWorkerDisabled && !PDFWorker._mainThreadWorkerMessageHandler) {\n              let workerSrc = PDFWorker.workerSrc;\n\n              try {\n                if (!(0, _util.isSameOrigin)(window.location.href, workerSrc)) {\n                  workerSrc = PDFWorkerUtil.createCDNWrapper(new URL(workerSrc, window.location).href);\n                }\n\n                const worker = new Worker(workerSrc);\n                const messageHandler = new _message_handler.MessageHandler(\"main\", \"worker\", worker);\n\n                const terminateEarly = () => {\n                  worker.removeEventListener(\"error\", onWorkerError);\n                  messageHandler.destroy();\n                  worker.terminate();\n\n                  if (this.destroyed) {\n                    this._readyCapability.reject(new Error(\"Worker was destroyed\"));\n                  } else {\n                    this._setupFakeWorker();\n                  }\n                };\n\n                const onWorkerError = () => {\n                  if (!this._webWorker) {\n                    terminateEarly();\n                  }\n                };\n\n                worker.addEventListener(\"error\", onWorkerError);\n                messageHandler.on(\"test\", data => {\n                  worker.removeEventListener(\"error\", onWorkerError);\n\n                  if (this.destroyed) {\n                    terminateEarly();\n                    return;\n                  }\n\n                  if (data) {\n                    this._messageHandler = messageHandler;\n                    this._port = worker;\n                    this._webWorker = worker;\n\n                    this._readyCapability.resolve();\n\n                    messageHandler.send(\"configure\", {\n                      verbosity: this.verbosity\n                    });\n                  } else {\n                    this._setupFakeWorker();\n\n                    messageHandler.destroy();\n                    worker.terminate();\n                  }\n                });\n                messageHandler.on(\"ready\", data => {\n                  worker.removeEventListener(\"error\", onWorkerError);\n\n                  if (this.destroyed) {\n                    terminateEarly();\n                    return;\n                  }\n\n                  try {\n                    sendTest();\n                  } catch (e) {\n                    this._setupFakeWorker();\n                  }\n                });\n\n                const sendTest = () => {\n                  const testObj = new Uint8Array([255]);\n\n                  try {\n                    messageHandler.send(\"test\", testObj, [testObj.buffer]);\n                  } catch (ex) {\n                    (0, _util.warn)(\"Cannot use postMessage transfers.\");\n                    testObj[0] = 0;\n                    messageHandler.send(\"test\", testObj);\n                  }\n                };\n\n                sendTest();\n                return;\n              } catch (e) {\n                (0, _util.info)(\"The worker has been disabled.\");\n              }\n            }\n\n            this._setupFakeWorker();\n          }\n\n          _setupFakeWorker() {\n            if (!PDFWorkerUtil.isWorkerDisabled) {\n              (0, _util.warn)(\"Setting up fake worker.\");\n              PDFWorkerUtil.isWorkerDisabled = true;\n            }\n\n            PDFWorker._setupFakeWorkerGlobal.then(WorkerMessageHandler => {\n              if (this.destroyed) {\n                this._readyCapability.reject(new Error(\"Worker was destroyed\"));\n\n                return;\n              }\n\n              const port = new LoopbackPort();\n              this._port = port;\n              const id = `fake${PDFWorkerUtil.fakeWorkerId++}`;\n              const workerHandler = new _message_handler.MessageHandler(id + \"_worker\", id, port);\n              WorkerMessageHandler.setup(workerHandler, port);\n              const messageHandler = new _message_handler.MessageHandler(id, id + \"_worker\", port);\n              this._messageHandler = messageHandler;\n\n              this._readyCapability.resolve();\n\n              messageHandler.send(\"configure\", {\n                verbosity: this.verbosity\n              });\n            }).catch(reason => {\n              this._readyCapability.reject(new Error(`Setting up fake worker failed: \"${reason.message}\".`));\n            });\n          }\n\n          destroy() {\n            this.destroyed = true;\n\n            if (this._webWorker) {\n              this._webWorker.terminate();\n\n              this._webWorker = null;\n            }\n\n            PDFWorker._workerPorts.delete(this._port);\n\n            this._port = null;\n\n            if (this._messageHandler) {\n              this._messageHandler.destroy();\n\n              this._messageHandler = null;\n            }\n          }\n\n          static fromPort(params) {\n            if (!params?.port) {\n              throw new Error(\"PDFWorker.fromPort - invalid method signature.\");\n            }\n\n            if (this._workerPorts.has(params.port)) {\n              return this._workerPorts.get(params.port);\n            }\n\n            return new PDFWorker(params);\n          }\n\n          static get workerSrc() {\n            if (_worker_options.GlobalWorkerOptions.workerSrc) {\n              return _worker_options.GlobalWorkerOptions.workerSrc;\n            }\n\n            if (PDFWorkerUtil.fallbackWorkerSrc !== null) {\n              if (!_is_node.isNodeJS) {\n                (0, _display_utils.deprecated)('No \"GlobalWorkerOptions.workerSrc\" specified.');\n              }\n\n              return PDFWorkerUtil.fallbackWorkerSrc;\n            }\n\n            throw new Error('No \"GlobalWorkerOptions.workerSrc\" specified.');\n          }\n\n          static get _mainThreadWorkerMessageHandler() {\n            try {\n              return globalThis.pdfjsWorker?.WorkerMessageHandler || null;\n            } catch (ex) {\n              return null;\n            }\n          }\n\n          static get _setupFakeWorkerGlobal() {\n            const loader = async () => {\n              const mainWorkerMessageHandler = this._mainThreadWorkerMessageHandler;\n\n              if (mainWorkerMessageHandler) {\n                return mainWorkerMessageHandler;\n              }\n\n              if (_is_node.isNodeJS && typeof require === \"function\") {\n                const worker = eval(\"require\")(this.workerSrc);\n                return worker.WorkerMessageHandler;\n              }\n\n              await (0, _display_utils.loadScript)(this.workerSrc);\n              return window.pdfjsWorker.WorkerMessageHandler;\n            };\n\n            return (0, _util.shadow)(this, \"_setupFakeWorkerGlobal\", loader());\n          }\n\n        }\n\n        exports.PDFWorker = PDFWorker;\n        {\n          PDFWorker.getWorkerSrc = function () {\n            (0, _display_utils.deprecated)(\"`PDFWorker.getWorkerSrc()`, please use `PDFWorker.workerSrc` instead.\");\n            return this.workerSrc;\n          };\n        }\n\n        class WorkerTransport {\n          #docStats = null;\n          #pageCache = new Map();\n          #pagePromises = new Map();\n          #metadataPromise = null;\n\n          constructor(messageHandler, loadingTask, networkStream, params) {\n            this.messageHandler = messageHandler;\n            this.loadingTask = loadingTask;\n            this.commonObjs = new PDFObjects();\n            this.fontLoader = new _font_loader.FontLoader({\n              docId: loadingTask.docId,\n              onUnsupportedFeature: this._onUnsupportedFeature.bind(this),\n              ownerDocument: params.ownerDocument,\n              styleElement: params.styleElement\n            });\n            this._params = params;\n\n            if (!params.useWorkerFetch) {\n              this.CMapReaderFactory = new params.CMapReaderFactory({\n                baseUrl: params.cMapUrl,\n                isCompressed: params.cMapPacked\n              });\n              this.StandardFontDataFactory = new params.StandardFontDataFactory({\n                baseUrl: params.standardFontDataUrl\n              });\n            }\n\n            this.destroyed = false;\n            this.destroyCapability = null;\n            this._passwordCapability = null;\n            this._networkStream = networkStream;\n            this._fullReader = null;\n            this._lastProgress = null;\n            this.downloadInfoCapability = (0, _util.createPromiseCapability)();\n            this.setupMessageHandler();\n          }\n\n          get annotationStorage() {\n            return (0, _util.shadow)(this, \"annotationStorage\", new _annotation_storage.AnnotationStorage());\n          }\n\n          get stats() {\n            return this.#docStats;\n          }\n\n          getRenderingIntent(intent) {\n            let annotationMode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _util.AnnotationMode.ENABLE;\n            let isOpList = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n            let renderingIntent = _util.RenderingIntentFlag.DISPLAY;\n            let lastModified = \"\";\n\n            switch (intent) {\n              case \"any\":\n                renderingIntent = _util.RenderingIntentFlag.ANY;\n                break;\n\n              case \"display\":\n                break;\n\n              case \"print\":\n                renderingIntent = _util.RenderingIntentFlag.PRINT;\n                break;\n\n              default:\n                (0, _util.warn)(`getRenderingIntent - invalid intent: ${intent}`);\n            }\n\n            switch (annotationMode) {\n              case _util.AnnotationMode.DISABLE:\n                renderingIntent += _util.RenderingIntentFlag.ANNOTATIONS_DISABLE;\n                break;\n\n              case _util.AnnotationMode.ENABLE:\n                break;\n\n              case _util.AnnotationMode.ENABLE_FORMS:\n                renderingIntent += _util.RenderingIntentFlag.ANNOTATIONS_FORMS;\n                break;\n\n              case _util.AnnotationMode.ENABLE_STORAGE:\n                renderingIntent += _util.RenderingIntentFlag.ANNOTATIONS_STORAGE;\n                lastModified = this.annotationStorage.lastModified;\n                break;\n\n              default:\n                (0, _util.warn)(`getRenderingIntent - invalid annotationMode: ${annotationMode}`);\n            }\n\n            if (isOpList) {\n              renderingIntent += _util.RenderingIntentFlag.OPLIST;\n            }\n\n            return {\n              renderingIntent,\n              cacheKey: `${renderingIntent}_${lastModified}`\n            };\n          }\n\n          destroy() {\n            if (this.destroyCapability) {\n              return this.destroyCapability.promise;\n            }\n\n            this.destroyed = true;\n            this.destroyCapability = (0, _util.createPromiseCapability)();\n\n            if (this._passwordCapability) {\n              this._passwordCapability.reject(new Error(\"Worker was destroyed during onPassword callback\"));\n            }\n\n            const waitOn = [];\n\n            for (const page of this.#pageCache.values()) {\n              waitOn.push(page._destroy());\n            }\n\n            this.#pageCache.clear();\n            this.#pagePromises.clear();\n\n            if (this.hasOwnProperty(\"annotationStorage\")) {\n              this.annotationStorage.resetModified();\n            }\n\n            const terminated = this.messageHandler.sendWithPromise(\"Terminate\", null);\n            waitOn.push(terminated);\n            Promise.all(waitOn).then(() => {\n              this.commonObjs.clear();\n              this.fontLoader.clear();\n              this.#metadataPromise = null;\n              this._getFieldObjectsPromise = null;\n              this._hasJSActionsPromise = null;\n\n              if (this._networkStream) {\n                this._networkStream.cancelAllRequests(new _util.AbortException(\"Worker was terminated.\"));\n              }\n\n              if (this.messageHandler) {\n                this.messageHandler.destroy();\n                this.messageHandler = null;\n              }\n\n              this.destroyCapability.resolve();\n            }, this.destroyCapability.reject);\n            return this.destroyCapability.promise;\n          }\n\n          setupMessageHandler() {\n            const {\n              messageHandler,\n              loadingTask\n            } = this;\n            messageHandler.on(\"GetReader\", (data, sink) => {\n              (0, _util.assert)(this._networkStream, \"GetReader - no `IPDFStream` instance available.\");\n              this._fullReader = this._networkStream.getFullReader();\n\n              this._fullReader.onProgress = evt => {\n                this._lastProgress = {\n                  loaded: evt.loaded,\n                  total: evt.total\n                };\n              };\n\n              sink.onPull = () => {\n                this._fullReader.read().then(function (_ref14) {\n                  let {\n                    value,\n                    done\n                  } = _ref14;\n\n                  if (done) {\n                    sink.close();\n                    return;\n                  }\n\n                  (0, _util.assert)((0, _util.isArrayBuffer)(value), \"GetReader - expected an ArrayBuffer.\");\n                  sink.enqueue(new Uint8Array(value), 1, [value]);\n                }).catch(reason => {\n                  sink.error(reason);\n                });\n              };\n\n              sink.onCancel = reason => {\n                this._fullReader.cancel(reason);\n\n                sink.ready.catch(readyReason => {\n                  if (this.destroyed) {\n                    return;\n                  }\n\n                  throw readyReason;\n                });\n              };\n            });\n            messageHandler.on(\"ReaderHeadersReady\", data => {\n              const headersCapability = (0, _util.createPromiseCapability)();\n              const fullReader = this._fullReader;\n              fullReader.headersReady.then(() => {\n                if (!fullReader.isStreamingSupported || !fullReader.isRangeSupported) {\n                  if (this._lastProgress) {\n                    loadingTask.onProgress?.(this._lastProgress);\n                  }\n\n                  fullReader.onProgress = evt => {\n                    loadingTask.onProgress?.({\n                      loaded: evt.loaded,\n                      total: evt.total\n                    });\n                  };\n                }\n\n                headersCapability.resolve({\n                  isStreamingSupported: fullReader.isStreamingSupported,\n                  isRangeSupported: fullReader.isRangeSupported,\n                  contentLength: fullReader.contentLength\n                });\n              }, headersCapability.reject);\n              return headersCapability.promise;\n            });\n            messageHandler.on(\"GetRangeReader\", (data, sink) => {\n              (0, _util.assert)(this._networkStream, \"GetRangeReader - no `IPDFStream` instance available.\");\n\n              const rangeReader = this._networkStream.getRangeReader(data.begin, data.end);\n\n              if (!rangeReader) {\n                sink.close();\n                return;\n              }\n\n              sink.onPull = () => {\n                rangeReader.read().then(function (_ref15) {\n                  let {\n                    value,\n                    done\n                  } = _ref15;\n\n                  if (done) {\n                    sink.close();\n                    return;\n                  }\n\n                  (0, _util.assert)((0, _util.isArrayBuffer)(value), \"GetRangeReader - expected an ArrayBuffer.\");\n                  sink.enqueue(new Uint8Array(value), 1, [value]);\n                }).catch(reason => {\n                  sink.error(reason);\n                });\n              };\n\n              sink.onCancel = reason => {\n                rangeReader.cancel(reason);\n                sink.ready.catch(readyReason => {\n                  if (this.destroyed) {\n                    return;\n                  }\n\n                  throw readyReason;\n                });\n              };\n            });\n            messageHandler.on(\"GetDoc\", _ref16 => {\n              let {\n                pdfInfo\n              } = _ref16;\n              this._numPages = pdfInfo.numPages;\n              this._htmlForXfa = pdfInfo.htmlForXfa;\n              delete pdfInfo.htmlForXfa;\n\n              loadingTask._capability.resolve(new PDFDocumentProxy(pdfInfo, this));\n            });\n            messageHandler.on(\"DocException\", function (ex) {\n              let reason;\n\n              switch (ex.name) {\n                case \"PasswordException\":\n                  reason = new _util.PasswordException(ex.message, ex.code);\n                  break;\n\n                case \"InvalidPDFException\":\n                  reason = new _util.InvalidPDFException(ex.message);\n                  break;\n\n                case \"MissingPDFException\":\n                  reason = new _util.MissingPDFException(ex.message);\n                  break;\n\n                case \"UnexpectedResponseException\":\n                  reason = new _util.UnexpectedResponseException(ex.message, ex.status);\n                  break;\n\n                case \"UnknownErrorException\":\n                  reason = new _util.UnknownErrorException(ex.message, ex.details);\n                  break;\n\n                default:\n                  (0, _util.unreachable)(\"DocException - expected a valid Error.\");\n              }\n\n              loadingTask._capability.reject(reason);\n            });\n            messageHandler.on(\"PasswordRequest\", exception => {\n              this._passwordCapability = (0, _util.createPromiseCapability)();\n\n              if (loadingTask.onPassword) {\n                const updatePassword = password => {\n                  this._passwordCapability.resolve({\n                    password\n                  });\n                };\n\n                try {\n                  loadingTask.onPassword(updatePassword, exception.code);\n                } catch (ex) {\n                  this._passwordCapability.reject(ex);\n                }\n              } else {\n                this._passwordCapability.reject(new _util.PasswordException(exception.message, exception.code));\n              }\n\n              return this._passwordCapability.promise;\n            });\n            messageHandler.on(\"DataLoaded\", data => {\n              loadingTask.onProgress?.({\n                loaded: data.length,\n                total: data.length\n              });\n              this.downloadInfoCapability.resolve(data);\n            });\n            messageHandler.on(\"StartRenderPage\", data => {\n              if (this.destroyed) {\n                return;\n              }\n\n              const page = this.#pageCache.get(data.pageIndex);\n\n              page._startRenderPage(data.transparency, data.cacheKey);\n            });\n            messageHandler.on(\"commonobj\", _ref17 => {\n              let [id, type, exportedData] = _ref17;\n\n              if (this.destroyed) {\n                return;\n              }\n\n              if (this.commonObjs.has(id)) {\n                return;\n              }\n\n              switch (type) {\n                case \"Font\":\n                  const params = this._params;\n\n                  if (\"error\" in exportedData) {\n                    const exportedError = exportedData.error;\n                    (0, _util.warn)(`Error during font loading: ${exportedError}`);\n                    this.commonObjs.resolve(id, exportedError);\n                    break;\n                  }\n\n                  let fontRegistry = null;\n\n                  if (params.pdfBug && globalThis.FontInspector?.enabled) {\n                    fontRegistry = {\n                      registerFont(font, url) {\n                        globalThis.FontInspector.fontAdded(font, url);\n                      }\n\n                    };\n                  }\n\n                  const font = new _font_loader.FontFaceObject(exportedData, {\n                    isEvalSupported: params.isEvalSupported,\n                    disableFontFace: params.disableFontFace,\n                    ignoreErrors: params.ignoreErrors,\n                    onUnsupportedFeature: this._onUnsupportedFeature.bind(this),\n                    fontRegistry\n                  });\n                  this.fontLoader.bind(font).catch(reason => {\n                    return messageHandler.sendWithPromise(\"FontFallback\", {\n                      id\n                    });\n                  }).finally(() => {\n                    if (!params.fontExtraProperties && font.data) {\n                      font.data = null;\n                    }\n\n                    this.commonObjs.resolve(id, font);\n                  });\n                  break;\n\n                case \"FontPath\":\n                case \"Image\":\n                  this.commonObjs.resolve(id, exportedData);\n                  break;\n\n                default:\n                  throw new Error(`Got unknown common object type ${type}`);\n              }\n            });\n            messageHandler.on(\"obj\", _ref18 => {\n              let [id, pageIndex, type, imageData] = _ref18;\n\n              if (this.destroyed) {\n                return;\n              }\n\n              const pageProxy = this.#pageCache.get(pageIndex);\n\n              if (pageProxy.objs.has(id)) {\n                return;\n              }\n\n              switch (type) {\n                case \"Image\":\n                  pageProxy.objs.resolve(id, imageData);\n                  const MAX_IMAGE_SIZE_TO_STORE = 8000000;\n\n                  if (imageData?.data?.length > MAX_IMAGE_SIZE_TO_STORE) {\n                    pageProxy.cleanupAfterRender = true;\n                  }\n\n                  break;\n\n                case \"Pattern\":\n                  pageProxy.objs.resolve(id, imageData);\n                  break;\n\n                default:\n                  throw new Error(`Got unknown object type ${type}`);\n              }\n            });\n            messageHandler.on(\"DocProgress\", data => {\n              if (this.destroyed) {\n                return;\n              }\n\n              loadingTask.onProgress?.({\n                loaded: data.loaded,\n                total: data.total\n              });\n            });\n            messageHandler.on(\"DocStats\", data => {\n              if (this.destroyed) {\n                return;\n              }\n\n              this.#docStats = Object.freeze({\n                streamTypes: Object.freeze(data.streamTypes),\n                fontTypes: Object.freeze(data.fontTypes)\n              });\n            });\n            messageHandler.on(\"UnsupportedFeature\", this._onUnsupportedFeature.bind(this));\n            messageHandler.on(\"FetchBuiltInCMap\", data => {\n              if (this.destroyed) {\n                return Promise.reject(new Error(\"Worker was destroyed.\"));\n              }\n\n              if (!this.CMapReaderFactory) {\n                return Promise.reject(new Error(\"CMapReaderFactory not initialized, see the `useWorkerFetch` parameter.\"));\n              }\n\n              return this.CMapReaderFactory.fetch(data);\n            });\n            messageHandler.on(\"FetchStandardFontData\", data => {\n              if (this.destroyed) {\n                return Promise.reject(new Error(\"Worker was destroyed.\"));\n              }\n\n              if (!this.StandardFontDataFactory) {\n                return Promise.reject(new Error(\"StandardFontDataFactory not initialized, see the `useWorkerFetch` parameter.\"));\n              }\n\n              return this.StandardFontDataFactory.fetch(data);\n            });\n          }\n\n          _onUnsupportedFeature(_ref19) {\n            let {\n              featureId\n            } = _ref19;\n\n            if (this.destroyed) {\n              return;\n            }\n\n            this.loadingTask.onUnsupportedFeature?.(featureId);\n          }\n\n          getData() {\n            return this.messageHandler.sendWithPromise(\"GetData\", null);\n          }\n\n          getPage(pageNumber) {\n            if (!Number.isInteger(pageNumber) || pageNumber <= 0 || pageNumber > this._numPages) {\n              return Promise.reject(new Error(\"Invalid page request\"));\n            }\n\n            const pageIndex = pageNumber - 1,\n                  cachedPromise = this.#pagePromises.get(pageIndex);\n\n            if (cachedPromise) {\n              return cachedPromise;\n            }\n\n            const promise = this.messageHandler.sendWithPromise(\"GetPage\", {\n              pageIndex\n            }).then(pageInfo => {\n              if (this.destroyed) {\n                throw new Error(\"Transport destroyed\");\n              }\n\n              const page = new PDFPageProxy(pageIndex, pageInfo, this, this._params.ownerDocument, this._params.pdfBug);\n              this.#pageCache.set(pageIndex, page);\n              return page;\n            });\n            this.#pagePromises.set(pageIndex, promise);\n            return promise;\n          }\n\n          getPageIndex(ref) {\n            return this.messageHandler.sendWithPromise(\"GetPageIndex\", {\n              ref\n            });\n          }\n\n          getAnnotations(pageIndex, intent) {\n            return this.messageHandler.sendWithPromise(\"GetAnnotations\", {\n              pageIndex,\n              intent\n            });\n          }\n\n          saveDocument() {\n            return this.messageHandler.sendWithPromise(\"SaveDocument\", {\n              isPureXfa: !!this._htmlForXfa,\n              numPages: this._numPages,\n              annotationStorage: this.annotationStorage.serializable,\n              filename: this._fullReader?.filename ?? null\n            }).finally(() => {\n              this.annotationStorage.resetModified();\n            });\n          }\n\n          getFieldObjects() {\n            return this._getFieldObjectsPromise ||= this.messageHandler.sendWithPromise(\"GetFieldObjects\", null);\n          }\n\n          hasJSActions() {\n            return this._hasJSActionsPromise ||= this.messageHandler.sendWithPromise(\"HasJSActions\", null);\n          }\n\n          getCalculationOrderIds() {\n            return this.messageHandler.sendWithPromise(\"GetCalculationOrderIds\", null);\n          }\n\n          getDestinations() {\n            return this.messageHandler.sendWithPromise(\"GetDestinations\", null);\n          }\n\n          getDestination(id) {\n            if (typeof id !== \"string\") {\n              return Promise.reject(new Error(\"Invalid destination request.\"));\n            }\n\n            return this.messageHandler.sendWithPromise(\"GetDestination\", {\n              id\n            });\n          }\n\n          getPageLabels() {\n            return this.messageHandler.sendWithPromise(\"GetPageLabels\", null);\n          }\n\n          getPageLayout() {\n            return this.messageHandler.sendWithPromise(\"GetPageLayout\", null);\n          }\n\n          getPageMode() {\n            return this.messageHandler.sendWithPromise(\"GetPageMode\", null);\n          }\n\n          getViewerPreferences() {\n            return this.messageHandler.sendWithPromise(\"GetViewerPreferences\", null);\n          }\n\n          getOpenAction() {\n            return this.messageHandler.sendWithPromise(\"GetOpenAction\", null);\n          }\n\n          getAttachments() {\n            return this.messageHandler.sendWithPromise(\"GetAttachments\", null);\n          }\n\n          getJavaScript() {\n            return this.messageHandler.sendWithPromise(\"GetJavaScript\", null);\n          }\n\n          getDocJSActions() {\n            return this.messageHandler.sendWithPromise(\"GetDocJSActions\", null);\n          }\n\n          getPageJSActions(pageIndex) {\n            return this.messageHandler.sendWithPromise(\"GetPageJSActions\", {\n              pageIndex\n            });\n          }\n\n          getStructTree(pageIndex) {\n            return this.messageHandler.sendWithPromise(\"GetStructTree\", {\n              pageIndex\n            });\n          }\n\n          getOutline() {\n            return this.messageHandler.sendWithPromise(\"GetOutline\", null);\n          }\n\n          getOptionalContentConfig() {\n            return this.messageHandler.sendWithPromise(\"GetOptionalContentConfig\", null).then(results => {\n              return new _optional_content_config.OptionalContentConfig(results);\n            });\n          }\n\n          getPermissions() {\n            return this.messageHandler.sendWithPromise(\"GetPermissions\", null);\n          }\n\n          getMetadata() {\n            return this.#metadataPromise ||= this.messageHandler.sendWithPromise(\"GetMetadata\", null).then(results => {\n              return {\n                info: results[0],\n                metadata: results[1] ? new _metadata.Metadata(results[1]) : null,\n                contentDispositionFilename: this._fullReader?.filename ?? null,\n                contentLength: this._fullReader?.contentLength ?? null\n              };\n            });\n          }\n\n          getMarkInfo() {\n            return this.messageHandler.sendWithPromise(\"GetMarkInfo\", null);\n          }\n\n          async startCleanup() {\n            let keepLoadedFonts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n            await this.messageHandler.sendWithPromise(\"Cleanup\", null);\n\n            if (this.destroyed) {\n              return;\n            }\n\n            for (const page of this.#pageCache.values()) {\n              const cleanupSuccessful = page.cleanup();\n\n              if (!cleanupSuccessful) {\n                throw new Error(`startCleanup: Page ${page.pageNumber} is currently rendering.`);\n              }\n            }\n\n            this.commonObjs.clear();\n\n            if (!keepLoadedFonts) {\n              this.fontLoader.clear();\n            }\n\n            this.#metadataPromise = null;\n            this._getFieldObjectsPromise = null;\n            this._hasJSActionsPromise = null;\n          }\n\n          get loadingParams() {\n            const params = this._params;\n            return (0, _util.shadow)(this, \"loadingParams\", {\n              disableAutoFetch: params.disableAutoFetch,\n              enableXfa: params.enableXfa\n            });\n          }\n\n        }\n\n        class PDFObjects {\n          constructor() {\n            this._objs = Object.create(null);\n          }\n\n          _ensureObj(objId) {\n            if (this._objs[objId]) {\n              return this._objs[objId];\n            }\n\n            return this._objs[objId] = {\n              capability: (0, _util.createPromiseCapability)(),\n              data: null,\n              resolved: false\n            };\n          }\n\n          get(objId) {\n            let callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n            if (callback) {\n              this._ensureObj(objId).capability.promise.then(callback);\n\n              return null;\n            }\n\n            const obj = this._objs[objId];\n\n            if (!obj || !obj.resolved) {\n              throw new Error(`Requesting object that isn't resolved yet ${objId}.`);\n            }\n\n            return obj.data;\n          }\n\n          has(objId) {\n            const obj = this._objs[objId];\n            return obj?.resolved || false;\n          }\n\n          resolve(objId, data) {\n            const obj = this._ensureObj(objId);\n\n            obj.resolved = true;\n            obj.data = data;\n            obj.capability.resolve(data);\n          }\n\n          clear() {\n            this._objs = Object.create(null);\n          }\n\n        }\n\n        class RenderTask {\n          constructor(internalRenderTask) {\n            this._internalRenderTask = internalRenderTask;\n            this.onContinue = null;\n          }\n\n          get promise() {\n            return this._internalRenderTask.capability.promise;\n          }\n\n          cancel() {\n            this._internalRenderTask.cancel();\n          }\n\n        }\n\n        exports.RenderTask = RenderTask;\n\n        class InternalRenderTask {\n          static get canvasInUse() {\n            return (0, _util.shadow)(this, \"canvasInUse\", new WeakSet());\n          }\n\n          constructor(_ref20) {\n            let {\n              callback,\n              params,\n              objs,\n              commonObjs,\n              annotationCanvasMap,\n              operatorList,\n              pageIndex,\n              canvasFactory,\n              useRequestAnimationFrame = false,\n              pdfBug = false\n            } = _ref20;\n            this.callback = callback;\n            this.params = params;\n            this.objs = objs;\n            this.commonObjs = commonObjs;\n            this.annotationCanvasMap = annotationCanvasMap;\n            this.operatorListIdx = null;\n            this.operatorList = operatorList;\n            this._pageIndex = pageIndex;\n            this.canvasFactory = canvasFactory;\n            this._pdfBug = pdfBug;\n            this.running = false;\n            this.graphicsReadyCallback = null;\n            this.graphicsReady = false;\n            this._useRequestAnimationFrame = useRequestAnimationFrame === true && typeof window !== \"undefined\";\n            this.cancelled = false;\n            this.capability = (0, _util.createPromiseCapability)();\n            this.task = new RenderTask(this);\n            this._cancelBound = this.cancel.bind(this);\n            this._continueBound = this._continue.bind(this);\n            this._scheduleNextBound = this._scheduleNext.bind(this);\n            this._nextBound = this._next.bind(this);\n            this._canvas = params.canvasContext.canvas;\n          }\n\n          get completed() {\n            return this.capability.promise.catch(function () {});\n          }\n\n          initializeGraphics(_ref21) {\n            let {\n              transparency = false,\n              optionalContentConfig\n            } = _ref21;\n\n            if (this.cancelled) {\n              return;\n            }\n\n            if (this._canvas) {\n              if (InternalRenderTask.canvasInUse.has(this._canvas)) {\n                throw new Error(\"Cannot use the same canvas during multiple render() operations. \" + \"Use different canvas or ensure previous operations were \" + \"cancelled or completed.\");\n              }\n\n              InternalRenderTask.canvasInUse.add(this._canvas);\n            }\n\n            if (this._pdfBug && globalThis.StepperManager?.enabled) {\n              this.stepper = globalThis.StepperManager.create(this._pageIndex);\n              this.stepper.init(this.operatorList);\n              this.stepper.nextBreakPoint = this.stepper.getNextBreakPoint();\n            }\n\n            const {\n              canvasContext,\n              viewport,\n              transform,\n              imageLayer,\n              background\n            } = this.params;\n            this.gfx = new _canvas.CanvasGraphics(canvasContext, this.commonObjs, this.objs, this.canvasFactory, imageLayer, optionalContentConfig, this.annotationCanvasMap);\n            this.gfx.beginDrawing({\n              transform,\n              viewport,\n              transparency,\n              background\n            });\n            this.operatorListIdx = 0;\n            this.graphicsReady = true;\n\n            if (this.graphicsReadyCallback) {\n              this.graphicsReadyCallback();\n            }\n          }\n\n          cancel() {\n            let error = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n            this.running = false;\n            this.cancelled = true;\n\n            if (this.gfx) {\n              this.gfx.endDrawing();\n            }\n\n            if (this._canvas) {\n              InternalRenderTask.canvasInUse.delete(this._canvas);\n            }\n\n            this.callback(error || new _display_utils.RenderingCancelledException(`Rendering cancelled, page ${this._pageIndex + 1}`, \"canvas\"));\n          }\n\n          operatorListChanged() {\n            if (!this.graphicsReady) {\n              if (!this.graphicsReadyCallback) {\n                this.graphicsReadyCallback = this._continueBound;\n              }\n\n              return;\n            }\n\n            if (this.stepper) {\n              this.stepper.updateOperatorList(this.operatorList);\n            }\n\n            if (this.running) {\n              return;\n            }\n\n            this._continue();\n          }\n\n          _continue() {\n            this.running = true;\n\n            if (this.cancelled) {\n              return;\n            }\n\n            if (this.task.onContinue) {\n              this.task.onContinue(this._scheduleNextBound);\n            } else {\n              this._scheduleNext();\n            }\n          }\n\n          _scheduleNext() {\n            if (this._useRequestAnimationFrame) {\n              window.requestAnimationFrame(() => {\n                this._nextBound().catch(this._cancelBound);\n              });\n            } else {\n              Promise.resolve().then(this._nextBound).catch(this._cancelBound);\n            }\n          }\n\n          async _next() {\n            if (this.cancelled) {\n              return;\n            }\n\n            this.operatorListIdx = this.gfx.executeOperatorList(this.operatorList, this.operatorListIdx, this._continueBound, this.stepper);\n\n            if (this.operatorListIdx === this.operatorList.argsArray.length) {\n              this.running = false;\n\n              if (this.operatorList.lastChunk) {\n                this.gfx.endDrawing();\n\n                if (this._canvas) {\n                  InternalRenderTask.canvasInUse.delete(this._canvas);\n                }\n\n                this.callback();\n              }\n            }\n          }\n\n        }\n\n        const version = '2.12.313';\n        exports.version = version;\n        const build = 'a2ae56f39';\n        exports.build = build;\n        /***/\n      },\n      /* 7 */\n\n      /***/\n      (__unused_webpack_module, exports, __w_pdfjs_require__) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.FontLoader = exports.FontFaceObject = void 0;\n\n        var _util = __w_pdfjs_require__(2);\n\n        class BaseFontLoader {\n          constructor(_ref22) {\n            let {\n              docId,\n              onUnsupportedFeature,\n              ownerDocument = globalThis.document,\n              styleElement = null\n            } = _ref22;\n\n            if (this.constructor === BaseFontLoader) {\n              (0, _util.unreachable)(\"Cannot initialize BaseFontLoader.\");\n            }\n\n            this.docId = docId;\n            this._onUnsupportedFeature = onUnsupportedFeature;\n            this._document = ownerDocument;\n            this.nativeFontFaces = [];\n            this.styleElement = null;\n          }\n\n          addNativeFontFace(nativeFontFace) {\n            this.nativeFontFaces.push(nativeFontFace);\n\n            this._document.fonts.add(nativeFontFace);\n          }\n\n          insertRule(rule) {\n            let styleElement = this.styleElement;\n\n            if (!styleElement) {\n              styleElement = this.styleElement = this._document.createElement(\"style\");\n              styleElement.id = `PDFJS_FONT_STYLE_TAG_${this.docId}`;\n\n              this._document.documentElement.getElementsByTagName(\"head\")[0].appendChild(styleElement);\n            }\n\n            const styleSheet = styleElement.sheet;\n            styleSheet.insertRule(rule, styleSheet.cssRules.length);\n          }\n\n          clear() {\n            for (const nativeFontFace of this.nativeFontFaces) {\n              this._document.fonts.delete(nativeFontFace);\n            }\n\n            this.nativeFontFaces.length = 0;\n\n            if (this.styleElement) {\n              this.styleElement.remove();\n              this.styleElement = null;\n            }\n          }\n\n          async bind(font) {\n            if (font.attached || font.missingFile) {\n              return;\n            }\n\n            font.attached = true;\n\n            if (this.isFontLoadingAPISupported) {\n              const nativeFontFace = font.createNativeFontFace();\n\n              if (nativeFontFace) {\n                this.addNativeFontFace(nativeFontFace);\n\n                try {\n                  await nativeFontFace.loaded;\n                } catch (ex) {\n                  this._onUnsupportedFeature({\n                    featureId: _util.UNSUPPORTED_FEATURES.errorFontLoadNative\n                  });\n\n                  (0, _util.warn)(`Failed to load font '${nativeFontFace.family}': '${ex}'.`);\n                  font.disableFontFace = true;\n                  throw ex;\n                }\n              }\n\n              return;\n            }\n\n            const rule = font.createFontFaceRule();\n\n            if (rule) {\n              this.insertRule(rule);\n\n              if (this.isSyncFontLoadingSupported) {\n                return;\n              }\n\n              await new Promise(resolve => {\n                const request = this._queueLoadingCallback(resolve);\n\n                this._prepareFontLoadEvent([rule], [font], request);\n              });\n            }\n          }\n\n          _queueLoadingCallback(callback) {\n            (0, _util.unreachable)(\"Abstract method `_queueLoadingCallback`.\");\n          }\n\n          get isFontLoadingAPISupported() {\n            const hasFonts = !!this._document?.fonts;\n            return (0, _util.shadow)(this, \"isFontLoadingAPISupported\", hasFonts);\n          }\n\n          get isSyncFontLoadingSupported() {\n            (0, _util.unreachable)(\"Abstract method `isSyncFontLoadingSupported`.\");\n          }\n\n          get _loadTestFont() {\n            (0, _util.unreachable)(\"Abstract method `_loadTestFont`.\");\n          }\n\n          _prepareFontLoadEvent(rules, fontsToLoad, request) {\n            (0, _util.unreachable)(\"Abstract method `_prepareFontLoadEvent`.\");\n          }\n\n        }\n\n        let FontLoader;\n        exports.FontLoader = FontLoader;\n        {\n          exports.FontLoader = FontLoader = class GenericFontLoader extends BaseFontLoader {\n            constructor(params) {\n              super(params);\n              this.loadingContext = {\n                requests: [],\n                nextRequestId: 0\n              };\n              this.loadTestFontId = 0;\n            }\n\n            get isSyncFontLoadingSupported() {\n              let supported = false;\n\n              if (typeof navigator === \"undefined\") {\n                supported = true;\n              } else {\n                const m = /Mozilla\\/5.0.*?rv:(\\d+).*? Gecko/.exec(navigator.userAgent);\n\n                if (m?.[1] >= 14) {\n                  supported = true;\n                }\n              }\n\n              return (0, _util.shadow)(this, \"isSyncFontLoadingSupported\", supported);\n            }\n\n            _queueLoadingCallback(callback) {\n              function completeRequest() {\n                (0, _util.assert)(!request.done, \"completeRequest() cannot be called twice.\");\n                request.done = true;\n\n                while (context.requests.length > 0 && context.requests[0].done) {\n                  const otherRequest = context.requests.shift();\n                  setTimeout(otherRequest.callback, 0);\n                }\n              }\n\n              const context = this.loadingContext;\n              const request = {\n                id: `pdfjs-font-loading-${context.nextRequestId++}`,\n                done: false,\n                complete: completeRequest,\n                callback\n              };\n              context.requests.push(request);\n              return request;\n            }\n\n            get _loadTestFont() {\n              const getLoadTestFont = function () {\n                return atob(\"T1RUTwALAIAAAwAwQ0ZGIDHtZg4AAAOYAAAAgUZGVE1lkzZwAAAEHAAAABxHREVGABQA\" + \"FQAABDgAAAAeT1MvMlYNYwkAAAEgAAAAYGNtYXABDQLUAAACNAAAAUJoZWFk/xVFDQAA\" + \"ALwAAAA2aGhlYQdkA+oAAAD0AAAAJGhtdHgD6AAAAAAEWAAAAAZtYXhwAAJQAAAAARgA\" + \"AAAGbmFtZVjmdH4AAAGAAAAAsXBvc3T/hgAzAAADeAAAACAAAQAAAAEAALZRFsRfDzz1\" + \"AAsD6AAAAADOBOTLAAAAAM4KHDwAAAAAA+gDIQAAAAgAAgAAAAAAAAABAAADIQAAAFoD\" + \"6AAAAAAD6AABAAAAAAAAAAAAAAAAAAAAAQAAUAAAAgAAAAQD6AH0AAUAAAKKArwAAACM\" + \"AooCvAAAAeAAMQECAAACAAYJAAAAAAAAAAAAAQAAAAAAAAAAAAAAAFBmRWQAwAAuAC4D\" + \"IP84AFoDIQAAAAAAAQAAAAAAAAAAACAAIAABAAAADgCuAAEAAAAAAAAAAQAAAAEAAAAA\" + \"AAEAAQAAAAEAAAAAAAIAAQAAAAEAAAAAAAMAAQAAAAEAAAAAAAQAAQAAAAEAAAAAAAUA\" + \"AQAAAAEAAAAAAAYAAQAAAAMAAQQJAAAAAgABAAMAAQQJAAEAAgABAAMAAQQJAAIAAgAB\" + \"AAMAAQQJAAMAAgABAAMAAQQJAAQAAgABAAMAAQQJAAUAAgABAAMAAQQJAAYAAgABWABY\" + \"AAAAAAAAAwAAAAMAAAAcAAEAAAAAADwAAwABAAAAHAAEACAAAAAEAAQAAQAAAC7//wAA\" + \"AC7////TAAEAAAAAAAABBgAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" + \"AAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" + \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" + \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" + \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" + \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAD/gwAyAAAAAQAAAAAAAAAAAAAAAAAA\" + \"AAABAAQEAAEBAQJYAAEBASH4DwD4GwHEAvgcA/gXBIwMAYuL+nz5tQXkD5j3CBLnEQAC\" + \"AQEBIVhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYAAABAQAADwACAQEEE/t3\" + \"Dov6fAH6fAT+fPp8+nwHDosMCvm1Cvm1DAz6fBQAAAAAAAABAAAAAMmJbzEAAAAAzgTj\" + \"FQAAAADOBOQpAAEAAAAAAAAADAAUAAQAAAABAAAAAgABAAAAAAAAAAAD6AAAAAAAAA==\");\n              };\n\n              return (0, _util.shadow)(this, \"_loadTestFont\", getLoadTestFont());\n            }\n\n            _prepareFontLoadEvent(rules, fonts, request) {\n              function int32(data, offset) {\n                return data.charCodeAt(offset) << 24 | data.charCodeAt(offset + 1) << 16 | data.charCodeAt(offset + 2) << 8 | data.charCodeAt(offset + 3) & 0xff;\n              }\n\n              function spliceString(s, offset, remove, insert) {\n                const chunk1 = s.substring(0, offset);\n                const chunk2 = s.substring(offset + remove);\n                return chunk1 + insert + chunk2;\n              }\n\n              let i, ii;\n\n              const canvas = this._document.createElement(\"canvas\");\n\n              canvas.width = 1;\n              canvas.height = 1;\n              const ctx = canvas.getContext(\"2d\");\n              let called = 0;\n\n              function isFontReady(name, callback) {\n                called++;\n\n                if (called > 30) {\n                  (0, _util.warn)(\"Load test font never loaded.\");\n                  callback();\n                  return;\n                }\n\n                ctx.font = \"30px \" + name;\n                ctx.fillText(\".\", 0, 20);\n                const imageData = ctx.getImageData(0, 0, 1, 1);\n\n                if (imageData.data[3] > 0) {\n                  callback();\n                  return;\n                }\n\n                setTimeout(isFontReady.bind(null, name, callback));\n              }\n\n              const loadTestFontId = `lt${Date.now()}${this.loadTestFontId++}`;\n              let data = this._loadTestFont;\n              const COMMENT_OFFSET = 976;\n              data = spliceString(data, COMMENT_OFFSET, loadTestFontId.length, loadTestFontId);\n              const CFF_CHECKSUM_OFFSET = 16;\n              const XXXX_VALUE = 0x58585858;\n              let checksum = int32(data, CFF_CHECKSUM_OFFSET);\n\n              for (i = 0, ii = loadTestFontId.length - 3; i < ii; i += 4) {\n                checksum = checksum - XXXX_VALUE + int32(loadTestFontId, i) | 0;\n              }\n\n              if (i < loadTestFontId.length) {\n                checksum = checksum - XXXX_VALUE + int32(loadTestFontId + \"XXX\", i) | 0;\n              }\n\n              data = spliceString(data, CFF_CHECKSUM_OFFSET, 4, (0, _util.string32)(checksum));\n              const url = `url(data:font/opentype;base64,${btoa(data)});`;\n              const rule = `@font-face {font-family:\"${loadTestFontId}\";src:${url}}`;\n              this.insertRule(rule);\n              const names = [];\n\n              for (const font of fonts) {\n                names.push(font.loadedName);\n              }\n\n              names.push(loadTestFontId);\n\n              const div = this._document.createElement(\"div\");\n\n              div.style.visibility = \"hidden\";\n              div.style.width = div.style.height = \"10px\";\n              div.style.position = \"absolute\";\n              div.style.top = div.style.left = \"0px\";\n\n              for (const name of names) {\n                const span = this._document.createElement(\"span\");\n\n                span.textContent = \"Hi\";\n                span.style.fontFamily = name;\n                div.appendChild(span);\n              }\n\n              this._document.body.appendChild(div);\n\n              isFontReady(loadTestFontId, () => {\n                div.remove();\n                request.complete();\n              });\n            }\n\n          };\n        }\n\n        class FontFaceObject {\n          constructor(translatedData, _ref23) {\n            let {\n              isEvalSupported = true,\n              disableFontFace = false,\n              ignoreErrors = false,\n              onUnsupportedFeature,\n              fontRegistry = null\n            } = _ref23;\n            this.compiledGlyphs = Object.create(null);\n\n            for (const i in translatedData) {\n              this[i] = translatedData[i];\n            }\n\n            this.isEvalSupported = isEvalSupported !== false;\n            this.disableFontFace = disableFontFace === true;\n            this.ignoreErrors = ignoreErrors === true;\n            this._onUnsupportedFeature = onUnsupportedFeature;\n            this.fontRegistry = fontRegistry;\n          }\n\n          createNativeFontFace() {\n            if (!this.data || this.disableFontFace) {\n              return null;\n            }\n\n            let nativeFontFace;\n\n            if (!this.cssFontInfo) {\n              nativeFontFace = new FontFace(this.loadedName, this.data, {});\n            } else {\n              const css = {\n                weight: this.cssFontInfo.fontWeight\n              };\n\n              if (this.cssFontInfo.italicAngle) {\n                css.style = `oblique ${this.cssFontInfo.italicAngle}deg`;\n              }\n\n              nativeFontFace = new FontFace(this.cssFontInfo.fontFamily, this.data, css);\n            }\n\n            if (this.fontRegistry) {\n              this.fontRegistry.registerFont(this);\n            }\n\n            return nativeFontFace;\n          }\n\n          createFontFaceRule() {\n            if (!this.data || this.disableFontFace) {\n              return null;\n            }\n\n            const data = (0, _util.bytesToString)(this.data);\n            const url = `url(data:${this.mimetype};base64,${btoa(data)});`;\n            let rule;\n\n            if (!this.cssFontInfo) {\n              rule = `@font-face {font-family:\"${this.loadedName}\";src:${url}}`;\n            } else {\n              let css = `font-weight: ${this.cssFontInfo.fontWeight};`;\n\n              if (this.cssFontInfo.italicAngle) {\n                css += `font-style: oblique ${this.cssFontInfo.italicAngle}deg;`;\n              }\n\n              rule = `@font-face {font-family:\"${this.cssFontInfo.fontFamily}\";${css}src:${url}}`;\n            }\n\n            if (this.fontRegistry) {\n              this.fontRegistry.registerFont(this, url);\n            }\n\n            return rule;\n          }\n\n          getPathGenerator(objs, character) {\n            if (this.compiledGlyphs[character] !== undefined) {\n              return this.compiledGlyphs[character];\n            }\n\n            let cmds;\n\n            try {\n              cmds = objs.get(this.loadedName + \"_path_\" + character);\n            } catch (ex) {\n              if (!this.ignoreErrors) {\n                throw ex;\n              }\n\n              this._onUnsupportedFeature({\n                featureId: _util.UNSUPPORTED_FEATURES.errorFontGetPath\n              });\n\n              (0, _util.warn)(`getPathGenerator - ignoring character: \"${ex}\".`);\n              return this.compiledGlyphs[character] = function (c, size) {};\n            }\n\n            if (this.isEvalSupported && _util.IsEvalSupportedCached.value) {\n              const jsBuf = [];\n\n              for (const current of cmds) {\n                const args = current.args !== undefined ? current.args.join(\",\") : \"\";\n                jsBuf.push(\"c.\", current.cmd, \"(\", args, \");\\n\");\n              }\n\n              return this.compiledGlyphs[character] = new Function(\"c\", \"size\", jsBuf.join(\"\"));\n            }\n\n            return this.compiledGlyphs[character] = function (c, size) {\n              for (const current of cmds) {\n                if (current.cmd === \"scale\") {\n                  current.args = [size, -size];\n                }\n\n                c[current.cmd].apply(c, current.args);\n              }\n            };\n          }\n\n        }\n\n        exports.FontFaceObject = FontFaceObject;\n        /***/\n      },\n      /* 8 */\n\n      /***/\n      (__unused_webpack_module, exports, __w_pdfjs_require__) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.NodeStandardFontDataFactory = exports.NodeCanvasFactory = exports.NodeCMapReaderFactory = void 0;\n\n        var _base_factory = __w_pdfjs_require__(5);\n\n        var _is_node = __w_pdfjs_require__(4);\n\n        var _util = __w_pdfjs_require__(2);\n\n        let NodeCanvasFactory = class {\n          constructor() {\n            (0, _util.unreachable)(\"Not implemented: NodeCanvasFactory\");\n          }\n\n        };\n        exports.NodeCanvasFactory = NodeCanvasFactory;\n        let NodeCMapReaderFactory = class {\n          constructor() {\n            (0, _util.unreachable)(\"Not implemented: NodeCMapReaderFactory\");\n          }\n\n        };\n        exports.NodeCMapReaderFactory = NodeCMapReaderFactory;\n        let NodeStandardFontDataFactory = class {\n          constructor() {\n            (0, _util.unreachable)(\"Not implemented: NodeStandardFontDataFactory\");\n          }\n\n        };\n        exports.NodeStandardFontDataFactory = NodeStandardFontDataFactory;\n\n        if (_is_node.isNodeJS) {\n          const fetchData = function (url) {\n            return new Promise((resolve, reject) => {\n              const fs = require(\"fs\");\n\n              fs.readFile(url, (error, data) => {\n                if (error || !data) {\n                  reject(new Error(error));\n                  return;\n                }\n\n                resolve(new Uint8Array(data));\n              });\n            });\n          };\n\n          exports.NodeCanvasFactory = NodeCanvasFactory = class extends _base_factory.BaseCanvasFactory {\n            _createCanvas(width, height) {\n              const Canvas = require(\"canvas\");\n\n              return Canvas.createCanvas(width, height);\n            }\n\n          };\n          exports.NodeCMapReaderFactory = NodeCMapReaderFactory = class extends _base_factory.BaseCMapReaderFactory {\n            _fetchData(url, compressionType) {\n              return fetchData(url).then(data => {\n                return {\n                  cMapData: data,\n                  compressionType\n                };\n              });\n            }\n\n          };\n          exports.NodeStandardFontDataFactory = NodeStandardFontDataFactory = class extends _base_factory.BaseStandardFontDataFactory {\n            _fetchData(url) {\n              return fetchData(url);\n            }\n\n          };\n        }\n        /***/\n\n      },\n      /* 9 */\n\n      /***/\n      (__unused_webpack_module, exports, __w_pdfjs_require__) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.AnnotationStorage = void 0;\n\n        var _util = __w_pdfjs_require__(2);\n\n        class AnnotationStorage {\n          constructor() {\n            this._storage = new Map();\n            this._timeStamp = Date.now();\n            this._modified = false;\n            this.onSetModified = null;\n            this.onResetModified = null;\n          }\n\n          getValue(key, defaultValue) {\n            const value = this._storage.get(key);\n\n            if (value === undefined) {\n              return defaultValue;\n            }\n\n            return Object.assign(defaultValue, value);\n          }\n\n          setValue(key, value) {\n            const obj = this._storage.get(key);\n\n            let modified = false;\n\n            if (obj !== undefined) {\n              for (const [entry, val] of Object.entries(value)) {\n                if (obj[entry] !== val) {\n                  modified = true;\n                  obj[entry] = val;\n                }\n              }\n            } else {\n              modified = true;\n\n              this._storage.set(key, value);\n            }\n\n            if (modified) {\n              this._timeStamp = Date.now();\n\n              this._setModified();\n            }\n          }\n\n          getAll() {\n            return this._storage.size > 0 ? (0, _util.objectFromMap)(this._storage) : null;\n          }\n\n          get size() {\n            return this._storage.size;\n          }\n\n          _setModified() {\n            if (!this._modified) {\n              this._modified = true;\n\n              if (typeof this.onSetModified === \"function\") {\n                this.onSetModified();\n              }\n            }\n          }\n\n          resetModified() {\n            if (this._modified) {\n              this._modified = false;\n\n              if (typeof this.onResetModified === \"function\") {\n                this.onResetModified();\n              }\n            }\n          }\n\n          get serializable() {\n            return this._storage.size > 0 ? this._storage : null;\n          }\n\n          get lastModified() {\n            return this._timeStamp.toString();\n          }\n\n        }\n\n        exports.AnnotationStorage = AnnotationStorage;\n        /***/\n      },\n      /* 10 */\n\n      /***/\n      (__unused_webpack_module, exports, __w_pdfjs_require__) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.CanvasGraphics = void 0;\n\n        var _util = __w_pdfjs_require__(2);\n\n        var _pattern_helper = __w_pdfjs_require__(11);\n\n        var _display_utils = __w_pdfjs_require__(1);\n\n        const MIN_FONT_SIZE = 16;\n        const MAX_FONT_SIZE = 100;\n        const MAX_GROUP_SIZE = 4096;\n        const EXECUTION_TIME = 15;\n        const EXECUTION_STEPS = 10;\n        const COMPILE_TYPE3_GLYPHS = true;\n        const MAX_SIZE_TO_COMPILE = 1000;\n        const FULL_CHUNK_HEIGHT = 16;\n        const LINEWIDTH_SCALE_FACTOR = 1.000001;\n\n        function mirrorContextOperations(ctx, destCtx) {\n          if (ctx._removeMirroring) {\n            throw new Error(\"Context is already forwarding operations.\");\n          }\n\n          ctx.__originalSave = ctx.save;\n          ctx.__originalRestore = ctx.restore;\n          ctx.__originalRotate = ctx.rotate;\n          ctx.__originalScale = ctx.scale;\n          ctx.__originalTranslate = ctx.translate;\n          ctx.__originalTransform = ctx.transform;\n          ctx.__originalSetTransform = ctx.setTransform;\n          ctx.__originalResetTransform = ctx.resetTransform;\n          ctx.__originalClip = ctx.clip;\n          ctx.__originalMoveTo = ctx.moveTo;\n          ctx.__originalLineTo = ctx.lineTo;\n          ctx.__originalBezierCurveTo = ctx.bezierCurveTo;\n          ctx.__originalRect = ctx.rect;\n          ctx.__originalClosePath = ctx.closePath;\n          ctx.__originalBeginPath = ctx.beginPath;\n\n          ctx._removeMirroring = () => {\n            ctx.save = ctx.__originalSave;\n            ctx.restore = ctx.__originalRestore;\n            ctx.rotate = ctx.__originalRotate;\n            ctx.scale = ctx.__originalScale;\n            ctx.translate = ctx.__originalTranslate;\n            ctx.transform = ctx.__originalTransform;\n            ctx.setTransform = ctx.__originalSetTransform;\n            ctx.resetTransform = ctx.__originalResetTransform;\n            ctx.clip = ctx.__originalClip;\n            ctx.moveTo = ctx.__originalMoveTo;\n            ctx.lineTo = ctx.__originalLineTo;\n            ctx.bezierCurveTo = ctx.__originalBezierCurveTo;\n            ctx.rect = ctx.__originalRect;\n            ctx.closePath = ctx.__originalClosePath;\n            ctx.beginPath = ctx.__originalBeginPath;\n            delete ctx._removeMirroring;\n          };\n\n          ctx.save = function ctxSave() {\n            destCtx.save();\n\n            this.__originalSave();\n          };\n\n          ctx.restore = function ctxRestore() {\n            destCtx.restore();\n\n            this.__originalRestore();\n          };\n\n          ctx.translate = function ctxTranslate(x, y) {\n            destCtx.translate(x, y);\n\n            this.__originalTranslate(x, y);\n          };\n\n          ctx.scale = function ctxScale(x, y) {\n            destCtx.scale(x, y);\n\n            this.__originalScale(x, y);\n          };\n\n          ctx.transform = function ctxTransform(a, b, c, d, e, f) {\n            destCtx.transform(a, b, c, d, e, f);\n\n            this.__originalTransform(a, b, c, d, e, f);\n          };\n\n          ctx.setTransform = function ctxSetTransform(a, b, c, d, e, f) {\n            destCtx.setTransform(a, b, c, d, e, f);\n\n            this.__originalSetTransform(a, b, c, d, e, f);\n          };\n\n          ctx.resetTransform = function ctxResetTransform() {\n            destCtx.resetTransform();\n\n            this.__originalResetTransform();\n          };\n\n          ctx.rotate = function ctxRotate(angle) {\n            destCtx.rotate(angle);\n\n            this.__originalRotate(angle);\n          };\n\n          ctx.clip = function ctxRotate(rule) {\n            destCtx.clip(rule);\n\n            this.__originalClip(rule);\n          };\n\n          ctx.moveTo = function (x, y) {\n            destCtx.moveTo(x, y);\n\n            this.__originalMoveTo(x, y);\n          };\n\n          ctx.lineTo = function (x, y) {\n            destCtx.lineTo(x, y);\n\n            this.__originalLineTo(x, y);\n          };\n\n          ctx.bezierCurveTo = function (cp1x, cp1y, cp2x, cp2y, x, y) {\n            destCtx.bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y);\n\n            this.__originalBezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y);\n          };\n\n          ctx.rect = function (x, y, width, height) {\n            destCtx.rect(x, y, width, height);\n\n            this.__originalRect(x, y, width, height);\n          };\n\n          ctx.closePath = function () {\n            destCtx.closePath();\n\n            this.__originalClosePath();\n          };\n\n          ctx.beginPath = function () {\n            destCtx.beginPath();\n\n            this.__originalBeginPath();\n          };\n        }\n\n        function addContextCurrentTransform(ctx) {\n          if (ctx.mozCurrentTransform) {\n            return;\n          }\n\n          ctx._originalSave = ctx.save;\n          ctx._originalRestore = ctx.restore;\n          ctx._originalRotate = ctx.rotate;\n          ctx._originalScale = ctx.scale;\n          ctx._originalTranslate = ctx.translate;\n          ctx._originalTransform = ctx.transform;\n          ctx._originalSetTransform = ctx.setTransform;\n          ctx._originalResetTransform = ctx.resetTransform;\n          ctx._transformMatrix = ctx._transformMatrix || [1, 0, 0, 1, 0, 0];\n          ctx._transformStack = [];\n\n          try {\n            const desc = Object.getOwnPropertyDescriptor(Object.getPrototypeOf(ctx), \"lineWidth\");\n            ctx._setLineWidth = desc.set;\n            ctx._getLineWidth = desc.get;\n            Object.defineProperty(ctx, \"lineWidth\", {\n              set: function setLineWidth(width) {\n                this._setLineWidth(width * LINEWIDTH_SCALE_FACTOR);\n              },\n              get: function getLineWidth() {\n                return this._getLineWidth();\n              }\n            });\n          } catch (_) {}\n\n          Object.defineProperty(ctx, \"mozCurrentTransform\", {\n            get: function getCurrentTransform() {\n              return this._transformMatrix;\n            }\n          });\n          Object.defineProperty(ctx, \"mozCurrentTransformInverse\", {\n            get: function getCurrentTransformInverse() {\n              const [a, b, c, d, e, f] = this._transformMatrix;\n              const ad_bc = a * d - b * c;\n              const bc_ad = b * c - a * d;\n              return [d / ad_bc, b / bc_ad, c / bc_ad, a / ad_bc, (d * e - c * f) / bc_ad, (b * e - a * f) / ad_bc];\n            }\n          });\n\n          ctx.save = function ctxSave() {\n            const old = this._transformMatrix;\n\n            this._transformStack.push(old);\n\n            this._transformMatrix = old.slice(0, 6);\n\n            this._originalSave();\n          };\n\n          ctx.restore = function ctxRestore() {\n            const prev = this._transformStack.pop();\n\n            if (prev) {\n              this._transformMatrix = prev;\n\n              this._originalRestore();\n            }\n          };\n\n          ctx.translate = function ctxTranslate(x, y) {\n            const m = this._transformMatrix;\n            m[4] = m[0] * x + m[2] * y + m[4];\n            m[5] = m[1] * x + m[3] * y + m[5];\n\n            this._originalTranslate(x, y);\n          };\n\n          ctx.scale = function ctxScale(x, y) {\n            const m = this._transformMatrix;\n            m[0] *= x;\n            m[1] *= x;\n            m[2] *= y;\n            m[3] *= y;\n\n            this._originalScale(x, y);\n          };\n\n          ctx.transform = function ctxTransform(a, b, c, d, e, f) {\n            const m = this._transformMatrix;\n            this._transformMatrix = [m[0] * a + m[2] * b, m[1] * a + m[3] * b, m[0] * c + m[2] * d, m[1] * c + m[3] * d, m[0] * e + m[2] * f + m[4], m[1] * e + m[3] * f + m[5]];\n\n            ctx._originalTransform(a, b, c, d, e, f);\n          };\n\n          ctx.setTransform = function ctxSetTransform(a, b, c, d, e, f) {\n            this._transformMatrix = [a, b, c, d, e, f];\n\n            ctx._originalSetTransform(a, b, c, d, e, f);\n          };\n\n          ctx.resetTransform = function ctxResetTransform() {\n            this._transformMatrix = [1, 0, 0, 1, 0, 0];\n\n            ctx._originalResetTransform();\n          };\n\n          ctx.rotate = function ctxRotate(angle) {\n            const cosValue = Math.cos(angle);\n            const sinValue = Math.sin(angle);\n            const m = this._transformMatrix;\n            this._transformMatrix = [m[0] * cosValue + m[2] * sinValue, m[1] * cosValue + m[3] * sinValue, m[0] * -sinValue + m[2] * cosValue, m[1] * -sinValue + m[3] * cosValue, m[4], m[5]];\n\n            this._originalRotate(angle);\n          };\n        }\n\n        class CachedCanvases {\n          constructor(canvasFactory) {\n            this.canvasFactory = canvasFactory;\n            this.cache = Object.create(null);\n          }\n\n          getCanvas(id, width, height, trackTransform) {\n            let canvasEntry;\n\n            if (this.cache[id] !== undefined) {\n              canvasEntry = this.cache[id];\n              this.canvasFactory.reset(canvasEntry, width, height);\n              canvasEntry.context.setTransform(1, 0, 0, 1, 0, 0);\n            } else {\n              canvasEntry = this.canvasFactory.create(width, height);\n              this.cache[id] = canvasEntry;\n            }\n\n            if (trackTransform) {\n              addContextCurrentTransform(canvasEntry.context);\n            }\n\n            return canvasEntry;\n          }\n\n          clear() {\n            for (const id in this.cache) {\n              const canvasEntry = this.cache[id];\n              this.canvasFactory.destroy(canvasEntry);\n              delete this.cache[id];\n            }\n          }\n\n        }\n\n        function compileType3Glyph(imgData) {\n          const POINT_TO_PROCESS_LIMIT = 1000;\n          const POINT_TYPES = new Uint8Array([0, 2, 4, 0, 1, 0, 5, 4, 8, 10, 0, 8, 0, 2, 1, 0]);\n          const width = imgData.width,\n                height = imgData.height,\n                width1 = width + 1;\n          let i, ii, j, j0;\n          const points = new Uint8Array(width1 * (height + 1));\n          const lineSize = width + 7 & ~7,\n                data0 = imgData.data;\n          const data = new Uint8Array(lineSize * height);\n          let pos = 0;\n\n          for (i = 0, ii = data0.length; i < ii; i++) {\n            const elem = data0[i];\n            let mask = 128;\n\n            while (mask > 0) {\n              data[pos++] = elem & mask ? 0 : 255;\n              mask >>= 1;\n            }\n          }\n\n          let count = 0;\n          pos = 0;\n\n          if (data[pos] !== 0) {\n            points[0] = 1;\n            ++count;\n          }\n\n          for (j = 1; j < width; j++) {\n            if (data[pos] !== data[pos + 1]) {\n              points[j] = data[pos] ? 2 : 1;\n              ++count;\n            }\n\n            pos++;\n          }\n\n          if (data[pos] !== 0) {\n            points[j] = 2;\n            ++count;\n          }\n\n          for (i = 1; i < height; i++) {\n            pos = i * lineSize;\n            j0 = i * width1;\n\n            if (data[pos - lineSize] !== data[pos]) {\n              points[j0] = data[pos] ? 1 : 8;\n              ++count;\n            }\n\n            let sum = (data[pos] ? 4 : 0) + (data[pos - lineSize] ? 8 : 0);\n\n            for (j = 1; j < width; j++) {\n              sum = (sum >> 2) + (data[pos + 1] ? 4 : 0) + (data[pos - lineSize + 1] ? 8 : 0);\n\n              if (POINT_TYPES[sum]) {\n                points[j0 + j] = POINT_TYPES[sum];\n                ++count;\n              }\n\n              pos++;\n            }\n\n            if (data[pos - lineSize] !== data[pos]) {\n              points[j0 + j] = data[pos] ? 2 : 4;\n              ++count;\n            }\n\n            if (count > POINT_TO_PROCESS_LIMIT) {\n              return null;\n            }\n          }\n\n          pos = lineSize * (height - 1);\n          j0 = i * width1;\n\n          if (data[pos] !== 0) {\n            points[j0] = 8;\n            ++count;\n          }\n\n          for (j = 1; j < width; j++) {\n            if (data[pos] !== data[pos + 1]) {\n              points[j0 + j] = data[pos] ? 4 : 8;\n              ++count;\n            }\n\n            pos++;\n          }\n\n          if (data[pos] !== 0) {\n            points[j0 + j] = 4;\n            ++count;\n          }\n\n          if (count > POINT_TO_PROCESS_LIMIT) {\n            return null;\n          }\n\n          const steps = new Int32Array([0, width1, -1, 0, -width1, 0, 0, 0, 1]);\n          const outlines = [];\n\n          for (i = 0; count && i <= height; i++) {\n            let p = i * width1;\n            const end = p + width;\n\n            while (p < end && !points[p]) {\n              p++;\n            }\n\n            if (p === end) {\n              continue;\n            }\n\n            const coords = [p % width1, i];\n            const p0 = p;\n            let type = points[p];\n\n            do {\n              const step = steps[type];\n\n              do {\n                p += step;\n              } while (!points[p]);\n\n              const pp = points[p];\n\n              if (pp !== 5 && pp !== 10) {\n                type = pp;\n                points[p] = 0;\n              } else {\n                type = pp & 0x33 * type >> 4;\n                points[p] &= type >> 2 | type << 2;\n              }\n\n              coords.push(p % width1, p / width1 | 0);\n\n              if (!points[p]) {\n                --count;\n              }\n            } while (p0 !== p);\n\n            outlines.push(coords);\n            --i;\n          }\n\n          const drawOutline = function (c) {\n            c.save();\n            c.scale(1 / width, -1 / height);\n            c.translate(0, -height);\n            c.beginPath();\n\n            for (let k = 0, kk = outlines.length; k < kk; k++) {\n              const o = outlines[k];\n              c.moveTo(o[0], o[1]);\n\n              for (let l = 2, ll = o.length; l < ll; l += 2) {\n                c.lineTo(o[l], o[l + 1]);\n              }\n            }\n\n            c.fill();\n            c.beginPath();\n            c.restore();\n          };\n\n          return drawOutline;\n        }\n\n        class CanvasExtraState {\n          constructor(width, height) {\n            this.alphaIsShape = false;\n            this.fontSize = 0;\n            this.fontSizeScale = 1;\n            this.textMatrix = _util.IDENTITY_MATRIX;\n            this.textMatrixScale = 1;\n            this.fontMatrix = _util.FONT_IDENTITY_MATRIX;\n            this.leading = 0;\n            this.x = 0;\n            this.y = 0;\n            this.lineX = 0;\n            this.lineY = 0;\n            this.charSpacing = 0;\n            this.wordSpacing = 0;\n            this.textHScale = 1;\n            this.textRenderingMode = _util.TextRenderingMode.FILL;\n            this.textRise = 0;\n            this.fillColor = \"#000000\";\n            this.strokeColor = \"#000000\";\n            this.patternFill = false;\n            this.fillAlpha = 1;\n            this.strokeAlpha = 1;\n            this.lineWidth = 1;\n            this.activeSMask = null;\n            this.transferMaps = null;\n            this.startNewPathAndClipBox([0, 0, width, height]);\n          }\n\n          clone() {\n            const clone = Object.create(this);\n            clone.clipBox = this.clipBox.slice();\n            return clone;\n          }\n\n          setCurrentPoint(x, y) {\n            this.x = x;\n            this.y = y;\n          }\n\n          updatePathMinMax(transform, x, y) {\n            [x, y] = _util.Util.applyTransform([x, y], transform);\n            this.minX = Math.min(this.minX, x);\n            this.minY = Math.min(this.minY, y);\n            this.maxX = Math.max(this.maxX, x);\n            this.maxY = Math.max(this.maxY, y);\n          }\n\n          updateCurvePathMinMax(transform, x0, y0, x1, y1, x2, y2, x3, y3) {\n            const box = _util.Util.bezierBoundingBox(x0, y0, x1, y1, x2, y2, x3, y3);\n\n            this.updatePathMinMax(transform, box[0], box[1]);\n            this.updatePathMinMax(transform, box[2], box[3]);\n          }\n\n          getPathBoundingBox() {\n            let pathType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _pattern_helper.PathType.FILL;\n            let transform = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n            const box = [this.minX, this.minY, this.maxX, this.maxY];\n\n            if (pathType === _pattern_helper.PathType.STROKE) {\n              if (!transform) {\n                (0, _util.unreachable)(\"Stroke bounding box must include transform.\");\n              }\n\n              const scale = _util.Util.singularValueDecompose2dScale(transform);\n\n              const xStrokePad = scale[0] * this.lineWidth / 2;\n              const yStrokePad = scale[1] * this.lineWidth / 2;\n              box[0] -= xStrokePad;\n              box[1] -= yStrokePad;\n              box[2] += xStrokePad;\n              box[3] += yStrokePad;\n            }\n\n            return box;\n          }\n\n          updateClipFromPath() {\n            const intersect = _util.Util.intersect(this.clipBox, this.getPathBoundingBox());\n\n            this.startNewPathAndClipBox(intersect || [0, 0, 0, 0]);\n          }\n\n          startNewPathAndClipBox(box) {\n            this.clipBox = box;\n            this.minX = Infinity;\n            this.minY = Infinity;\n            this.maxX = 0;\n            this.maxY = 0;\n          }\n\n          getClippedPathBoundingBox() {\n            let pathType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _pattern_helper.PathType.FILL;\n            let transform = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n            return _util.Util.intersect(this.clipBox, this.getPathBoundingBox(pathType, transform));\n          }\n\n        }\n\n        function putBinaryImageData(ctx, imgData) {\n          let transferMaps = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n          if (typeof ImageData !== \"undefined\" && imgData instanceof ImageData) {\n            ctx.putImageData(imgData, 0, 0);\n            return;\n          }\n\n          const height = imgData.height,\n                width = imgData.width;\n          const partialChunkHeight = height % FULL_CHUNK_HEIGHT;\n          const fullChunks = (height - partialChunkHeight) / FULL_CHUNK_HEIGHT;\n          const totalChunks = partialChunkHeight === 0 ? fullChunks : fullChunks + 1;\n          const chunkImgData = ctx.createImageData(width, FULL_CHUNK_HEIGHT);\n          let srcPos = 0,\n              destPos;\n          const src = imgData.data;\n          const dest = chunkImgData.data;\n          let i, j, thisChunkHeight, elemsInThisChunk;\n          let transferMapRed, transferMapGreen, transferMapBlue, transferMapGray;\n\n          if (transferMaps) {\n            switch (transferMaps.length) {\n              case 1:\n                transferMapRed = transferMaps[0];\n                transferMapGreen = transferMaps[0];\n                transferMapBlue = transferMaps[0];\n                transferMapGray = transferMaps[0];\n                break;\n\n              case 4:\n                transferMapRed = transferMaps[0];\n                transferMapGreen = transferMaps[1];\n                transferMapBlue = transferMaps[2];\n                transferMapGray = transferMaps[3];\n                break;\n            }\n          }\n\n          if (imgData.kind === _util.ImageKind.GRAYSCALE_1BPP) {\n            const srcLength = src.byteLength;\n            const dest32 = new Uint32Array(dest.buffer, 0, dest.byteLength >> 2);\n            const dest32DataLength = dest32.length;\n            const fullSrcDiff = width + 7 >> 3;\n            let white = 0xffffffff;\n            let black = _util.IsLittleEndianCached.value ? 0xff000000 : 0x000000ff;\n\n            if (transferMapGray) {\n              if (transferMapGray[0] === 0xff && transferMapGray[0xff] === 0) {\n                [white, black] = [black, white];\n              }\n            }\n\n            for (i = 0; i < totalChunks; i++) {\n              thisChunkHeight = i < fullChunks ? FULL_CHUNK_HEIGHT : partialChunkHeight;\n              destPos = 0;\n\n              for (j = 0; j < thisChunkHeight; j++) {\n                const srcDiff = srcLength - srcPos;\n                let k = 0;\n                const kEnd = srcDiff > fullSrcDiff ? width : srcDiff * 8 - 7;\n                const kEndUnrolled = kEnd & ~7;\n                let mask = 0;\n                let srcByte = 0;\n\n                for (; k < kEndUnrolled; k += 8) {\n                  srcByte = src[srcPos++];\n                  dest32[destPos++] = srcByte & 128 ? white : black;\n                  dest32[destPos++] = srcByte & 64 ? white : black;\n                  dest32[destPos++] = srcByte & 32 ? white : black;\n                  dest32[destPos++] = srcByte & 16 ? white : black;\n                  dest32[destPos++] = srcByte & 8 ? white : black;\n                  dest32[destPos++] = srcByte & 4 ? white : black;\n                  dest32[destPos++] = srcByte & 2 ? white : black;\n                  dest32[destPos++] = srcByte & 1 ? white : black;\n                }\n\n                for (; k < kEnd; k++) {\n                  if (mask === 0) {\n                    srcByte = src[srcPos++];\n                    mask = 128;\n                  }\n\n                  dest32[destPos++] = srcByte & mask ? white : black;\n                  mask >>= 1;\n                }\n              }\n\n              while (destPos < dest32DataLength) {\n                dest32[destPos++] = 0;\n              }\n\n              ctx.putImageData(chunkImgData, 0, i * FULL_CHUNK_HEIGHT);\n            }\n          } else if (imgData.kind === _util.ImageKind.RGBA_32BPP) {\n            const hasTransferMaps = !!(transferMapRed || transferMapGreen || transferMapBlue);\n            j = 0;\n            elemsInThisChunk = width * FULL_CHUNK_HEIGHT * 4;\n\n            for (i = 0; i < fullChunks; i++) {\n              dest.set(src.subarray(srcPos, srcPos + elemsInThisChunk));\n              srcPos += elemsInThisChunk;\n\n              if (hasTransferMaps) {\n                for (let k = 0; k < elemsInThisChunk; k += 4) {\n                  if (transferMapRed) {\n                    dest[k + 0] = transferMapRed[dest[k + 0]];\n                  }\n\n                  if (transferMapGreen) {\n                    dest[k + 1] = transferMapGreen[dest[k + 1]];\n                  }\n\n                  if (transferMapBlue) {\n                    dest[k + 2] = transferMapBlue[dest[k + 2]];\n                  }\n                }\n              }\n\n              ctx.putImageData(chunkImgData, 0, j);\n              j += FULL_CHUNK_HEIGHT;\n            }\n\n            if (i < totalChunks) {\n              elemsInThisChunk = width * partialChunkHeight * 4;\n              dest.set(src.subarray(srcPos, srcPos + elemsInThisChunk));\n\n              if (hasTransferMaps) {\n                for (let k = 0; k < elemsInThisChunk; k += 4) {\n                  if (transferMapRed) {\n                    dest[k + 0] = transferMapRed[dest[k + 0]];\n                  }\n\n                  if (transferMapGreen) {\n                    dest[k + 1] = transferMapGreen[dest[k + 1]];\n                  }\n\n                  if (transferMapBlue) {\n                    dest[k + 2] = transferMapBlue[dest[k + 2]];\n                  }\n                }\n              }\n\n              ctx.putImageData(chunkImgData, 0, j);\n            }\n          } else if (imgData.kind === _util.ImageKind.RGB_24BPP) {\n            const hasTransferMaps = !!(transferMapRed || transferMapGreen || transferMapBlue);\n            thisChunkHeight = FULL_CHUNK_HEIGHT;\n            elemsInThisChunk = width * thisChunkHeight;\n\n            for (i = 0; i < totalChunks; i++) {\n              if (i >= fullChunks) {\n                thisChunkHeight = partialChunkHeight;\n                elemsInThisChunk = width * thisChunkHeight;\n              }\n\n              destPos = 0;\n\n              for (j = elemsInThisChunk; j--;) {\n                dest[destPos++] = src[srcPos++];\n                dest[destPos++] = src[srcPos++];\n                dest[destPos++] = src[srcPos++];\n                dest[destPos++] = 255;\n              }\n\n              if (hasTransferMaps) {\n                for (let k = 0; k < destPos; k += 4) {\n                  if (transferMapRed) {\n                    dest[k + 0] = transferMapRed[dest[k + 0]];\n                  }\n\n                  if (transferMapGreen) {\n                    dest[k + 1] = transferMapGreen[dest[k + 1]];\n                  }\n\n                  if (transferMapBlue) {\n                    dest[k + 2] = transferMapBlue[dest[k + 2]];\n                  }\n                }\n              }\n\n              ctx.putImageData(chunkImgData, 0, i * FULL_CHUNK_HEIGHT);\n            }\n          } else {\n            throw new Error(`bad image kind: ${imgData.kind}`);\n          }\n        }\n\n        function putBinaryImageMask(ctx, imgData) {\n          const height = imgData.height,\n                width = imgData.width;\n          const partialChunkHeight = height % FULL_CHUNK_HEIGHT;\n          const fullChunks = (height - partialChunkHeight) / FULL_CHUNK_HEIGHT;\n          const totalChunks = partialChunkHeight === 0 ? fullChunks : fullChunks + 1;\n          const chunkImgData = ctx.createImageData(width, FULL_CHUNK_HEIGHT);\n          let srcPos = 0;\n          const src = imgData.data;\n          const dest = chunkImgData.data;\n\n          for (let i = 0; i < totalChunks; i++) {\n            const thisChunkHeight = i < fullChunks ? FULL_CHUNK_HEIGHT : partialChunkHeight;\n            let destPos = 3;\n\n            for (let j = 0; j < thisChunkHeight; j++) {\n              let elem,\n                  mask = 0;\n\n              for (let k = 0; k < width; k++) {\n                if (!mask) {\n                  elem = src[srcPos++];\n                  mask = 128;\n                }\n\n                dest[destPos] = elem & mask ? 0 : 255;\n                destPos += 4;\n                mask >>= 1;\n              }\n            }\n\n            ctx.putImageData(chunkImgData, 0, i * FULL_CHUNK_HEIGHT);\n          }\n        }\n\n        function copyCtxState(sourceCtx, destCtx) {\n          const properties = [\"strokeStyle\", \"fillStyle\", \"fillRule\", \"globalAlpha\", \"lineWidth\", \"lineCap\", \"lineJoin\", \"miterLimit\", \"globalCompositeOperation\", \"font\"];\n\n          for (let i = 0, ii = properties.length; i < ii; i++) {\n            const property = properties[i];\n\n            if (sourceCtx[property] !== undefined) {\n              destCtx[property] = sourceCtx[property];\n            }\n          }\n\n          if (sourceCtx.setLineDash !== undefined) {\n            destCtx.setLineDash(sourceCtx.getLineDash());\n            destCtx.lineDashOffset = sourceCtx.lineDashOffset;\n          }\n        }\n\n        function resetCtxToDefault(ctx) {\n          ctx.strokeStyle = \"#000000\";\n          ctx.fillStyle = \"#000000\";\n          ctx.fillRule = \"nonzero\";\n          ctx.globalAlpha = 1;\n          ctx.lineWidth = 1;\n          ctx.lineCap = \"butt\";\n          ctx.lineJoin = \"miter\";\n          ctx.miterLimit = 10;\n          ctx.globalCompositeOperation = \"source-over\";\n          ctx.font = \"10px sans-serif\";\n\n          if (ctx.setLineDash !== undefined) {\n            ctx.setLineDash([]);\n            ctx.lineDashOffset = 0;\n          }\n        }\n\n        function composeSMaskBackdrop(bytes, r0, g0, b0) {\n          const length = bytes.length;\n\n          for (let i = 3; i < length; i += 4) {\n            const alpha = bytes[i];\n\n            if (alpha === 0) {\n              bytes[i - 3] = r0;\n              bytes[i - 2] = g0;\n              bytes[i - 1] = b0;\n            } else if (alpha < 255) {\n              const alpha_ = 255 - alpha;\n              bytes[i - 3] = bytes[i - 3] * alpha + r0 * alpha_ >> 8;\n              bytes[i - 2] = bytes[i - 2] * alpha + g0 * alpha_ >> 8;\n              bytes[i - 1] = bytes[i - 1] * alpha + b0 * alpha_ >> 8;\n            }\n          }\n        }\n\n        function composeSMaskAlpha(maskData, layerData, transferMap) {\n          const length = maskData.length;\n          const scale = 1 / 255;\n\n          for (let i = 3; i < length; i += 4) {\n            const alpha = transferMap ? transferMap[maskData[i]] : maskData[i];\n            layerData[i] = layerData[i] * alpha * scale | 0;\n          }\n        }\n\n        function composeSMaskLuminosity(maskData, layerData, transferMap) {\n          const length = maskData.length;\n\n          for (let i = 3; i < length; i += 4) {\n            const y = maskData[i - 3] * 77 + maskData[i - 2] * 152 + maskData[i - 1] * 28;\n            layerData[i] = transferMap ? layerData[i] * transferMap[y >> 8] >> 8 : layerData[i] * y >> 16;\n          }\n        }\n\n        function genericComposeSMask(maskCtx, layerCtx, width, height, subtype, backdrop, transferMap, layerOffsetX, layerOffsetY, maskOffsetX, maskOffsetY) {\n          const hasBackdrop = !!backdrop;\n          const r0 = hasBackdrop ? backdrop[0] : 0;\n          const g0 = hasBackdrop ? backdrop[1] : 0;\n          const b0 = hasBackdrop ? backdrop[2] : 0;\n          let composeFn;\n\n          if (subtype === \"Luminosity\") {\n            composeFn = composeSMaskLuminosity;\n          } else {\n            composeFn = composeSMaskAlpha;\n          }\n\n          const PIXELS_TO_PROCESS = 1048576;\n          const chunkSize = Math.min(height, Math.ceil(PIXELS_TO_PROCESS / width));\n\n          for (let row = 0; row < height; row += chunkSize) {\n            const chunkHeight = Math.min(chunkSize, height - row);\n            const maskData = maskCtx.getImageData(layerOffsetX - maskOffsetX, row + (layerOffsetY - maskOffsetY), width, chunkHeight);\n            const layerData = layerCtx.getImageData(layerOffsetX, row + layerOffsetY, width, chunkHeight);\n\n            if (hasBackdrop) {\n              composeSMaskBackdrop(maskData.data, r0, g0, b0);\n            }\n\n            composeFn(maskData.data, layerData.data, transferMap);\n            layerCtx.putImageData(layerData, layerOffsetX, row + layerOffsetY);\n          }\n        }\n\n        function composeSMask(ctx, smask, layerCtx, layerBox) {\n          const layerOffsetX = layerBox[0];\n          const layerOffsetY = layerBox[1];\n          const layerWidth = layerBox[2] - layerOffsetX;\n          const layerHeight = layerBox[3] - layerOffsetY;\n\n          if (layerWidth === 0 || layerHeight === 0) {\n            return;\n          }\n\n          genericComposeSMask(smask.context, layerCtx, layerWidth, layerHeight, smask.subtype, smask.backdrop, smask.transferMap, layerOffsetX, layerOffsetY, smask.offsetX, smask.offsetY);\n          ctx.save();\n          ctx.globalAlpha = 1;\n          ctx.globalCompositeOperation = \"source-over\";\n          ctx.setTransform(1, 0, 0, 1, 0, 0);\n          ctx.drawImage(layerCtx.canvas, 0, 0);\n          ctx.restore();\n        }\n\n        function getImageSmoothingEnabled(transform, interpolate) {\n          const scale = _util.Util.singularValueDecompose2dScale(transform);\n\n          scale[0] = Math.fround(scale[0]);\n          scale[1] = Math.fround(scale[1]);\n          const actualScale = Math.fround((globalThis.devicePixelRatio || 1) * _display_utils.PixelsPerInch.PDF_TO_CSS_UNITS);\n\n          if (interpolate !== undefined) {\n            return interpolate;\n          } else if (scale[0] <= actualScale || scale[1] <= actualScale) {\n            return true;\n          }\n\n          return false;\n        }\n\n        const LINE_CAP_STYLES = [\"butt\", \"round\", \"square\"];\n        const LINE_JOIN_STYLES = [\"miter\", \"round\", \"bevel\"];\n        const NORMAL_CLIP = {};\n        const EO_CLIP = {};\n\n        class CanvasGraphics {\n          constructor(canvasCtx, commonObjs, objs, canvasFactory, imageLayer, optionalContentConfig, annotationCanvasMap) {\n            this.ctx = canvasCtx;\n            this.current = new CanvasExtraState(this.ctx.canvas.width, this.ctx.canvas.height);\n            this.stateStack = [];\n            this.pendingClip = null;\n            this.pendingEOFill = false;\n            this.res = null;\n            this.xobjs = null;\n            this.commonObjs = commonObjs;\n            this.objs = objs;\n            this.canvasFactory = canvasFactory;\n            this.imageLayer = imageLayer;\n            this.groupStack = [];\n            this.processingType3 = null;\n            this.baseTransform = null;\n            this.baseTransformStack = [];\n            this.groupLevel = 0;\n            this.smaskStack = [];\n            this.smaskCounter = 0;\n            this.tempSMask = null;\n            this.suspendedCtx = null;\n            this.contentVisible = true;\n            this.markedContentStack = [];\n            this.optionalContentConfig = optionalContentConfig;\n            this.cachedCanvases = new CachedCanvases(this.canvasFactory);\n            this.cachedPatterns = new Map();\n            this.annotationCanvasMap = annotationCanvasMap;\n            this.viewportScale = 1;\n            this.outputScaleX = 1;\n            this.outputScaleY = 1;\n\n            if (canvasCtx) {\n              addContextCurrentTransform(canvasCtx);\n            }\n\n            this._cachedGetSinglePixelWidth = null;\n          }\n\n          beginDrawing(_ref24) {\n            let {\n              transform,\n              viewport,\n              transparency = false,\n              background = null\n            } = _ref24;\n            const width = this.ctx.canvas.width;\n            const height = this.ctx.canvas.height;\n            this.ctx.save();\n            this.ctx.fillStyle = background || \"rgb(255, 255, 255)\";\n            this.ctx.fillRect(0, 0, width, height);\n            this.ctx.restore();\n\n            if (transparency) {\n              const transparentCanvas = this.cachedCanvases.getCanvas(\"transparent\", width, height, true);\n              this.compositeCtx = this.ctx;\n              this.transparentCanvas = transparentCanvas.canvas;\n              this.ctx = transparentCanvas.context;\n              this.ctx.save();\n              this.ctx.transform.apply(this.ctx, this.compositeCtx.mozCurrentTransform);\n            }\n\n            this.ctx.save();\n            resetCtxToDefault(this.ctx);\n\n            if (transform) {\n              this.ctx.transform.apply(this.ctx, transform);\n              this.outputScaleX = transform[0];\n              this.outputScaleY = transform[0];\n            }\n\n            this.ctx.transform.apply(this.ctx, viewport.transform);\n            this.viewportScale = viewport.scale;\n            this.baseTransform = this.ctx.mozCurrentTransform.slice();\n            this._combinedScaleFactor = Math.hypot(this.baseTransform[0], this.baseTransform[2]);\n\n            if (this.imageLayer) {\n              this.imageLayer.beginLayout();\n            }\n          }\n\n          executeOperatorList(operatorList, executionStartIdx, continueCallback, stepper) {\n            const argsArray = operatorList.argsArray;\n            const fnArray = operatorList.fnArray;\n            let i = executionStartIdx || 0;\n            const argsArrayLen = argsArray.length;\n\n            if (argsArrayLen === i) {\n              return i;\n            }\n\n            const chunkOperations = argsArrayLen - i > EXECUTION_STEPS && typeof continueCallback === \"function\";\n            const endTime = chunkOperations ? Date.now() + EXECUTION_TIME : 0;\n            let steps = 0;\n            const commonObjs = this.commonObjs;\n            const objs = this.objs;\n            let fnId;\n\n            while (true) {\n              if (stepper !== undefined && i === stepper.nextBreakPoint) {\n                stepper.breakIt(i, continueCallback);\n                return i;\n              }\n\n              fnId = fnArray[i];\n\n              if (fnId !== _util.OPS.dependency) {\n                this[fnId].apply(this, argsArray[i]);\n              } else {\n                for (const depObjId of argsArray[i]) {\n                  const objsPool = depObjId.startsWith(\"g_\") ? commonObjs : objs;\n\n                  if (!objsPool.has(depObjId)) {\n                    objsPool.get(depObjId, continueCallback);\n                    return i;\n                  }\n                }\n              }\n\n              i++;\n\n              if (i === argsArrayLen) {\n                return i;\n              }\n\n              if (chunkOperations && ++steps > EXECUTION_STEPS) {\n                if (Date.now() > endTime) {\n                  continueCallback();\n                  return i;\n                }\n\n                steps = 0;\n              }\n            }\n          }\n\n          endDrawing() {\n            while (this.stateStack.length || this.current.activeSMask !== null) {\n              this.restore();\n            }\n\n            this.ctx.restore();\n\n            if (this.transparentCanvas) {\n              this.ctx = this.compositeCtx;\n              this.ctx.save();\n              this.ctx.setTransform(1, 0, 0, 1, 0, 0);\n              this.ctx.drawImage(this.transparentCanvas, 0, 0);\n              this.ctx.restore();\n              this.transparentCanvas = null;\n            }\n\n            this.cachedCanvases.clear();\n            this.cachedPatterns.clear();\n\n            if (this.imageLayer) {\n              this.imageLayer.endLayout();\n            }\n          }\n\n          _scaleImage(img, inverseTransform) {\n            const width = img.width;\n            const height = img.height;\n            let widthScale = Math.max(Math.hypot(inverseTransform[0], inverseTransform[1]), 1);\n            let heightScale = Math.max(Math.hypot(inverseTransform[2], inverseTransform[3]), 1);\n            let paintWidth = width,\n                paintHeight = height;\n            let tmpCanvasId = \"prescale1\";\n            let tmpCanvas, tmpCtx;\n\n            while (widthScale > 2 && paintWidth > 1 || heightScale > 2 && paintHeight > 1) {\n              let newWidth = paintWidth,\n                  newHeight = paintHeight;\n\n              if (widthScale > 2 && paintWidth > 1) {\n                newWidth = Math.ceil(paintWidth / 2);\n                widthScale /= paintWidth / newWidth;\n              }\n\n              if (heightScale > 2 && paintHeight > 1) {\n                newHeight = Math.ceil(paintHeight / 2);\n                heightScale /= paintHeight / newHeight;\n              }\n\n              tmpCanvas = this.cachedCanvases.getCanvas(tmpCanvasId, newWidth, newHeight);\n              tmpCtx = tmpCanvas.context;\n              tmpCtx.clearRect(0, 0, newWidth, newHeight);\n              tmpCtx.drawImage(img, 0, 0, paintWidth, paintHeight, 0, 0, newWidth, newHeight);\n              img = tmpCanvas.canvas;\n              paintWidth = newWidth;\n              paintHeight = newHeight;\n              tmpCanvasId = tmpCanvasId === \"prescale1\" ? \"prescale2\" : \"prescale1\";\n            }\n\n            return {\n              img,\n              paintWidth,\n              paintHeight\n            };\n          }\n\n          _createMaskCanvas(img) {\n            const ctx = this.ctx;\n            const width = img.width,\n                  height = img.height;\n            const fillColor = this.current.fillColor;\n            const isPatternFill = this.current.patternFill;\n            const maskCanvas = this.cachedCanvases.getCanvas(\"maskCanvas\", width, height);\n            const maskCtx = maskCanvas.context;\n            putBinaryImageMask(maskCtx, img);\n            const objToCanvas = ctx.mozCurrentTransform;\n\n            let maskToCanvas = _util.Util.transform(objToCanvas, [1 / width, 0, 0, -1 / height, 0, 0]);\n\n            maskToCanvas = _util.Util.transform(maskToCanvas, [1, 0, 0, 1, 0, -height]);\n\n            const cord1 = _util.Util.applyTransform([0, 0], maskToCanvas);\n\n            const cord2 = _util.Util.applyTransform([width, height], maskToCanvas);\n\n            const rect = _util.Util.normalizeRect([cord1[0], cord1[1], cord2[0], cord2[1]]);\n\n            const drawnWidth = Math.ceil(rect[2] - rect[0]);\n            const drawnHeight = Math.ceil(rect[3] - rect[1]);\n            const fillCanvas = this.cachedCanvases.getCanvas(\"fillCanvas\", drawnWidth, drawnHeight, true);\n            const fillCtx = fillCanvas.context;\n            const offsetX = Math.min(cord1[0], cord2[0]);\n            const offsetY = Math.min(cord1[1], cord2[1]);\n            fillCtx.translate(-offsetX, -offsetY);\n            fillCtx.transform.apply(fillCtx, maskToCanvas);\n\n            const scaled = this._scaleImage(maskCanvas.canvas, fillCtx.mozCurrentTransformInverse);\n\n            fillCtx.imageSmoothingEnabled = getImageSmoothingEnabled(fillCtx.mozCurrentTransform, img.interpolate);\n            fillCtx.drawImage(scaled.img, 0, 0, scaled.img.width, scaled.img.height, 0, 0, width, height);\n            fillCtx.globalCompositeOperation = \"source-in\";\n\n            const inverse = _util.Util.transform(fillCtx.mozCurrentTransformInverse, [1, 0, 0, 1, -offsetX, -offsetY]);\n\n            fillCtx.fillStyle = isPatternFill ? fillColor.getPattern(ctx, this, inverse, _pattern_helper.PathType.FILL) : fillColor;\n            fillCtx.fillRect(0, 0, width, height);\n            return {\n              canvas: fillCanvas.canvas,\n              offsetX: Math.round(offsetX),\n              offsetY: Math.round(offsetY)\n            };\n          }\n\n          setLineWidth(width) {\n            this.current.lineWidth = width;\n            this.ctx.lineWidth = width;\n          }\n\n          setLineCap(style) {\n            this.ctx.lineCap = LINE_CAP_STYLES[style];\n          }\n\n          setLineJoin(style) {\n            this.ctx.lineJoin = LINE_JOIN_STYLES[style];\n          }\n\n          setMiterLimit(limit) {\n            this.ctx.miterLimit = limit;\n          }\n\n          setDash(dashArray, dashPhase) {\n            const ctx = this.ctx;\n\n            if (ctx.setLineDash !== undefined) {\n              ctx.setLineDash(dashArray);\n              ctx.lineDashOffset = dashPhase;\n            }\n          }\n\n          setRenderingIntent(intent) {}\n\n          setFlatness(flatness) {}\n\n          setGState(states) {\n            for (let i = 0, ii = states.length; i < ii; i++) {\n              const state = states[i];\n              const key = state[0];\n              const value = state[1];\n\n              switch (key) {\n                case \"LW\":\n                  this.setLineWidth(value);\n                  break;\n\n                case \"LC\":\n                  this.setLineCap(value);\n                  break;\n\n                case \"LJ\":\n                  this.setLineJoin(value);\n                  break;\n\n                case \"ML\":\n                  this.setMiterLimit(value);\n                  break;\n\n                case \"D\":\n                  this.setDash(value[0], value[1]);\n                  break;\n\n                case \"RI\":\n                  this.setRenderingIntent(value);\n                  break;\n\n                case \"FL\":\n                  this.setFlatness(value);\n                  break;\n\n                case \"Font\":\n                  this.setFont(value[0], value[1]);\n                  break;\n\n                case \"CA\":\n                  this.current.strokeAlpha = state[1];\n                  break;\n\n                case \"ca\":\n                  this.current.fillAlpha = state[1];\n                  this.ctx.globalAlpha = state[1];\n                  break;\n\n                case \"BM\":\n                  this.ctx.globalCompositeOperation = value;\n                  break;\n\n                case \"SMask\":\n                  this.current.activeSMask = value ? this.tempSMask : null;\n                  this.tempSMask = null;\n                  this.checkSMaskState();\n                  break;\n\n                case \"TR\":\n                  this.current.transferMaps = value;\n              }\n            }\n          }\n\n          checkSMaskState() {\n            const inSMaskMode = !!this.suspendedCtx;\n\n            if (this.current.activeSMask && !inSMaskMode) {\n              this.beginSMaskMode();\n            } else if (!this.current.activeSMask && inSMaskMode) {\n              this.endSMaskMode();\n            }\n          }\n\n          beginSMaskMode() {\n            if (this.suspendedCtx) {\n              throw new Error(\"beginSMaskMode called while already in smask mode\");\n            }\n\n            const drawnWidth = this.ctx.canvas.width;\n            const drawnHeight = this.ctx.canvas.height;\n            const cacheId = \"smaskGroupAt\" + this.groupLevel;\n            const scratchCanvas = this.cachedCanvases.getCanvas(cacheId, drawnWidth, drawnHeight, true);\n            this.suspendedCtx = this.ctx;\n            this.ctx = scratchCanvas.context;\n            const ctx = this.ctx;\n            ctx.setTransform.apply(ctx, this.suspendedCtx.mozCurrentTransform);\n            copyCtxState(this.suspendedCtx, ctx);\n            mirrorContextOperations(ctx, this.suspendedCtx);\n            this.setGState([[\"BM\", \"source-over\"], [\"ca\", 1], [\"CA\", 1]]);\n          }\n\n          endSMaskMode() {\n            if (!this.suspendedCtx) {\n              throw new Error(\"endSMaskMode called while not in smask mode\");\n            }\n\n            this.ctx._removeMirroring();\n\n            copyCtxState(this.ctx, this.suspendedCtx);\n            this.ctx = this.suspendedCtx;\n            this.current.activeSMask = null;\n            this.suspendedCtx = null;\n          }\n\n          compose(dirtyBox) {\n            if (!this.current.activeSMask) {\n              return;\n            }\n\n            if (!dirtyBox) {\n              dirtyBox = [0, 0, this.ctx.canvas.width, this.ctx.canvas.height];\n            } else {\n              dirtyBox[0] = Math.floor(dirtyBox[0]);\n              dirtyBox[1] = Math.floor(dirtyBox[1]);\n              dirtyBox[2] = Math.ceil(dirtyBox[2]);\n              dirtyBox[3] = Math.ceil(dirtyBox[3]);\n            }\n\n            const smask = this.current.activeSMask;\n            const suspendedCtx = this.suspendedCtx;\n            composeSMask(suspendedCtx, smask, this.ctx, dirtyBox);\n            this.ctx.save();\n            this.ctx.setTransform(1, 0, 0, 1, 0, 0);\n            this.ctx.clearRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\n            this.ctx.restore();\n          }\n\n          save() {\n            this.ctx.save();\n            const old = this.current;\n            this.stateStack.push(old);\n            this.current = old.clone();\n          }\n\n          restore() {\n            if (this.stateStack.length === 0 && this.current.activeSMask) {\n              this.endSMaskMode();\n            }\n\n            if (this.stateStack.length !== 0) {\n              this.current = this.stateStack.pop();\n              this.ctx.restore();\n              this.checkSMaskState();\n              this.pendingClip = null;\n              this._cachedGetSinglePixelWidth = null;\n            }\n          }\n\n          transform(a, b, c, d, e, f) {\n            this.ctx.transform(a, b, c, d, e, f);\n            this._cachedGetSinglePixelWidth = null;\n          }\n\n          constructPath(ops, args) {\n            const ctx = this.ctx;\n            const current = this.current;\n            let x = current.x,\n                y = current.y;\n            let startX, startY;\n\n            for (let i = 0, j = 0, ii = ops.length; i < ii; i++) {\n              switch (ops[i] | 0) {\n                case _util.OPS.rectangle:\n                  x = args[j++];\n                  y = args[j++];\n                  const width = args[j++];\n                  const height = args[j++];\n                  const xw = x + width;\n                  const yh = y + height;\n                  ctx.moveTo(x, y);\n\n                  if (width === 0 || height === 0) {\n                    ctx.lineTo(xw, yh);\n                  } else {\n                    ctx.lineTo(xw, y);\n                    ctx.lineTo(xw, yh);\n                    ctx.lineTo(x, yh);\n                  }\n\n                  current.updatePathMinMax(ctx.mozCurrentTransform, x, y);\n                  current.updatePathMinMax(ctx.mozCurrentTransform, xw, yh);\n                  ctx.closePath();\n                  break;\n\n                case _util.OPS.moveTo:\n                  x = args[j++];\n                  y = args[j++];\n                  ctx.moveTo(x, y);\n                  current.updatePathMinMax(ctx.mozCurrentTransform, x, y);\n                  break;\n\n                case _util.OPS.lineTo:\n                  x = args[j++];\n                  y = args[j++];\n                  ctx.lineTo(x, y);\n                  current.updatePathMinMax(ctx.mozCurrentTransform, x, y);\n                  break;\n\n                case _util.OPS.curveTo:\n                  startX = x;\n                  startY = y;\n                  x = args[j + 4];\n                  y = args[j + 5];\n                  ctx.bezierCurveTo(args[j], args[j + 1], args[j + 2], args[j + 3], x, y);\n                  current.updateCurvePathMinMax(ctx.mozCurrentTransform, startX, startY, args[j], args[j + 1], args[j + 2], args[j + 3], x, y);\n                  j += 6;\n                  break;\n\n                case _util.OPS.curveTo2:\n                  startX = x;\n                  startY = y;\n                  ctx.bezierCurveTo(x, y, args[j], args[j + 1], args[j + 2], args[j + 3]);\n                  current.updateCurvePathMinMax(ctx.mozCurrentTransform, startX, startY, x, y, args[j], args[j + 1], args[j + 2], args[j + 3]);\n                  x = args[j + 2];\n                  y = args[j + 3];\n                  j += 4;\n                  break;\n\n                case _util.OPS.curveTo3:\n                  startX = x;\n                  startY = y;\n                  x = args[j + 2];\n                  y = args[j + 3];\n                  ctx.bezierCurveTo(args[j], args[j + 1], x, y, x, y);\n                  current.updateCurvePathMinMax(ctx.mozCurrentTransform, startX, startY, args[j], args[j + 1], x, y, x, y);\n                  j += 4;\n                  break;\n\n                case _util.OPS.closePath:\n                  ctx.closePath();\n                  break;\n              }\n            }\n\n            current.setCurrentPoint(x, y);\n          }\n\n          closePath() {\n            this.ctx.closePath();\n          }\n\n          stroke(consumePath) {\n            consumePath = typeof consumePath !== \"undefined\" ? consumePath : true;\n            const ctx = this.ctx;\n            const strokeColor = this.current.strokeColor;\n            ctx.globalAlpha = this.current.strokeAlpha;\n\n            if (this.contentVisible) {\n              if (typeof strokeColor === \"object\" && strokeColor?.getPattern) {\n                const lineWidth = this.getSinglePixelWidth();\n                ctx.save();\n                ctx.strokeStyle = strokeColor.getPattern(ctx, this, ctx.mozCurrentTransformInverse, _pattern_helper.PathType.STROKE);\n                ctx.lineWidth = Math.max(lineWidth, this.current.lineWidth);\n                ctx.stroke();\n                ctx.restore();\n              } else {\n                const lineWidth = this.getSinglePixelWidth();\n\n                if (lineWidth < 0 && -lineWidth >= this.current.lineWidth) {\n                  ctx.save();\n                  ctx.resetTransform();\n                  ctx.lineWidth = Math.round(this._combinedScaleFactor);\n                  ctx.stroke();\n                  ctx.restore();\n                } else {\n                  ctx.lineWidth = Math.max(lineWidth, this.current.lineWidth);\n                  ctx.stroke();\n                }\n              }\n            }\n\n            if (consumePath) {\n              this.consumePath(this.current.getClippedPathBoundingBox());\n            }\n\n            ctx.globalAlpha = this.current.fillAlpha;\n          }\n\n          closeStroke() {\n            this.closePath();\n            this.stroke();\n          }\n\n          fill(consumePath) {\n            consumePath = typeof consumePath !== \"undefined\" ? consumePath : true;\n            const ctx = this.ctx;\n            const fillColor = this.current.fillColor;\n            const isPatternFill = this.current.patternFill;\n            let needRestore = false;\n\n            if (isPatternFill) {\n              ctx.save();\n              ctx.fillStyle = fillColor.getPattern(ctx, this, ctx.mozCurrentTransformInverse, _pattern_helper.PathType.FILL);\n              needRestore = true;\n            }\n\n            const intersect = this.current.getClippedPathBoundingBox();\n\n            if (this.contentVisible && intersect !== null) {\n              if (this.pendingEOFill) {\n                ctx.fill(\"evenodd\");\n                this.pendingEOFill = false;\n              } else {\n                ctx.fill();\n              }\n            }\n\n            if (needRestore) {\n              ctx.restore();\n            }\n\n            if (consumePath) {\n              this.consumePath(intersect);\n            }\n          }\n\n          eoFill() {\n            this.pendingEOFill = true;\n            this.fill();\n          }\n\n          fillStroke() {\n            this.fill(false);\n            this.stroke(false);\n            this.consumePath();\n          }\n\n          eoFillStroke() {\n            this.pendingEOFill = true;\n            this.fillStroke();\n          }\n\n          closeFillStroke() {\n            this.closePath();\n            this.fillStroke();\n          }\n\n          closeEOFillStroke() {\n            this.pendingEOFill = true;\n            this.closePath();\n            this.fillStroke();\n          }\n\n          endPath() {\n            this.consumePath();\n          }\n\n          clip() {\n            this.pendingClip = NORMAL_CLIP;\n          }\n\n          eoClip() {\n            this.pendingClip = EO_CLIP;\n          }\n\n          beginText() {\n            this.current.textMatrix = _util.IDENTITY_MATRIX;\n            this.current.textMatrixScale = 1;\n            this.current.x = this.current.lineX = 0;\n            this.current.y = this.current.lineY = 0;\n          }\n\n          endText() {\n            const paths = this.pendingTextPaths;\n            const ctx = this.ctx;\n\n            if (paths === undefined) {\n              ctx.beginPath();\n              return;\n            }\n\n            ctx.save();\n            ctx.beginPath();\n\n            for (let i = 0; i < paths.length; i++) {\n              const path = paths[i];\n              ctx.setTransform.apply(ctx, path.transform);\n              ctx.translate(path.x, path.y);\n              path.addToPath(ctx, path.fontSize);\n            }\n\n            ctx.restore();\n            ctx.clip();\n            ctx.beginPath();\n            delete this.pendingTextPaths;\n          }\n\n          setCharSpacing(spacing) {\n            this.current.charSpacing = spacing;\n          }\n\n          setWordSpacing(spacing) {\n            this.current.wordSpacing = spacing;\n          }\n\n          setHScale(scale) {\n            this.current.textHScale = scale / 100;\n          }\n\n          setLeading(leading) {\n            this.current.leading = -leading;\n          }\n\n          setFont(fontRefName, size) {\n            const fontObj = this.commonObjs.get(fontRefName);\n            const current = this.current;\n\n            if (!fontObj) {\n              throw new Error(`Can't find font for ${fontRefName}`);\n            }\n\n            current.fontMatrix = fontObj.fontMatrix || _util.FONT_IDENTITY_MATRIX;\n\n            if (current.fontMatrix[0] === 0 || current.fontMatrix[3] === 0) {\n              (0, _util.warn)(\"Invalid font matrix for font \" + fontRefName);\n            }\n\n            if (size < 0) {\n              size = -size;\n              current.fontDirection = -1;\n            } else {\n              current.fontDirection = 1;\n            }\n\n            this.current.font = fontObj;\n            this.current.fontSize = size;\n\n            if (fontObj.isType3Font) {\n              return;\n            }\n\n            const name = fontObj.loadedName || \"sans-serif\";\n            let bold = \"normal\";\n\n            if (fontObj.black) {\n              bold = \"900\";\n            } else if (fontObj.bold) {\n              bold = \"bold\";\n            }\n\n            const italic = fontObj.italic ? \"italic\" : \"normal\";\n            const typeface = `\"${name}\", ${fontObj.fallbackName}`;\n            let browserFontSize = size;\n\n            if (size < MIN_FONT_SIZE) {\n              browserFontSize = MIN_FONT_SIZE;\n            } else if (size > MAX_FONT_SIZE) {\n              browserFontSize = MAX_FONT_SIZE;\n            }\n\n            this.current.fontSizeScale = size / browserFontSize;\n            this.ctx.font = `${italic} ${bold} ${browserFontSize}px ${typeface}`;\n          }\n\n          setTextRenderingMode(mode) {\n            this.current.textRenderingMode = mode;\n          }\n\n          setTextRise(rise) {\n            this.current.textRise = rise;\n          }\n\n          moveText(x, y) {\n            this.current.x = this.current.lineX += x;\n            this.current.y = this.current.lineY += y;\n          }\n\n          setLeadingMoveText(x, y) {\n            this.setLeading(-y);\n            this.moveText(x, y);\n          }\n\n          setTextMatrix(a, b, c, d, e, f) {\n            this.current.textMatrix = [a, b, c, d, e, f];\n            this.current.textMatrixScale = Math.hypot(a, b);\n            this.current.x = this.current.lineX = 0;\n            this.current.y = this.current.lineY = 0;\n          }\n\n          nextLine() {\n            this.moveText(0, this.current.leading);\n          }\n\n          paintChar(character, x, y, patternTransform, resetLineWidthToOne) {\n            const ctx = this.ctx;\n            const current = this.current;\n            const font = current.font;\n            const textRenderingMode = current.textRenderingMode;\n            const fontSize = current.fontSize / current.fontSizeScale;\n            const fillStrokeMode = textRenderingMode & _util.TextRenderingMode.FILL_STROKE_MASK;\n            const isAddToPathSet = !!(textRenderingMode & _util.TextRenderingMode.ADD_TO_PATH_FLAG);\n            const patternFill = current.patternFill && !font.missingFile;\n            let addToPath;\n\n            if (font.disableFontFace || isAddToPathSet || patternFill) {\n              addToPath = font.getPathGenerator(this.commonObjs, character);\n            }\n\n            if (font.disableFontFace || patternFill) {\n              ctx.save();\n              ctx.translate(x, y);\n              ctx.beginPath();\n              addToPath(ctx, fontSize);\n\n              if (patternTransform) {\n                ctx.setTransform.apply(ctx, patternTransform);\n              }\n\n              if (fillStrokeMode === _util.TextRenderingMode.FILL || fillStrokeMode === _util.TextRenderingMode.FILL_STROKE) {\n                ctx.fill();\n              }\n\n              if (fillStrokeMode === _util.TextRenderingMode.STROKE || fillStrokeMode === _util.TextRenderingMode.FILL_STROKE) {\n                if (resetLineWidthToOne) {\n                  ctx.resetTransform();\n                  ctx.lineWidth = Math.round(this._combinedScaleFactor);\n                }\n\n                ctx.stroke();\n              }\n\n              ctx.restore();\n            } else {\n              if (fillStrokeMode === _util.TextRenderingMode.FILL || fillStrokeMode === _util.TextRenderingMode.FILL_STROKE) {\n                ctx.fillText(character, x, y);\n              }\n\n              if (fillStrokeMode === _util.TextRenderingMode.STROKE || fillStrokeMode === _util.TextRenderingMode.FILL_STROKE) {\n                if (resetLineWidthToOne) {\n                  ctx.save();\n                  ctx.moveTo(x, y);\n                  ctx.resetTransform();\n                  ctx.lineWidth = Math.round(this._combinedScaleFactor);\n                  ctx.strokeText(character, 0, 0);\n                  ctx.restore();\n                } else {\n                  ctx.strokeText(character, x, y);\n                }\n              }\n            }\n\n            if (isAddToPathSet) {\n              const paths = this.pendingTextPaths || (this.pendingTextPaths = []);\n              paths.push({\n                transform: ctx.mozCurrentTransform,\n                x,\n                y,\n                fontSize,\n                addToPath\n              });\n            }\n          }\n\n          get isFontSubpixelAAEnabled() {\n            const {\n              context: ctx\n            } = this.cachedCanvases.getCanvas(\"isFontSubpixelAAEnabled\", 10, 10);\n            ctx.scale(1.5, 1);\n            ctx.fillText(\"I\", 0, 10);\n            const data = ctx.getImageData(0, 0, 10, 10).data;\n            let enabled = false;\n\n            for (let i = 3; i < data.length; i += 4) {\n              if (data[i] > 0 && data[i] < 255) {\n                enabled = true;\n                break;\n              }\n            }\n\n            return (0, _util.shadow)(this, \"isFontSubpixelAAEnabled\", enabled);\n          }\n\n          showText(glyphs) {\n            const current = this.current;\n            const font = current.font;\n\n            if (font.isType3Font) {\n              return this.showType3Text(glyphs);\n            }\n\n            const fontSize = current.fontSize;\n\n            if (fontSize === 0) {\n              return undefined;\n            }\n\n            const ctx = this.ctx;\n            const fontSizeScale = current.fontSizeScale;\n            const charSpacing = current.charSpacing;\n            const wordSpacing = current.wordSpacing;\n            const fontDirection = current.fontDirection;\n            const textHScale = current.textHScale * fontDirection;\n            const glyphsLength = glyphs.length;\n            const vertical = font.vertical;\n            const spacingDir = vertical ? 1 : -1;\n            const defaultVMetrics = font.defaultVMetrics;\n            const widthAdvanceScale = fontSize * current.fontMatrix[0];\n            const simpleFillText = current.textRenderingMode === _util.TextRenderingMode.FILL && !font.disableFontFace && !current.patternFill;\n            ctx.save();\n            ctx.transform.apply(ctx, current.textMatrix);\n            ctx.translate(current.x, current.y + current.textRise);\n\n            if (fontDirection > 0) {\n              ctx.scale(textHScale, -1);\n            } else {\n              ctx.scale(textHScale, 1);\n            }\n\n            let patternTransform;\n\n            if (current.patternFill) {\n              ctx.save();\n              const pattern = current.fillColor.getPattern(ctx, this, ctx.mozCurrentTransformInverse, _pattern_helper.PathType.FILL);\n              patternTransform = ctx.mozCurrentTransform;\n              ctx.restore();\n              ctx.fillStyle = pattern;\n            }\n\n            let lineWidth = current.lineWidth;\n            let resetLineWidthToOne = false;\n            const scale = current.textMatrixScale;\n\n            if (scale === 0 || lineWidth === 0) {\n              const fillStrokeMode = current.textRenderingMode & _util.TextRenderingMode.FILL_STROKE_MASK;\n\n              if (fillStrokeMode === _util.TextRenderingMode.STROKE || fillStrokeMode === _util.TextRenderingMode.FILL_STROKE) {\n                this._cachedGetSinglePixelWidth = null;\n                lineWidth = this.getSinglePixelWidth();\n                resetLineWidthToOne = lineWidth < 0;\n              }\n            } else {\n              lineWidth /= scale;\n            }\n\n            if (fontSizeScale !== 1.0) {\n              ctx.scale(fontSizeScale, fontSizeScale);\n              lineWidth /= fontSizeScale;\n            }\n\n            ctx.lineWidth = lineWidth;\n            let x = 0,\n                i;\n\n            for (i = 0; i < glyphsLength; ++i) {\n              const glyph = glyphs[i];\n\n              if ((0, _util.isNum)(glyph)) {\n                x += spacingDir * glyph * fontSize / 1000;\n                continue;\n              }\n\n              let restoreNeeded = false;\n              const spacing = (glyph.isSpace ? wordSpacing : 0) + charSpacing;\n              const character = glyph.fontChar;\n              const accent = glyph.accent;\n              let scaledX, scaledY;\n              let width = glyph.width;\n\n              if (vertical) {\n                const vmetric = glyph.vmetric || defaultVMetrics;\n                const vx = -(glyph.vmetric ? vmetric[1] : width * 0.5) * widthAdvanceScale;\n                const vy = vmetric[2] * widthAdvanceScale;\n                width = vmetric ? -vmetric[0] : width;\n                scaledX = vx / fontSizeScale;\n                scaledY = (x + vy) / fontSizeScale;\n              } else {\n                scaledX = x / fontSizeScale;\n                scaledY = 0;\n              }\n\n              if (font.remeasure && width > 0) {\n                const measuredWidth = ctx.measureText(character).width * 1000 / fontSize * fontSizeScale;\n\n                if (width < measuredWidth && this.isFontSubpixelAAEnabled) {\n                  const characterScaleX = width / measuredWidth;\n                  restoreNeeded = true;\n                  ctx.save();\n                  ctx.scale(characterScaleX, 1);\n                  scaledX /= characterScaleX;\n                } else if (width !== measuredWidth) {\n                  scaledX += (width - measuredWidth) / 2000 * fontSize / fontSizeScale;\n                }\n              }\n\n              if (this.contentVisible && (glyph.isInFont || font.missingFile)) {\n                if (simpleFillText && !accent) {\n                  ctx.fillText(character, scaledX, scaledY);\n                } else {\n                  this.paintChar(character, scaledX, scaledY, patternTransform, resetLineWidthToOne);\n\n                  if (accent) {\n                    const scaledAccentX = scaledX + fontSize * accent.offset.x / fontSizeScale;\n                    const scaledAccentY = scaledY - fontSize * accent.offset.y / fontSizeScale;\n                    this.paintChar(accent.fontChar, scaledAccentX, scaledAccentY, patternTransform, resetLineWidthToOne);\n                  }\n                }\n              }\n\n              let charWidth;\n\n              if (vertical) {\n                charWidth = width * widthAdvanceScale - spacing * fontDirection;\n              } else {\n                charWidth = width * widthAdvanceScale + spacing * fontDirection;\n              }\n\n              x += charWidth;\n\n              if (restoreNeeded) {\n                ctx.restore();\n              }\n            }\n\n            if (vertical) {\n              current.y -= x;\n            } else {\n              current.x += x * textHScale;\n            }\n\n            ctx.restore();\n            this.compose();\n            return undefined;\n          }\n\n          showType3Text(glyphs) {\n            const ctx = this.ctx;\n            const current = this.current;\n            const font = current.font;\n            const fontSize = current.fontSize;\n            const fontDirection = current.fontDirection;\n            const spacingDir = font.vertical ? 1 : -1;\n            const charSpacing = current.charSpacing;\n            const wordSpacing = current.wordSpacing;\n            const textHScale = current.textHScale * fontDirection;\n            const fontMatrix = current.fontMatrix || _util.FONT_IDENTITY_MATRIX;\n            const glyphsLength = glyphs.length;\n            const isTextInvisible = current.textRenderingMode === _util.TextRenderingMode.INVISIBLE;\n            let i, glyph, width, spacingLength;\n\n            if (isTextInvisible || fontSize === 0) {\n              return;\n            }\n\n            this._cachedGetSinglePixelWidth = null;\n            ctx.save();\n            ctx.transform.apply(ctx, current.textMatrix);\n            ctx.translate(current.x, current.y);\n            ctx.scale(textHScale, fontDirection);\n\n            for (i = 0; i < glyphsLength; ++i) {\n              glyph = glyphs[i];\n\n              if ((0, _util.isNum)(glyph)) {\n                spacingLength = spacingDir * glyph * fontSize / 1000;\n                this.ctx.translate(spacingLength, 0);\n                current.x += spacingLength * textHScale;\n                continue;\n              }\n\n              const spacing = (glyph.isSpace ? wordSpacing : 0) + charSpacing;\n              const operatorList = font.charProcOperatorList[glyph.operatorListId];\n\n              if (!operatorList) {\n                (0, _util.warn)(`Type3 character \"${glyph.operatorListId}\" is not available.`);\n                continue;\n              }\n\n              if (this.contentVisible) {\n                this.processingType3 = glyph;\n                this.save();\n                ctx.scale(fontSize, fontSize);\n                ctx.transform.apply(ctx, fontMatrix);\n                this.executeOperatorList(operatorList);\n                this.restore();\n              }\n\n              const transformed = _util.Util.applyTransform([glyph.width, 0], fontMatrix);\n\n              width = transformed[0] * fontSize + spacing;\n              ctx.translate(width, 0);\n              current.x += width * textHScale;\n            }\n\n            ctx.restore();\n            this.processingType3 = null;\n          }\n\n          setCharWidth(xWidth, yWidth) {}\n\n          setCharWidthAndBounds(xWidth, yWidth, llx, lly, urx, ury) {\n            this.ctx.rect(llx, lly, urx - llx, ury - lly);\n            this.clip();\n            this.endPath();\n          }\n\n          getColorN_Pattern(IR) {\n            let pattern;\n\n            if (IR[0] === \"TilingPattern\") {\n              const color = IR[1];\n              const baseTransform = this.baseTransform || this.ctx.mozCurrentTransform.slice();\n              const canvasGraphicsFactory = {\n                createCanvasGraphics: ctx => {\n                  return new CanvasGraphics(ctx, this.commonObjs, this.objs, this.canvasFactory);\n                }\n              };\n              pattern = new _pattern_helper.TilingPattern(IR, color, this.ctx, canvasGraphicsFactory, baseTransform);\n            } else {\n              pattern = this._getPattern(IR[1], IR[2]);\n            }\n\n            return pattern;\n          }\n\n          setStrokeColorN() {\n            this.current.strokeColor = this.getColorN_Pattern(arguments);\n          }\n\n          setFillColorN() {\n            this.current.fillColor = this.getColorN_Pattern(arguments);\n            this.current.patternFill = true;\n          }\n\n          setStrokeRGBColor(r, g, b) {\n            const color = _util.Util.makeHexColor(r, g, b);\n\n            this.ctx.strokeStyle = color;\n            this.current.strokeColor = color;\n          }\n\n          setFillRGBColor(r, g, b) {\n            const color = _util.Util.makeHexColor(r, g, b);\n\n            this.ctx.fillStyle = color;\n            this.current.fillColor = color;\n            this.current.patternFill = false;\n          }\n\n          _getPattern(objId) {\n            let matrix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n            let pattern;\n\n            if (this.cachedPatterns.has(objId)) {\n              pattern = this.cachedPatterns.get(objId);\n            } else {\n              pattern = (0, _pattern_helper.getShadingPattern)(this.objs.get(objId));\n              this.cachedPatterns.set(objId, pattern);\n            }\n\n            if (matrix) {\n              pattern.matrix = matrix;\n            }\n\n            return pattern;\n          }\n\n          shadingFill(objId) {\n            if (!this.contentVisible) {\n              return;\n            }\n\n            const ctx = this.ctx;\n            this.save();\n\n            const pattern = this._getPattern(objId);\n\n            ctx.fillStyle = pattern.getPattern(ctx, this, ctx.mozCurrentTransformInverse, _pattern_helper.PathType.SHADING);\n            const inv = ctx.mozCurrentTransformInverse;\n\n            if (inv) {\n              const canvas = ctx.canvas;\n              const width = canvas.width;\n              const height = canvas.height;\n\n              const bl = _util.Util.applyTransform([0, 0], inv);\n\n              const br = _util.Util.applyTransform([0, height], inv);\n\n              const ul = _util.Util.applyTransform([width, 0], inv);\n\n              const ur = _util.Util.applyTransform([width, height], inv);\n\n              const x0 = Math.min(bl[0], br[0], ul[0], ur[0]);\n              const y0 = Math.min(bl[1], br[1], ul[1], ur[1]);\n              const x1 = Math.max(bl[0], br[0], ul[0], ur[0]);\n              const y1 = Math.max(bl[1], br[1], ul[1], ur[1]);\n              this.ctx.fillRect(x0, y0, x1 - x0, y1 - y0);\n            } else {\n              this.ctx.fillRect(-1e10, -1e10, 2e10, 2e10);\n            }\n\n            this.compose(this.current.getClippedPathBoundingBox());\n            this.restore();\n          }\n\n          beginInlineImage() {\n            (0, _util.unreachable)(\"Should not call beginInlineImage\");\n          }\n\n          beginImageData() {\n            (0, _util.unreachable)(\"Should not call beginImageData\");\n          }\n\n          paintFormXObjectBegin(matrix, bbox) {\n            if (!this.contentVisible) {\n              return;\n            }\n\n            this.save();\n            this.baseTransformStack.push(this.baseTransform);\n\n            if (Array.isArray(matrix) && matrix.length === 6) {\n              this.transform.apply(this, matrix);\n            }\n\n            this.baseTransform = this.ctx.mozCurrentTransform;\n\n            if (bbox) {\n              const width = bbox[2] - bbox[0];\n              const height = bbox[3] - bbox[1];\n              this.ctx.rect(bbox[0], bbox[1], width, height);\n              this.current.updatePathMinMax(this.ctx.mozCurrentTransform, bbox[0], bbox[1]);\n              this.current.updatePathMinMax(this.ctx.mozCurrentTransform, bbox[2], bbox[3]);\n              this.clip();\n              this.endPath();\n            }\n          }\n\n          paintFormXObjectEnd() {\n            if (!this.contentVisible) {\n              return;\n            }\n\n            this.restore();\n            this.baseTransform = this.baseTransformStack.pop();\n          }\n\n          beginGroup(group) {\n            if (!this.contentVisible) {\n              return;\n            }\n\n            this.save();\n            const suspendedCtx = this.suspendedCtx;\n\n            if (this.current.activeSMask) {\n              this.suspendedCtx = null;\n              this.current.activeSMask = null;\n            }\n\n            const currentCtx = this.ctx;\n\n            if (!group.isolated) {\n              (0, _util.info)(\"TODO: Support non-isolated groups.\");\n            }\n\n            if (group.knockout) {\n              (0, _util.warn)(\"Knockout groups not supported.\");\n            }\n\n            const currentTransform = currentCtx.mozCurrentTransform;\n\n            if (group.matrix) {\n              currentCtx.transform.apply(currentCtx, group.matrix);\n            }\n\n            if (!group.bbox) {\n              throw new Error(\"Bounding box is required.\");\n            }\n\n            let bounds = _util.Util.getAxialAlignedBoundingBox(group.bbox, currentCtx.mozCurrentTransform);\n\n            const canvasBounds = [0, 0, currentCtx.canvas.width, currentCtx.canvas.height];\n            bounds = _util.Util.intersect(bounds, canvasBounds) || [0, 0, 0, 0];\n            const offsetX = Math.floor(bounds[0]);\n            const offsetY = Math.floor(bounds[1]);\n            let drawnWidth = Math.max(Math.ceil(bounds[2]) - offsetX, 1);\n            let drawnHeight = Math.max(Math.ceil(bounds[3]) - offsetY, 1);\n            let scaleX = 1,\n                scaleY = 1;\n\n            if (drawnWidth > MAX_GROUP_SIZE) {\n              scaleX = drawnWidth / MAX_GROUP_SIZE;\n              drawnWidth = MAX_GROUP_SIZE;\n            }\n\n            if (drawnHeight > MAX_GROUP_SIZE) {\n              scaleY = drawnHeight / MAX_GROUP_SIZE;\n              drawnHeight = MAX_GROUP_SIZE;\n            }\n\n            this.current.startNewPathAndClipBox([0, 0, drawnWidth, drawnHeight]);\n            let cacheId = \"groupAt\" + this.groupLevel;\n\n            if (group.smask) {\n              cacheId += \"_smask_\" + this.smaskCounter++ % 2;\n            }\n\n            const scratchCanvas = this.cachedCanvases.getCanvas(cacheId, drawnWidth, drawnHeight, true);\n            const groupCtx = scratchCanvas.context;\n            groupCtx.scale(1 / scaleX, 1 / scaleY);\n            groupCtx.translate(-offsetX, -offsetY);\n            groupCtx.transform.apply(groupCtx, currentTransform);\n\n            if (group.smask) {\n              this.smaskStack.push({\n                canvas: scratchCanvas.canvas,\n                context: groupCtx,\n                offsetX,\n                offsetY,\n                scaleX,\n                scaleY,\n                subtype: group.smask.subtype,\n                backdrop: group.smask.backdrop,\n                transferMap: group.smask.transferMap || null,\n                startTransformInverse: null\n              });\n            } else {\n              currentCtx.setTransform(1, 0, 0, 1, 0, 0);\n              currentCtx.translate(offsetX, offsetY);\n              currentCtx.scale(scaleX, scaleY);\n              currentCtx.save();\n            }\n\n            copyCtxState(currentCtx, groupCtx);\n            this.ctx = groupCtx;\n            this.setGState([[\"BM\", \"source-over\"], [\"ca\", 1], [\"CA\", 1]]);\n            this.groupStack.push({\n              ctx: currentCtx,\n              suspendedCtx\n            });\n            this.groupLevel++;\n          }\n\n          endGroup(group) {\n            if (!this.contentVisible) {\n              return;\n            }\n\n            this.groupLevel--;\n            const groupCtx = this.ctx;\n            const {\n              ctx,\n              suspendedCtx\n            } = this.groupStack.pop();\n            this.ctx = ctx;\n            this.ctx.imageSmoothingEnabled = false;\n\n            if (suspendedCtx) {\n              this.suspendedCtx = suspendedCtx;\n            }\n\n            if (group.smask) {\n              this.tempSMask = this.smaskStack.pop();\n              this.restore();\n            } else {\n              this.ctx.restore();\n              const currentMtx = this.ctx.mozCurrentTransform;\n              this.restore();\n              this.ctx.save();\n              this.ctx.setTransform.apply(this.ctx, currentMtx);\n\n              const dirtyBox = _util.Util.getAxialAlignedBoundingBox([0, 0, groupCtx.canvas.width, groupCtx.canvas.height], currentMtx);\n\n              this.ctx.drawImage(groupCtx.canvas, 0, 0);\n              this.ctx.restore();\n              this.compose(dirtyBox);\n            }\n          }\n\n          beginAnnotations() {\n            this.save();\n\n            if (this.baseTransform) {\n              this.ctx.setTransform.apply(this.ctx, this.baseTransform);\n            }\n          }\n\n          endAnnotations() {\n            this.restore();\n          }\n\n          beginAnnotation(id, rect, transform, matrix, hasOwnCanvas) {\n            this.save();\n\n            if (Array.isArray(rect) && rect.length === 4) {\n              const width = rect[2] - rect[0];\n              const height = rect[3] - rect[1];\n\n              if (hasOwnCanvas && this.annotationCanvasMap) {\n                transform = transform.slice();\n                transform[4] -= rect[0];\n                transform[5] -= rect[1];\n                rect = rect.slice();\n                rect[0] = rect[1] = 0;\n                rect[2] = width;\n                rect[3] = height;\n\n                const [scaleX, scaleY] = _util.Util.singularValueDecompose2dScale(this.ctx.mozCurrentTransform);\n\n                const {\n                  viewportScale\n                } = this;\n                const canvasWidth = Math.ceil(width * this.outputScaleX * viewportScale);\n                const canvasHeight = Math.ceil(height * this.outputScaleY * viewportScale);\n                this.annotationCanvas = this.canvasFactory.create(canvasWidth, canvasHeight);\n                const {\n                  canvas,\n                  context\n                } = this.annotationCanvas;\n                canvas.style.width = `calc(${width}px * var(--viewport-scale-factor))`;\n                canvas.style.height = `calc(${height}px * var(--viewport-scale-factor))`;\n                this.annotationCanvasMap.set(id, canvas);\n                this.annotationCanvas.savedCtx = this.ctx;\n                this.ctx = context;\n                this.ctx.setTransform(scaleX, 0, 0, -scaleY, 0, height * scaleY);\n                addContextCurrentTransform(this.ctx);\n                resetCtxToDefault(this.ctx);\n              } else {\n                resetCtxToDefault(this.ctx);\n                this.ctx.rect(rect[0], rect[1], width, height);\n                this.clip();\n                this.endPath();\n              }\n            }\n\n            this.current = new CanvasExtraState(this.ctx.canvas.width, this.ctx.canvas.height);\n            this.transform.apply(this, transform);\n            this.transform.apply(this, matrix);\n          }\n\n          endAnnotation() {\n            if (this.annotationCanvas) {\n              this.ctx = this.annotationCanvas.savedCtx;\n              delete this.annotationCanvas.savedCtx;\n              delete this.annotationCanvas;\n            }\n\n            this.restore();\n          }\n\n          paintImageMaskXObject(img) {\n            if (!this.contentVisible) {\n              return;\n            }\n\n            const ctx = this.ctx;\n            const width = img.width,\n                  height = img.height;\n            const glyph = this.processingType3;\n\n            if (COMPILE_TYPE3_GLYPHS && glyph && glyph.compiled === undefined) {\n              if (width <= MAX_SIZE_TO_COMPILE && height <= MAX_SIZE_TO_COMPILE) {\n                glyph.compiled = compileType3Glyph({\n                  data: img.data,\n                  width,\n                  height\n                });\n              } else {\n                glyph.compiled = null;\n              }\n            }\n\n            if (glyph?.compiled) {\n              glyph.compiled(ctx);\n              return;\n            }\n\n            const mask = this._createMaskCanvas(img);\n\n            const maskCanvas = mask.canvas;\n            ctx.save();\n            ctx.setTransform(1, 0, 0, 1, 0, 0);\n            ctx.drawImage(maskCanvas, mask.offsetX, mask.offsetY);\n            ctx.restore();\n            this.compose();\n          }\n\n          paintImageMaskXObjectRepeat(imgData, scaleX) {\n            let skewX = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n            let skewY = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n            let scaleY = arguments.length > 4 ? arguments[4] : undefined;\n            let positions = arguments.length > 5 ? arguments[5] : undefined;\n\n            if (!this.contentVisible) {\n              return;\n            }\n\n            const ctx = this.ctx;\n            ctx.save();\n            const currentTransform = ctx.mozCurrentTransform;\n            ctx.transform(scaleX, skewX, skewY, scaleY, 0, 0);\n\n            const mask = this._createMaskCanvas(imgData);\n\n            ctx.setTransform(1, 0, 0, 1, 0, 0);\n\n            for (let i = 0, ii = positions.length; i < ii; i += 2) {\n              const trans = _util.Util.transform(currentTransform, [scaleX, skewX, skewY, scaleY, positions[i], positions[i + 1]]);\n\n              const [x, y] = _util.Util.applyTransform([0, 0], trans);\n\n              ctx.drawImage(mask.canvas, x, y);\n            }\n\n            ctx.restore();\n            this.compose();\n          }\n\n          paintImageMaskXObjectGroup(images) {\n            if (!this.contentVisible) {\n              return;\n            }\n\n            const ctx = this.ctx;\n            const fillColor = this.current.fillColor;\n            const isPatternFill = this.current.patternFill;\n\n            for (let i = 0, ii = images.length; i < ii; i++) {\n              const image = images[i];\n              const width = image.width,\n                    height = image.height;\n              const maskCanvas = this.cachedCanvases.getCanvas(\"maskCanvas\", width, height);\n              const maskCtx = maskCanvas.context;\n              maskCtx.save();\n              putBinaryImageMask(maskCtx, image);\n              maskCtx.globalCompositeOperation = \"source-in\";\n              maskCtx.fillStyle = isPatternFill ? fillColor.getPattern(maskCtx, this, ctx.mozCurrentTransformInverse, _pattern_helper.PathType.FILL) : fillColor;\n              maskCtx.fillRect(0, 0, width, height);\n              maskCtx.restore();\n              ctx.save();\n              ctx.transform.apply(ctx, image.transform);\n              ctx.scale(1, -1);\n              ctx.drawImage(maskCanvas.canvas, 0, 0, width, height, 0, -1, 1, 1);\n              ctx.restore();\n            }\n\n            this.compose();\n          }\n\n          paintImageXObject(objId) {\n            if (!this.contentVisible) {\n              return;\n            }\n\n            const imgData = objId.startsWith(\"g_\") ? this.commonObjs.get(objId) : this.objs.get(objId);\n\n            if (!imgData) {\n              (0, _util.warn)(\"Dependent image isn't ready yet\");\n              return;\n            }\n\n            this.paintInlineImageXObject(imgData);\n          }\n\n          paintImageXObjectRepeat(objId, scaleX, scaleY, positions) {\n            if (!this.contentVisible) {\n              return;\n            }\n\n            const imgData = objId.startsWith(\"g_\") ? this.commonObjs.get(objId) : this.objs.get(objId);\n\n            if (!imgData) {\n              (0, _util.warn)(\"Dependent image isn't ready yet\");\n              return;\n            }\n\n            const width = imgData.width;\n            const height = imgData.height;\n            const map = [];\n\n            for (let i = 0, ii = positions.length; i < ii; i += 2) {\n              map.push({\n                transform: [scaleX, 0, 0, scaleY, positions[i], positions[i + 1]],\n                x: 0,\n                y: 0,\n                w: width,\n                h: height\n              });\n            }\n\n            this.paintInlineImageXObjectGroup(imgData, map);\n          }\n\n          paintInlineImageXObject(imgData) {\n            if (!this.contentVisible) {\n              return;\n            }\n\n            const width = imgData.width;\n            const height = imgData.height;\n            const ctx = this.ctx;\n            this.save();\n            ctx.scale(1 / width, -1 / height);\n            let imgToPaint;\n\n            if (typeof HTMLElement === \"function\" && imgData instanceof HTMLElement || !imgData.data) {\n              imgToPaint = imgData;\n            } else {\n              const tmpCanvas = this.cachedCanvases.getCanvas(\"inlineImage\", width, height);\n              const tmpCtx = tmpCanvas.context;\n              putBinaryImageData(tmpCtx, imgData, this.current.transferMaps);\n              imgToPaint = tmpCanvas.canvas;\n            }\n\n            const scaled = this._scaleImage(imgToPaint, ctx.mozCurrentTransformInverse);\n\n            ctx.imageSmoothingEnabled = getImageSmoothingEnabled(ctx.mozCurrentTransform, imgData.interpolate);\n            ctx.drawImage(scaled.img, 0, 0, scaled.paintWidth, scaled.paintHeight, 0, -height, width, height);\n\n            if (this.imageLayer) {\n              const position = this.getCanvasPosition(0, -height);\n              this.imageLayer.appendImage({\n                imgData,\n                left: position[0],\n                top: position[1],\n                width: width / ctx.mozCurrentTransformInverse[0],\n                height: height / ctx.mozCurrentTransformInverse[3]\n              });\n            }\n\n            this.compose();\n            this.restore();\n          }\n\n          paintInlineImageXObjectGroup(imgData, map) {\n            if (!this.contentVisible) {\n              return;\n            }\n\n            const ctx = this.ctx;\n            const w = imgData.width;\n            const h = imgData.height;\n            const tmpCanvas = this.cachedCanvases.getCanvas(\"inlineImage\", w, h);\n            const tmpCtx = tmpCanvas.context;\n            putBinaryImageData(tmpCtx, imgData, this.current.transferMaps);\n\n            for (let i = 0, ii = map.length; i < ii; i++) {\n              const entry = map[i];\n              ctx.save();\n              ctx.transform.apply(ctx, entry.transform);\n              ctx.scale(1, -1);\n              ctx.drawImage(tmpCanvas.canvas, entry.x, entry.y, entry.w, entry.h, 0, -1, 1, 1);\n\n              if (this.imageLayer) {\n                const position = this.getCanvasPosition(entry.x, entry.y);\n                this.imageLayer.appendImage({\n                  imgData,\n                  left: position[0],\n                  top: position[1],\n                  width: w,\n                  height: h\n                });\n              }\n\n              ctx.restore();\n            }\n\n            this.compose();\n          }\n\n          paintSolidColorImageMask() {\n            if (!this.contentVisible) {\n              return;\n            }\n\n            this.ctx.fillRect(0, 0, 1, 1);\n            this.compose();\n          }\n\n          markPoint(tag) {}\n\n          markPointProps(tag, properties) {}\n\n          beginMarkedContent(tag) {\n            this.markedContentStack.push({\n              visible: true\n            });\n          }\n\n          beginMarkedContentProps(tag, properties) {\n            if (tag === \"OC\") {\n              this.markedContentStack.push({\n                visible: this.optionalContentConfig.isVisible(properties)\n              });\n            } else {\n              this.markedContentStack.push({\n                visible: true\n              });\n            }\n\n            this.contentVisible = this.isContentVisible();\n          }\n\n          endMarkedContent() {\n            this.markedContentStack.pop();\n            this.contentVisible = this.isContentVisible();\n          }\n\n          beginCompat() {}\n\n          endCompat() {}\n\n          consumePath(clipBox) {\n            if (this.pendingClip) {\n              this.current.updateClipFromPath();\n            }\n\n            if (!this.pendingClip) {\n              this.compose(clipBox);\n            }\n\n            const ctx = this.ctx;\n\n            if (this.pendingClip) {\n              if (this.pendingClip === EO_CLIP) {\n                ctx.clip(\"evenodd\");\n              } else {\n                ctx.clip();\n              }\n\n              this.pendingClip = null;\n            }\n\n            this.current.startNewPathAndClipBox(this.current.clipBox);\n            ctx.beginPath();\n          }\n\n          getSinglePixelWidth() {\n            if (this._cachedGetSinglePixelWidth === null) {\n              const m = this.ctx.mozCurrentTransform;\n              const absDet = Math.abs(m[0] * m[3] - m[2] * m[1]);\n              const sqNorm1 = m[0] ** 2 + m[2] ** 2;\n              const sqNorm2 = m[1] ** 2 + m[3] ** 2;\n              const pixelHeight = Math.sqrt(Math.max(sqNorm1, sqNorm2)) / absDet;\n\n              if (sqNorm1 !== sqNorm2 && this._combinedScaleFactor * pixelHeight > 1) {\n                this._cachedGetSinglePixelWidth = -(this._combinedScaleFactor * pixelHeight);\n              } else if (absDet > Number.EPSILON) {\n                this._cachedGetSinglePixelWidth = pixelHeight;\n              } else {\n                this._cachedGetSinglePixelWidth = 1;\n              }\n            }\n\n            return this._cachedGetSinglePixelWidth;\n          }\n\n          getCanvasPosition(x, y) {\n            const transform = this.ctx.mozCurrentTransform;\n            return [transform[0] * x + transform[2] * y + transform[4], transform[1] * x + transform[3] * y + transform[5]];\n          }\n\n          isContentVisible() {\n            for (let i = this.markedContentStack.length - 1; i >= 0; i--) {\n              if (!this.markedContentStack[i].visible) {\n                return false;\n              }\n            }\n\n            return true;\n          }\n\n        }\n\n        exports.CanvasGraphics = CanvasGraphics;\n\n        for (const op in _util.OPS) {\n          if (CanvasGraphics.prototype[op] !== undefined) {\n            CanvasGraphics.prototype[_util.OPS[op]] = CanvasGraphics.prototype[op];\n          }\n        }\n        /***/\n\n      },\n      /* 11 */\n\n      /***/\n      (__unused_webpack_module, exports, __w_pdfjs_require__) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.TilingPattern = exports.PathType = void 0;\n        exports.getShadingPattern = getShadingPattern;\n\n        var _util = __w_pdfjs_require__(2);\n\n        const PathType = {\n          FILL: \"Fill\",\n          STROKE: \"Stroke\",\n          SHADING: \"Shading\"\n        };\n        exports.PathType = PathType;\n\n        function applyBoundingBox(ctx, bbox) {\n          if (!bbox || typeof Path2D === \"undefined\") {\n            return;\n          }\n\n          const width = bbox[2] - bbox[0];\n          const height = bbox[3] - bbox[1];\n          const region = new Path2D();\n          region.rect(bbox[0], bbox[1], width, height);\n          ctx.clip(region);\n        }\n\n        class BaseShadingPattern {\n          constructor() {\n            if (this.constructor === BaseShadingPattern) {\n              (0, _util.unreachable)(\"Cannot initialize BaseShadingPattern.\");\n            }\n          }\n\n          getPattern() {\n            (0, _util.unreachable)(\"Abstract method `getPattern` called.\");\n          }\n\n        }\n\n        class RadialAxialShadingPattern extends BaseShadingPattern {\n          constructor(IR) {\n            super();\n            this._type = IR[1];\n            this._bbox = IR[2];\n            this._colorStops = IR[3];\n            this._p0 = IR[4];\n            this._p1 = IR[5];\n            this._r0 = IR[6];\n            this._r1 = IR[7];\n            this.matrix = null;\n          }\n\n          _createGradient(ctx) {\n            let grad;\n\n            if (this._type === \"axial\") {\n              grad = ctx.createLinearGradient(this._p0[0], this._p0[1], this._p1[0], this._p1[1]);\n            } else if (this._type === \"radial\") {\n              grad = ctx.createRadialGradient(this._p0[0], this._p0[1], this._r0, this._p1[0], this._p1[1], this._r1);\n            }\n\n            for (const colorStop of this._colorStops) {\n              grad.addColorStop(colorStop[0], colorStop[1]);\n            }\n\n            return grad;\n          }\n\n          getPattern(ctx, owner, inverse, pathType) {\n            let pattern;\n\n            if (pathType === PathType.STROKE || pathType === PathType.FILL) {\n              const ownerBBox = owner.current.getClippedPathBoundingBox(pathType, ctx.mozCurrentTransform) || [0, 0, 0, 0];\n              const width = Math.ceil(ownerBBox[2] - ownerBBox[0]) || 1;\n              const height = Math.ceil(ownerBBox[3] - ownerBBox[1]) || 1;\n              const tmpCanvas = owner.cachedCanvases.getCanvas(\"pattern\", width, height, true);\n              const tmpCtx = tmpCanvas.context;\n              tmpCtx.clearRect(0, 0, tmpCtx.canvas.width, tmpCtx.canvas.height);\n              tmpCtx.beginPath();\n              tmpCtx.rect(0, 0, tmpCtx.canvas.width, tmpCtx.canvas.height);\n              tmpCtx.translate(-ownerBBox[0], -ownerBBox[1]);\n              inverse = _util.Util.transform(inverse, [1, 0, 0, 1, ownerBBox[0], ownerBBox[1]]);\n              tmpCtx.transform.apply(tmpCtx, owner.baseTransform);\n\n              if (this.matrix) {\n                tmpCtx.transform.apply(tmpCtx, this.matrix);\n              }\n\n              applyBoundingBox(tmpCtx, this._bbox);\n              tmpCtx.fillStyle = this._createGradient(tmpCtx);\n              tmpCtx.fill();\n              pattern = ctx.createPattern(tmpCanvas.canvas, \"no-repeat\");\n              const domMatrix = new DOMMatrix(inverse);\n\n              try {\n                pattern.setTransform(domMatrix);\n              } catch (ex) {\n                (0, _util.warn)(`RadialAxialShadingPattern.getPattern: \"${ex?.message}\".`);\n              }\n            } else {\n              applyBoundingBox(ctx, this._bbox);\n              pattern = this._createGradient(ctx);\n            }\n\n            return pattern;\n          }\n\n        }\n\n        function drawTriangle(data, context, p1, p2, p3, c1, c2, c3) {\n          const coords = context.coords,\n                colors = context.colors;\n          const bytes = data.data,\n                rowSize = data.width * 4;\n          let tmp;\n\n          if (coords[p1 + 1] > coords[p2 + 1]) {\n            tmp = p1;\n            p1 = p2;\n            p2 = tmp;\n            tmp = c1;\n            c1 = c2;\n            c2 = tmp;\n          }\n\n          if (coords[p2 + 1] > coords[p3 + 1]) {\n            tmp = p2;\n            p2 = p3;\n            p3 = tmp;\n            tmp = c2;\n            c2 = c3;\n            c3 = tmp;\n          }\n\n          if (coords[p1 + 1] > coords[p2 + 1]) {\n            tmp = p1;\n            p1 = p2;\n            p2 = tmp;\n            tmp = c1;\n            c1 = c2;\n            c2 = tmp;\n          }\n\n          const x1 = (coords[p1] + context.offsetX) * context.scaleX;\n          const y1 = (coords[p1 + 1] + context.offsetY) * context.scaleY;\n          const x2 = (coords[p2] + context.offsetX) * context.scaleX;\n          const y2 = (coords[p2 + 1] + context.offsetY) * context.scaleY;\n          const x3 = (coords[p3] + context.offsetX) * context.scaleX;\n          const y3 = (coords[p3 + 1] + context.offsetY) * context.scaleY;\n\n          if (y1 >= y3) {\n            return;\n          }\n\n          const c1r = colors[c1],\n                c1g = colors[c1 + 1],\n                c1b = colors[c1 + 2];\n          const c2r = colors[c2],\n                c2g = colors[c2 + 1],\n                c2b = colors[c2 + 2];\n          const c3r = colors[c3],\n                c3g = colors[c3 + 1],\n                c3b = colors[c3 + 2];\n          const minY = Math.round(y1),\n                maxY = Math.round(y3);\n          let xa, car, cag, cab;\n          let xb, cbr, cbg, cbb;\n\n          for (let y = minY; y <= maxY; y++) {\n            if (y < y2) {\n              let k;\n\n              if (y < y1) {\n                k = 0;\n              } else {\n                k = (y1 - y) / (y1 - y2);\n              }\n\n              xa = x1 - (x1 - x2) * k;\n              car = c1r - (c1r - c2r) * k;\n              cag = c1g - (c1g - c2g) * k;\n              cab = c1b - (c1b - c2b) * k;\n            } else {\n              let k;\n\n              if (y > y3) {\n                k = 1;\n              } else if (y2 === y3) {\n                k = 0;\n              } else {\n                k = (y2 - y) / (y2 - y3);\n              }\n\n              xa = x2 - (x2 - x3) * k;\n              car = c2r - (c2r - c3r) * k;\n              cag = c2g - (c2g - c3g) * k;\n              cab = c2b - (c2b - c3b) * k;\n            }\n\n            let k;\n\n            if (y < y1) {\n              k = 0;\n            } else if (y > y3) {\n              k = 1;\n            } else {\n              k = (y1 - y) / (y1 - y3);\n            }\n\n            xb = x1 - (x1 - x3) * k;\n            cbr = c1r - (c1r - c3r) * k;\n            cbg = c1g - (c1g - c3g) * k;\n            cbb = c1b - (c1b - c3b) * k;\n            const x1_ = Math.round(Math.min(xa, xb));\n            const x2_ = Math.round(Math.max(xa, xb));\n            let j = rowSize * y + x1_ * 4;\n\n            for (let x = x1_; x <= x2_; x++) {\n              k = (xa - x) / (xa - xb);\n\n              if (k < 0) {\n                k = 0;\n              } else if (k > 1) {\n                k = 1;\n              }\n\n              bytes[j++] = car - (car - cbr) * k | 0;\n              bytes[j++] = cag - (cag - cbg) * k | 0;\n              bytes[j++] = cab - (cab - cbb) * k | 0;\n              bytes[j++] = 255;\n            }\n          }\n        }\n\n        function drawFigure(data, figure, context) {\n          const ps = figure.coords;\n          const cs = figure.colors;\n          let i, ii;\n\n          switch (figure.type) {\n            case \"lattice\":\n              const verticesPerRow = figure.verticesPerRow;\n              const rows = Math.floor(ps.length / verticesPerRow) - 1;\n              const cols = verticesPerRow - 1;\n\n              for (i = 0; i < rows; i++) {\n                let q = i * verticesPerRow;\n\n                for (let j = 0; j < cols; j++, q++) {\n                  drawTriangle(data, context, ps[q], ps[q + 1], ps[q + verticesPerRow], cs[q], cs[q + 1], cs[q + verticesPerRow]);\n                  drawTriangle(data, context, ps[q + verticesPerRow + 1], ps[q + 1], ps[q + verticesPerRow], cs[q + verticesPerRow + 1], cs[q + 1], cs[q + verticesPerRow]);\n                }\n              }\n\n              break;\n\n            case \"triangles\":\n              for (i = 0, ii = ps.length; i < ii; i += 3) {\n                drawTriangle(data, context, ps[i], ps[i + 1], ps[i + 2], cs[i], cs[i + 1], cs[i + 2]);\n              }\n\n              break;\n\n            default:\n              throw new Error(\"illegal figure\");\n          }\n        }\n\n        class MeshShadingPattern extends BaseShadingPattern {\n          constructor(IR) {\n            super();\n            this._coords = IR[2];\n            this._colors = IR[3];\n            this._figures = IR[4];\n            this._bounds = IR[5];\n            this._bbox = IR[7];\n            this._background = IR[8];\n            this.matrix = null;\n          }\n\n          _createMeshCanvas(combinedScale, backgroundColor, cachedCanvases) {\n            const EXPECTED_SCALE = 1.1;\n            const MAX_PATTERN_SIZE = 3000;\n            const BORDER_SIZE = 2;\n            const offsetX = Math.floor(this._bounds[0]);\n            const offsetY = Math.floor(this._bounds[1]);\n            const boundsWidth = Math.ceil(this._bounds[2]) - offsetX;\n            const boundsHeight = Math.ceil(this._bounds[3]) - offsetY;\n            const width = Math.min(Math.ceil(Math.abs(boundsWidth * combinedScale[0] * EXPECTED_SCALE)), MAX_PATTERN_SIZE);\n            const height = Math.min(Math.ceil(Math.abs(boundsHeight * combinedScale[1] * EXPECTED_SCALE)), MAX_PATTERN_SIZE);\n            const scaleX = boundsWidth / width;\n            const scaleY = boundsHeight / height;\n            const context = {\n              coords: this._coords,\n              colors: this._colors,\n              offsetX: -offsetX,\n              offsetY: -offsetY,\n              scaleX: 1 / scaleX,\n              scaleY: 1 / scaleY\n            };\n            const paddedWidth = width + BORDER_SIZE * 2;\n            const paddedHeight = height + BORDER_SIZE * 2;\n            const tmpCanvas = cachedCanvases.getCanvas(\"mesh\", paddedWidth, paddedHeight, false);\n            const tmpCtx = tmpCanvas.context;\n            const data = tmpCtx.createImageData(width, height);\n\n            if (backgroundColor) {\n              const bytes = data.data;\n\n              for (let i = 0, ii = bytes.length; i < ii; i += 4) {\n                bytes[i] = backgroundColor[0];\n                bytes[i + 1] = backgroundColor[1];\n                bytes[i + 2] = backgroundColor[2];\n                bytes[i + 3] = 255;\n              }\n            }\n\n            for (const figure of this._figures) {\n              drawFigure(data, figure, context);\n            }\n\n            tmpCtx.putImageData(data, BORDER_SIZE, BORDER_SIZE);\n            const canvas = tmpCanvas.canvas;\n            return {\n              canvas,\n              offsetX: offsetX - BORDER_SIZE * scaleX,\n              offsetY: offsetY - BORDER_SIZE * scaleY,\n              scaleX,\n              scaleY\n            };\n          }\n\n          getPattern(ctx, owner, inverse, pathType) {\n            applyBoundingBox(ctx, this._bbox);\n            let scale;\n\n            if (pathType === PathType.SHADING) {\n              scale = _util.Util.singularValueDecompose2dScale(ctx.mozCurrentTransform);\n            } else {\n              scale = _util.Util.singularValueDecompose2dScale(owner.baseTransform);\n\n              if (this.matrix) {\n                const matrixScale = _util.Util.singularValueDecompose2dScale(this.matrix);\n\n                scale = [scale[0] * matrixScale[0], scale[1] * matrixScale[1]];\n              }\n            }\n\n            const temporaryPatternCanvas = this._createMeshCanvas(scale, pathType === PathType.SHADING ? null : this._background, owner.cachedCanvases);\n\n            if (pathType !== PathType.SHADING) {\n              ctx.setTransform.apply(ctx, owner.baseTransform);\n\n              if (this.matrix) {\n                ctx.transform.apply(ctx, this.matrix);\n              }\n            }\n\n            ctx.translate(temporaryPatternCanvas.offsetX, temporaryPatternCanvas.offsetY);\n            ctx.scale(temporaryPatternCanvas.scaleX, temporaryPatternCanvas.scaleY);\n            return ctx.createPattern(temporaryPatternCanvas.canvas, \"no-repeat\");\n          }\n\n        }\n\n        class DummyShadingPattern extends BaseShadingPattern {\n          getPattern() {\n            return \"hotpink\";\n          }\n\n        }\n\n        function getShadingPattern(IR) {\n          switch (IR[0]) {\n            case \"RadialAxial\":\n              return new RadialAxialShadingPattern(IR);\n\n            case \"Mesh\":\n              return new MeshShadingPattern(IR);\n\n            case \"Dummy\":\n              return new DummyShadingPattern();\n          }\n\n          throw new Error(`Unknown IR type: ${IR[0]}`);\n        }\n\n        const PaintType = {\n          COLORED: 1,\n          UNCOLORED: 2\n        };\n\n        class TilingPattern {\n          static get MAX_PATTERN_SIZE() {\n            return (0, _util.shadow)(this, \"MAX_PATTERN_SIZE\", 3000);\n          }\n\n          constructor(IR, color, ctx, canvasGraphicsFactory, baseTransform) {\n            this.operatorList = IR[2];\n            this.matrix = IR[3] || [1, 0, 0, 1, 0, 0];\n            this.bbox = IR[4];\n            this.xstep = IR[5];\n            this.ystep = IR[6];\n            this.paintType = IR[7];\n            this.tilingType = IR[8];\n            this.color = color;\n            this.ctx = ctx;\n            this.canvasGraphicsFactory = canvasGraphicsFactory;\n            this.baseTransform = baseTransform;\n          }\n\n          createPatternCanvas(owner) {\n            const operatorList = this.operatorList;\n            const bbox = this.bbox;\n            const xstep = this.xstep;\n            const ystep = this.ystep;\n            const paintType = this.paintType;\n            const tilingType = this.tilingType;\n            const color = this.color;\n            const canvasGraphicsFactory = this.canvasGraphicsFactory;\n            (0, _util.info)(\"TilingType: \" + tilingType);\n            const x0 = bbox[0],\n                  y0 = bbox[1],\n                  x1 = bbox[2],\n                  y1 = bbox[3];\n\n            const matrixScale = _util.Util.singularValueDecompose2dScale(this.matrix);\n\n            const curMatrixScale = _util.Util.singularValueDecompose2dScale(this.baseTransform);\n\n            const combinedScale = [matrixScale[0] * curMatrixScale[0], matrixScale[1] * curMatrixScale[1]];\n            const dimx = this.getSizeAndScale(xstep, this.ctx.canvas.width, combinedScale[0]);\n            const dimy = this.getSizeAndScale(ystep, this.ctx.canvas.height, combinedScale[1]);\n            const tmpCanvas = owner.cachedCanvases.getCanvas(\"pattern\", dimx.size, dimy.size, true);\n            const tmpCtx = tmpCanvas.context;\n            const graphics = canvasGraphicsFactory.createCanvasGraphics(tmpCtx);\n            graphics.groupLevel = owner.groupLevel;\n            this.setFillAndStrokeStyleToContext(graphics, paintType, color);\n            let adjustedX0 = x0;\n            let adjustedY0 = y0;\n            let adjustedX1 = x1;\n            let adjustedY1 = y1;\n\n            if (x0 < 0) {\n              adjustedX0 = 0;\n              adjustedX1 += Math.abs(x0);\n            }\n\n            if (y0 < 0) {\n              adjustedY0 = 0;\n              adjustedY1 += Math.abs(y0);\n            }\n\n            tmpCtx.translate(-(dimx.scale * adjustedX0), -(dimy.scale * adjustedY0));\n            graphics.transform(dimx.scale, 0, 0, dimy.scale, 0, 0);\n            this.clipBbox(graphics, adjustedX0, adjustedY0, adjustedX1, adjustedY1);\n            graphics.baseTransform = graphics.ctx.mozCurrentTransform.slice();\n            graphics.executeOperatorList(operatorList);\n            graphics.endDrawing();\n            return {\n              canvas: tmpCanvas.canvas,\n              scaleX: dimx.scale,\n              scaleY: dimy.scale,\n              offsetX: adjustedX0,\n              offsetY: adjustedY0\n            };\n          }\n\n          getSizeAndScale(step, realOutputSize, scale) {\n            step = Math.abs(step);\n            const maxSize = Math.max(TilingPattern.MAX_PATTERN_SIZE, realOutputSize);\n            let size = Math.ceil(step * scale);\n\n            if (size >= maxSize) {\n              size = maxSize;\n            } else {\n              scale = size / step;\n            }\n\n            return {\n              scale,\n              size\n            };\n          }\n\n          clipBbox(graphics, x0, y0, x1, y1) {\n            const bboxWidth = x1 - x0;\n            const bboxHeight = y1 - y0;\n            graphics.ctx.rect(x0, y0, bboxWidth, bboxHeight);\n            graphics.clip();\n            graphics.endPath();\n          }\n\n          setFillAndStrokeStyleToContext(graphics, paintType, color) {\n            const context = graphics.ctx,\n                  current = graphics.current;\n\n            switch (paintType) {\n              case PaintType.COLORED:\n                const ctx = this.ctx;\n                context.fillStyle = ctx.fillStyle;\n                context.strokeStyle = ctx.strokeStyle;\n                current.fillColor = ctx.fillStyle;\n                current.strokeColor = ctx.strokeStyle;\n                break;\n\n              case PaintType.UNCOLORED:\n                const cssColor = _util.Util.makeHexColor(color[0], color[1], color[2]);\n\n                context.fillStyle = cssColor;\n                context.strokeStyle = cssColor;\n                current.fillColor = cssColor;\n                current.strokeColor = cssColor;\n                break;\n\n              default:\n                throw new _util.FormatError(`Unsupported paint type: ${paintType}`);\n            }\n          }\n\n          getPattern(ctx, owner, inverse, pathType) {\n            let matrix = inverse;\n\n            if (pathType !== PathType.SHADING) {\n              matrix = _util.Util.transform(matrix, owner.baseTransform);\n\n              if (this.matrix) {\n                matrix = _util.Util.transform(matrix, this.matrix);\n              }\n            }\n\n            const temporaryPatternCanvas = this.createPatternCanvas(owner);\n            let domMatrix = new DOMMatrix(matrix);\n            domMatrix = domMatrix.translate(temporaryPatternCanvas.offsetX, temporaryPatternCanvas.offsetY);\n            domMatrix = domMatrix.scale(1 / temporaryPatternCanvas.scaleX, 1 / temporaryPatternCanvas.scaleY);\n            const pattern = ctx.createPattern(temporaryPatternCanvas.canvas, \"repeat\");\n\n            try {\n              pattern.setTransform(domMatrix);\n            } catch (ex) {\n              (0, _util.warn)(`TilingPattern.getPattern: \"${ex?.message}\".`);\n            }\n\n            return pattern;\n          }\n\n        }\n\n        exports.TilingPattern = TilingPattern;\n        /***/\n      },\n      /* 12 */\n\n      /***/\n      (__unused_webpack_module, exports) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.GlobalWorkerOptions = void 0;\n        const GlobalWorkerOptions = Object.create(null);\n        exports.GlobalWorkerOptions = GlobalWorkerOptions;\n        GlobalWorkerOptions.workerPort = GlobalWorkerOptions.workerPort === undefined ? null : GlobalWorkerOptions.workerPort;\n        GlobalWorkerOptions.workerSrc = GlobalWorkerOptions.workerSrc === undefined ? \"\" : GlobalWorkerOptions.workerSrc;\n        /***/\n      },\n      /* 13 */\n\n      /***/\n      (__unused_webpack_module, exports, __w_pdfjs_require__) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.MessageHandler = void 0;\n\n        var _util = __w_pdfjs_require__(2);\n\n        const CallbackKind = {\n          UNKNOWN: 0,\n          DATA: 1,\n          ERROR: 2\n        };\n        const StreamKind = {\n          UNKNOWN: 0,\n          CANCEL: 1,\n          CANCEL_COMPLETE: 2,\n          CLOSE: 3,\n          ENQUEUE: 4,\n          ERROR: 5,\n          PULL: 6,\n          PULL_COMPLETE: 7,\n          START_COMPLETE: 8\n        };\n\n        function wrapReason(reason) {\n          if (!(reason instanceof Error || typeof reason === \"object\" && reason !== null)) {\n            (0, _util.warn)('wrapReason: Expected \"reason\" to be a (possibly cloned) Error.');\n            return reason;\n          }\n\n          switch (reason.name) {\n            case \"AbortException\":\n              return new _util.AbortException(reason.message);\n\n            case \"MissingPDFException\":\n              return new _util.MissingPDFException(reason.message);\n\n            case \"PasswordException\":\n              return new _util.PasswordException(reason.message, reason.code);\n\n            case \"UnexpectedResponseException\":\n              return new _util.UnexpectedResponseException(reason.message, reason.status);\n\n            case \"UnknownErrorException\":\n              return new _util.UnknownErrorException(reason.message, reason.details);\n\n            default:\n              return new _util.UnknownErrorException(reason.message, reason.toString());\n          }\n        }\n\n        class MessageHandler {\n          constructor(sourceName, targetName, comObj) {\n            this.sourceName = sourceName;\n            this.targetName = targetName;\n            this.comObj = comObj;\n            this.callbackId = 1;\n            this.streamId = 1;\n            this.streamSinks = Object.create(null);\n            this.streamControllers = Object.create(null);\n            this.callbackCapabilities = Object.create(null);\n            this.actionHandler = Object.create(null);\n\n            this._onComObjOnMessage = event => {\n              const data = event.data;\n\n              if (data.targetName !== this.sourceName) {\n                return;\n              }\n\n              if (data.stream) {\n                this._processStreamMessage(data);\n\n                return;\n              }\n\n              if (data.callback) {\n                const callbackId = data.callbackId;\n                const capability = this.callbackCapabilities[callbackId];\n\n                if (!capability) {\n                  throw new Error(`Cannot resolve callback ${callbackId}`);\n                }\n\n                delete this.callbackCapabilities[callbackId];\n\n                if (data.callback === CallbackKind.DATA) {\n                  capability.resolve(data.data);\n                } else if (data.callback === CallbackKind.ERROR) {\n                  capability.reject(wrapReason(data.reason));\n                } else {\n                  throw new Error(\"Unexpected callback case\");\n                }\n\n                return;\n              }\n\n              const action = this.actionHandler[data.action];\n\n              if (!action) {\n                throw new Error(`Unknown action from worker: ${data.action}`);\n              }\n\n              if (data.callbackId) {\n                const cbSourceName = this.sourceName;\n                const cbTargetName = data.sourceName;\n                new Promise(function (resolve) {\n                  resolve(action(data.data));\n                }).then(function (result) {\n                  comObj.postMessage({\n                    sourceName: cbSourceName,\n                    targetName: cbTargetName,\n                    callback: CallbackKind.DATA,\n                    callbackId: data.callbackId,\n                    data: result\n                  });\n                }, function (reason) {\n                  comObj.postMessage({\n                    sourceName: cbSourceName,\n                    targetName: cbTargetName,\n                    callback: CallbackKind.ERROR,\n                    callbackId: data.callbackId,\n                    reason: wrapReason(reason)\n                  });\n                });\n                return;\n              }\n\n              if (data.streamId) {\n                this._createStreamSink(data);\n\n                return;\n              }\n\n              action(data.data);\n            };\n\n            comObj.addEventListener(\"message\", this._onComObjOnMessage);\n          }\n\n          on(actionName, handler) {\n            const ah = this.actionHandler;\n\n            if (ah[actionName]) {\n              throw new Error(`There is already an actionName called \"${actionName}\"`);\n            }\n\n            ah[actionName] = handler;\n          }\n\n          send(actionName, data, transfers) {\n            this.comObj.postMessage({\n              sourceName: this.sourceName,\n              targetName: this.targetName,\n              action: actionName,\n              data\n            }, transfers);\n          }\n\n          sendWithPromise(actionName, data, transfers) {\n            const callbackId = this.callbackId++;\n            const capability = (0, _util.createPromiseCapability)();\n            this.callbackCapabilities[callbackId] = capability;\n\n            try {\n              this.comObj.postMessage({\n                sourceName: this.sourceName,\n                targetName: this.targetName,\n                action: actionName,\n                callbackId,\n                data\n              }, transfers);\n            } catch (ex) {\n              capability.reject(ex);\n            }\n\n            return capability.promise;\n          }\n\n          sendWithStream(actionName, data, queueingStrategy, transfers) {\n            const streamId = this.streamId++,\n                  sourceName = this.sourceName,\n                  targetName = this.targetName,\n                  comObj = this.comObj;\n            return new ReadableStream({\n              start: controller => {\n                const startCapability = (0, _util.createPromiseCapability)();\n                this.streamControllers[streamId] = {\n                  controller,\n                  startCall: startCapability,\n                  pullCall: null,\n                  cancelCall: null,\n                  isClosed: false\n                };\n                comObj.postMessage({\n                  sourceName,\n                  targetName,\n                  action: actionName,\n                  streamId,\n                  data,\n                  desiredSize: controller.desiredSize\n                }, transfers);\n                return startCapability.promise;\n              },\n              pull: controller => {\n                const pullCapability = (0, _util.createPromiseCapability)();\n                this.streamControllers[streamId].pullCall = pullCapability;\n                comObj.postMessage({\n                  sourceName,\n                  targetName,\n                  stream: StreamKind.PULL,\n                  streamId,\n                  desiredSize: controller.desiredSize\n                });\n                return pullCapability.promise;\n              },\n              cancel: reason => {\n                (0, _util.assert)(reason instanceof Error, \"cancel must have a valid reason\");\n                const cancelCapability = (0, _util.createPromiseCapability)();\n                this.streamControllers[streamId].cancelCall = cancelCapability;\n                this.streamControllers[streamId].isClosed = true;\n                comObj.postMessage({\n                  sourceName,\n                  targetName,\n                  stream: StreamKind.CANCEL,\n                  streamId,\n                  reason: wrapReason(reason)\n                });\n                return cancelCapability.promise;\n              }\n            }, queueingStrategy);\n          }\n\n          _createStreamSink(data) {\n            const streamId = data.streamId,\n                  sourceName = this.sourceName,\n                  targetName = data.sourceName,\n                  comObj = this.comObj;\n            const self = this,\n                  action = this.actionHandler[data.action];\n            const streamSink = {\n              enqueue(chunk) {\n                let size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n                let transfers = arguments.length > 2 ? arguments[2] : undefined;\n\n                if (this.isCancelled) {\n                  return;\n                }\n\n                const lastDesiredSize = this.desiredSize;\n                this.desiredSize -= size;\n\n                if (lastDesiredSize > 0 && this.desiredSize <= 0) {\n                  this.sinkCapability = (0, _util.createPromiseCapability)();\n                  this.ready = this.sinkCapability.promise;\n                }\n\n                comObj.postMessage({\n                  sourceName,\n                  targetName,\n                  stream: StreamKind.ENQUEUE,\n                  streamId,\n                  chunk\n                }, transfers);\n              },\n\n              close() {\n                if (this.isCancelled) {\n                  return;\n                }\n\n                this.isCancelled = true;\n                comObj.postMessage({\n                  sourceName,\n                  targetName,\n                  stream: StreamKind.CLOSE,\n                  streamId\n                });\n                delete self.streamSinks[streamId];\n              },\n\n              error(reason) {\n                (0, _util.assert)(reason instanceof Error, \"error must have a valid reason\");\n\n                if (this.isCancelled) {\n                  return;\n                }\n\n                this.isCancelled = true;\n                comObj.postMessage({\n                  sourceName,\n                  targetName,\n                  stream: StreamKind.ERROR,\n                  streamId,\n                  reason: wrapReason(reason)\n                });\n              },\n\n              sinkCapability: (0, _util.createPromiseCapability)(),\n              onPull: null,\n              onCancel: null,\n              isCancelled: false,\n              desiredSize: data.desiredSize,\n              ready: null\n            };\n            streamSink.sinkCapability.resolve();\n            streamSink.ready = streamSink.sinkCapability.promise;\n            this.streamSinks[streamId] = streamSink;\n            new Promise(function (resolve) {\n              resolve(action(data.data, streamSink));\n            }).then(function () {\n              comObj.postMessage({\n                sourceName,\n                targetName,\n                stream: StreamKind.START_COMPLETE,\n                streamId,\n                success: true\n              });\n            }, function (reason) {\n              comObj.postMessage({\n                sourceName,\n                targetName,\n                stream: StreamKind.START_COMPLETE,\n                streamId,\n                reason: wrapReason(reason)\n              });\n            });\n          }\n\n          _processStreamMessage(data) {\n            const streamId = data.streamId,\n                  sourceName = this.sourceName,\n                  targetName = data.sourceName,\n                  comObj = this.comObj;\n            const streamController = this.streamControllers[streamId],\n                  streamSink = this.streamSinks[streamId];\n\n            switch (data.stream) {\n              case StreamKind.START_COMPLETE:\n                if (data.success) {\n                  streamController.startCall.resolve();\n                } else {\n                  streamController.startCall.reject(wrapReason(data.reason));\n                }\n\n                break;\n\n              case StreamKind.PULL_COMPLETE:\n                if (data.success) {\n                  streamController.pullCall.resolve();\n                } else {\n                  streamController.pullCall.reject(wrapReason(data.reason));\n                }\n\n                break;\n\n              case StreamKind.PULL:\n                if (!streamSink) {\n                  comObj.postMessage({\n                    sourceName,\n                    targetName,\n                    stream: StreamKind.PULL_COMPLETE,\n                    streamId,\n                    success: true\n                  });\n                  break;\n                }\n\n                if (streamSink.desiredSize <= 0 && data.desiredSize > 0) {\n                  streamSink.sinkCapability.resolve();\n                }\n\n                streamSink.desiredSize = data.desiredSize;\n                new Promise(function (resolve) {\n                  resolve(streamSink.onPull && streamSink.onPull());\n                }).then(function () {\n                  comObj.postMessage({\n                    sourceName,\n                    targetName,\n                    stream: StreamKind.PULL_COMPLETE,\n                    streamId,\n                    success: true\n                  });\n                }, function (reason) {\n                  comObj.postMessage({\n                    sourceName,\n                    targetName,\n                    stream: StreamKind.PULL_COMPLETE,\n                    streamId,\n                    reason: wrapReason(reason)\n                  });\n                });\n                break;\n\n              case StreamKind.ENQUEUE:\n                (0, _util.assert)(streamController, \"enqueue should have stream controller\");\n\n                if (streamController.isClosed) {\n                  break;\n                }\n\n                streamController.controller.enqueue(data.chunk);\n                break;\n\n              case StreamKind.CLOSE:\n                (0, _util.assert)(streamController, \"close should have stream controller\");\n\n                if (streamController.isClosed) {\n                  break;\n                }\n\n                streamController.isClosed = true;\n                streamController.controller.close();\n\n                this._deleteStreamController(streamController, streamId);\n\n                break;\n\n              case StreamKind.ERROR:\n                (0, _util.assert)(streamController, \"error should have stream controller\");\n                streamController.controller.error(wrapReason(data.reason));\n\n                this._deleteStreamController(streamController, streamId);\n\n                break;\n\n              case StreamKind.CANCEL_COMPLETE:\n                if (data.success) {\n                  streamController.cancelCall.resolve();\n                } else {\n                  streamController.cancelCall.reject(wrapReason(data.reason));\n                }\n\n                this._deleteStreamController(streamController, streamId);\n\n                break;\n\n              case StreamKind.CANCEL:\n                if (!streamSink) {\n                  break;\n                }\n\n                new Promise(function (resolve) {\n                  resolve(streamSink.onCancel && streamSink.onCancel(wrapReason(data.reason)));\n                }).then(function () {\n                  comObj.postMessage({\n                    sourceName,\n                    targetName,\n                    stream: StreamKind.CANCEL_COMPLETE,\n                    streamId,\n                    success: true\n                  });\n                }, function (reason) {\n                  comObj.postMessage({\n                    sourceName,\n                    targetName,\n                    stream: StreamKind.CANCEL_COMPLETE,\n                    streamId,\n                    reason: wrapReason(reason)\n                  });\n                });\n                streamSink.sinkCapability.reject(wrapReason(data.reason));\n                streamSink.isCancelled = true;\n                delete this.streamSinks[streamId];\n                break;\n\n              default:\n                throw new Error(\"Unexpected stream case\");\n            }\n          }\n\n          async _deleteStreamController(streamController, streamId) {\n            await Promise.allSettled([streamController.startCall && streamController.startCall.promise, streamController.pullCall && streamController.pullCall.promise, streamController.cancelCall && streamController.cancelCall.promise]);\n            delete this.streamControllers[streamId];\n          }\n\n          destroy() {\n            this.comObj.removeEventListener(\"message\", this._onComObjOnMessage);\n          }\n\n        }\n\n        exports.MessageHandler = MessageHandler;\n        /***/\n      },\n      /* 14 */\n\n      /***/\n      (__unused_webpack_module, exports, __w_pdfjs_require__) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.Metadata = void 0;\n\n        var _util = __w_pdfjs_require__(2);\n\n        class Metadata {\n          #metadataMap;\n          #data;\n\n          constructor(_ref25) {\n            let {\n              parsedData,\n              rawData\n            } = _ref25;\n            this.#metadataMap = parsedData;\n            this.#data = rawData;\n          }\n\n          getRaw() {\n            return this.#data;\n          }\n\n          get(name) {\n            return this.#metadataMap.get(name) ?? null;\n          }\n\n          getAll() {\n            return (0, _util.objectFromMap)(this.#metadataMap);\n          }\n\n          has(name) {\n            return this.#metadataMap.has(name);\n          }\n\n        }\n\n        exports.Metadata = Metadata;\n        /***/\n      },\n      /* 15 */\n\n      /***/\n      (__unused_webpack_module, exports, __w_pdfjs_require__) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.OptionalContentConfig = void 0;\n\n        var _util = __w_pdfjs_require__(2);\n\n        class OptionalContentGroup {\n          constructor(name, intent) {\n            this.visible = true;\n            this.name = name;\n            this.intent = intent;\n          }\n\n        }\n\n        class OptionalContentConfig {\n          constructor(data) {\n            this.name = null;\n            this.creator = null;\n            this._order = null;\n            this._groups = new Map();\n\n            if (data === null) {\n              return;\n            }\n\n            this.name = data.name;\n            this.creator = data.creator;\n            this._order = data.order;\n\n            for (const group of data.groups) {\n              this._groups.set(group.id, new OptionalContentGroup(group.name, group.intent));\n            }\n\n            if (data.baseState === \"OFF\") {\n              for (const group of this._groups) {\n                group.visible = false;\n              }\n            }\n\n            for (const on of data.on) {\n              this._groups.get(on).visible = true;\n            }\n\n            for (const off of data.off) {\n              this._groups.get(off).visible = false;\n            }\n          }\n\n          _evaluateVisibilityExpression(array) {\n            const length = array.length;\n\n            if (length < 2) {\n              return true;\n            }\n\n            const operator = array[0];\n\n            for (let i = 1; i < length; i++) {\n              const element = array[i];\n              let state;\n\n              if (Array.isArray(element)) {\n                state = this._evaluateVisibilityExpression(element);\n              } else if (this._groups.has(element)) {\n                state = this._groups.get(element).visible;\n              } else {\n                (0, _util.warn)(`Optional content group not found: ${element}`);\n                return true;\n              }\n\n              switch (operator) {\n                case \"And\":\n                  if (!state) {\n                    return false;\n                  }\n\n                  break;\n\n                case \"Or\":\n                  if (state) {\n                    return true;\n                  }\n\n                  break;\n\n                case \"Not\":\n                  return !state;\n\n                default:\n                  return true;\n              }\n            }\n\n            return operator === \"And\";\n          }\n\n          isVisible(group) {\n            if (this._groups.size === 0) {\n              return true;\n            }\n\n            if (!group) {\n              (0, _util.warn)(\"Optional content group not defined.\");\n              return true;\n            }\n\n            if (group.type === \"OCG\") {\n              if (!this._groups.has(group.id)) {\n                (0, _util.warn)(`Optional content group not found: ${group.id}`);\n                return true;\n              }\n\n              return this._groups.get(group.id).visible;\n            } else if (group.type === \"OCMD\") {\n              if (group.expression) {\n                return this._evaluateVisibilityExpression(group.expression);\n              }\n\n              if (!group.policy || group.policy === \"AnyOn\") {\n                for (const id of group.ids) {\n                  if (!this._groups.has(id)) {\n                    (0, _util.warn)(`Optional content group not found: ${id}`);\n                    return true;\n                  }\n\n                  if (this._groups.get(id).visible) {\n                    return true;\n                  }\n                }\n\n                return false;\n              } else if (group.policy === \"AllOn\") {\n                for (const id of group.ids) {\n                  if (!this._groups.has(id)) {\n                    (0, _util.warn)(`Optional content group not found: ${id}`);\n                    return true;\n                  }\n\n                  if (!this._groups.get(id).visible) {\n                    return false;\n                  }\n                }\n\n                return true;\n              } else if (group.policy === \"AnyOff\") {\n                for (const id of group.ids) {\n                  if (!this._groups.has(id)) {\n                    (0, _util.warn)(`Optional content group not found: ${id}`);\n                    return true;\n                  }\n\n                  if (!this._groups.get(id).visible) {\n                    return true;\n                  }\n                }\n\n                return false;\n              } else if (group.policy === \"AllOff\") {\n                for (const id of group.ids) {\n                  if (!this._groups.has(id)) {\n                    (0, _util.warn)(`Optional content group not found: ${id}`);\n                    return true;\n                  }\n\n                  if (this._groups.get(id).visible) {\n                    return false;\n                  }\n                }\n\n                return true;\n              }\n\n              (0, _util.warn)(`Unknown optional content policy ${group.policy}.`);\n              return true;\n            }\n\n            (0, _util.warn)(`Unknown group type ${group.type}.`);\n            return true;\n          }\n\n          setVisibility(id) {\n            let visible = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n            if (!this._groups.has(id)) {\n              (0, _util.warn)(`Optional content group not found: ${id}`);\n              return;\n            }\n\n            this._groups.get(id).visible = !!visible;\n          }\n\n          getOrder() {\n            if (!this._groups.size) {\n              return null;\n            }\n\n            if (this._order) {\n              return this._order.slice();\n            }\n\n            return Array.from(this._groups.keys());\n          }\n\n          getGroups() {\n            return this._groups.size > 0 ? (0, _util.objectFromMap)(this._groups) : null;\n          }\n\n          getGroup(id) {\n            return this._groups.get(id) || null;\n          }\n\n        }\n\n        exports.OptionalContentConfig = OptionalContentConfig;\n        /***/\n      },\n      /* 16 */\n\n      /***/\n      (__unused_webpack_module, exports, __w_pdfjs_require__) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.PDFDataTransportStream = void 0;\n\n        var _util = __w_pdfjs_require__(2);\n\n        var _display_utils = __w_pdfjs_require__(1);\n\n        class PDFDataTransportStream {\n          constructor(params, pdfDataRangeTransport) {\n            (0, _util.assert)(pdfDataRangeTransport, 'PDFDataTransportStream - missing required \"pdfDataRangeTransport\" argument.');\n            this._queuedChunks = [];\n            this._progressiveDone = params.progressiveDone || false;\n            this._contentDispositionFilename = params.contentDispositionFilename || null;\n            const initialData = params.initialData;\n\n            if (initialData?.length > 0) {\n              const buffer = new Uint8Array(initialData).buffer;\n\n              this._queuedChunks.push(buffer);\n            }\n\n            this._pdfDataRangeTransport = pdfDataRangeTransport;\n            this._isStreamingSupported = !params.disableStream;\n            this._isRangeSupported = !params.disableRange;\n            this._contentLength = params.length;\n            this._fullRequestReader = null;\n            this._rangeReaders = [];\n\n            this._pdfDataRangeTransport.addRangeListener((begin, chunk) => {\n              this._onReceiveData({\n                begin,\n                chunk\n              });\n            });\n\n            this._pdfDataRangeTransport.addProgressListener((loaded, total) => {\n              this._onProgress({\n                loaded,\n                total\n              });\n            });\n\n            this._pdfDataRangeTransport.addProgressiveReadListener(chunk => {\n              this._onReceiveData({\n                chunk\n              });\n            });\n\n            this._pdfDataRangeTransport.addProgressiveDoneListener(() => {\n              this._onProgressiveDone();\n            });\n\n            this._pdfDataRangeTransport.transportReady();\n          }\n\n          _onReceiveData(args) {\n            const buffer = new Uint8Array(args.chunk).buffer;\n\n            if (args.begin === undefined) {\n              if (this._fullRequestReader) {\n                this._fullRequestReader._enqueue(buffer);\n              } else {\n                this._queuedChunks.push(buffer);\n              }\n            } else {\n              const found = this._rangeReaders.some(function (rangeReader) {\n                if (rangeReader._begin !== args.begin) {\n                  return false;\n                }\n\n                rangeReader._enqueue(buffer);\n\n                return true;\n              });\n\n              (0, _util.assert)(found, \"_onReceiveData - no `PDFDataTransportStreamRangeReader` instance found.\");\n            }\n          }\n\n          get _progressiveDataLength() {\n            return this._fullRequestReader?._loaded ?? 0;\n          }\n\n          _onProgress(evt) {\n            if (evt.total === undefined) {\n              const firstReader = this._rangeReaders[0];\n\n              if (firstReader?.onProgress) {\n                firstReader.onProgress({\n                  loaded: evt.loaded\n                });\n              }\n            } else {\n              const fullReader = this._fullRequestReader;\n\n              if (fullReader?.onProgress) {\n                fullReader.onProgress({\n                  loaded: evt.loaded,\n                  total: evt.total\n                });\n              }\n            }\n          }\n\n          _onProgressiveDone() {\n            if (this._fullRequestReader) {\n              this._fullRequestReader.progressiveDone();\n            }\n\n            this._progressiveDone = true;\n          }\n\n          _removeRangeReader(reader) {\n            const i = this._rangeReaders.indexOf(reader);\n\n            if (i >= 0) {\n              this._rangeReaders.splice(i, 1);\n            }\n          }\n\n          getFullReader() {\n            (0, _util.assert)(!this._fullRequestReader, \"PDFDataTransportStream.getFullReader can only be called once.\");\n            const queuedChunks = this._queuedChunks;\n            this._queuedChunks = null;\n            return new PDFDataTransportStreamReader(this, queuedChunks, this._progressiveDone, this._contentDispositionFilename);\n          }\n\n          getRangeReader(begin, end) {\n            if (end <= this._progressiveDataLength) {\n              return null;\n            }\n\n            const reader = new PDFDataTransportStreamRangeReader(this, begin, end);\n\n            this._pdfDataRangeTransport.requestDataRange(begin, end);\n\n            this._rangeReaders.push(reader);\n\n            return reader;\n          }\n\n          cancelAllRequests(reason) {\n            if (this._fullRequestReader) {\n              this._fullRequestReader.cancel(reason);\n            }\n\n            for (const reader of this._rangeReaders.slice(0)) {\n              reader.cancel(reason);\n            }\n\n            this._pdfDataRangeTransport.abort();\n          }\n\n        }\n\n        exports.PDFDataTransportStream = PDFDataTransportStream;\n\n        class PDFDataTransportStreamReader {\n          constructor(stream, queuedChunks) {\n            let progressiveDone = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n            let contentDispositionFilename = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n            this._stream = stream;\n            this._done = progressiveDone || false;\n            this._filename = (0, _display_utils.isPdfFile)(contentDispositionFilename) ? contentDispositionFilename : null;\n            this._queuedChunks = queuedChunks || [];\n            this._loaded = 0;\n\n            for (const chunk of this._queuedChunks) {\n              this._loaded += chunk.byteLength;\n            }\n\n            this._requests = [];\n            this._headersReady = Promise.resolve();\n            stream._fullRequestReader = this;\n            this.onProgress = null;\n          }\n\n          _enqueue(chunk) {\n            if (this._done) {\n              return;\n            }\n\n            if (this._requests.length > 0) {\n              const requestCapability = this._requests.shift();\n\n              requestCapability.resolve({\n                value: chunk,\n                done: false\n              });\n            } else {\n              this._queuedChunks.push(chunk);\n            }\n\n            this._loaded += chunk.byteLength;\n          }\n\n          get headersReady() {\n            return this._headersReady;\n          }\n\n          get filename() {\n            return this._filename;\n          }\n\n          get isRangeSupported() {\n            return this._stream._isRangeSupported;\n          }\n\n          get isStreamingSupported() {\n            return this._stream._isStreamingSupported;\n          }\n\n          get contentLength() {\n            return this._stream._contentLength;\n          }\n\n          async read() {\n            if (this._queuedChunks.length > 0) {\n              const chunk = this._queuedChunks.shift();\n\n              return {\n                value: chunk,\n                done: false\n              };\n            }\n\n            if (this._done) {\n              return {\n                value: undefined,\n                done: true\n              };\n            }\n\n            const requestCapability = (0, _util.createPromiseCapability)();\n\n            this._requests.push(requestCapability);\n\n            return requestCapability.promise;\n          }\n\n          cancel(reason) {\n            this._done = true;\n\n            for (const requestCapability of this._requests) {\n              requestCapability.resolve({\n                value: undefined,\n                done: true\n              });\n            }\n\n            this._requests.length = 0;\n          }\n\n          progressiveDone() {\n            if (this._done) {\n              return;\n            }\n\n            this._done = true;\n          }\n\n        }\n\n        class PDFDataTransportStreamRangeReader {\n          constructor(stream, begin, end) {\n            this._stream = stream;\n            this._begin = begin;\n            this._end = end;\n            this._queuedChunk = null;\n            this._requests = [];\n            this._done = false;\n            this.onProgress = null;\n          }\n\n          _enqueue(chunk) {\n            if (this._done) {\n              return;\n            }\n\n            if (this._requests.length === 0) {\n              this._queuedChunk = chunk;\n            } else {\n              const requestsCapability = this._requests.shift();\n\n              requestsCapability.resolve({\n                value: chunk,\n                done: false\n              });\n\n              for (const requestCapability of this._requests) {\n                requestCapability.resolve({\n                  value: undefined,\n                  done: true\n                });\n              }\n\n              this._requests.length = 0;\n            }\n\n            this._done = true;\n\n            this._stream._removeRangeReader(this);\n          }\n\n          get isStreamingSupported() {\n            return false;\n          }\n\n          async read() {\n            if (this._queuedChunk) {\n              const chunk = this._queuedChunk;\n              this._queuedChunk = null;\n              return {\n                value: chunk,\n                done: false\n              };\n            }\n\n            if (this._done) {\n              return {\n                value: undefined,\n                done: true\n              };\n            }\n\n            const requestCapability = (0, _util.createPromiseCapability)();\n\n            this._requests.push(requestCapability);\n\n            return requestCapability.promise;\n          }\n\n          cancel(reason) {\n            this._done = true;\n\n            for (const requestCapability of this._requests) {\n              requestCapability.resolve({\n                value: undefined,\n                done: true\n              });\n            }\n\n            this._requests.length = 0;\n\n            this._stream._removeRangeReader(this);\n          }\n\n        }\n        /***/\n\n      },\n      /* 17 */\n\n      /***/\n      (__unused_webpack_module, exports) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.XfaText = void 0;\n\n        class XfaText {\n          static textContent(xfa) {\n            const items = [];\n            const output = {\n              items,\n              styles: Object.create(null)\n            };\n\n            function walk(node) {\n              if (!node) {\n                return;\n              }\n\n              let str = null;\n              const name = node.name;\n\n              if (name === \"#text\") {\n                str = node.value;\n              } else if (!XfaText.shouldBuildText(name)) {\n                return;\n              } else if (node?.attributes?.textContent) {\n                str = node.attributes.textContent;\n              } else if (node.value) {\n                str = node.value;\n              }\n\n              if (str !== null) {\n                items.push({\n                  str\n                });\n              }\n\n              if (!node.children) {\n                return;\n              }\n\n              for (const child of node.children) {\n                walk(child);\n              }\n            }\n\n            walk(xfa);\n            return output;\n          }\n\n          static shouldBuildText(name) {\n            return !(name === \"textarea\" || name === \"input\" || name === \"option\" || name === \"select\");\n          }\n\n        }\n\n        exports.XfaText = XfaText;\n        /***/\n      },\n      /* 18 */\n\n      /***/\n      (__unused_webpack_module, exports, __w_pdfjs_require__) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.AnnotationLayer = void 0;\n\n        var _util = __w_pdfjs_require__(2);\n\n        var _display_utils = __w_pdfjs_require__(1);\n\n        var _annotation_storage = __w_pdfjs_require__(9);\n\n        var _scripting_utils = __w_pdfjs_require__(19);\n\n        var _xfa_layer = __w_pdfjs_require__(20);\n\n        const DEFAULT_TAB_INDEX = 1000;\n        const GetElementsByNameSet = new WeakSet();\n\n        class AnnotationElementFactory {\n          static create(parameters) {\n            const subtype = parameters.data.annotationType;\n\n            switch (subtype) {\n              case _util.AnnotationType.LINK:\n                return new LinkAnnotationElement(parameters);\n\n              case _util.AnnotationType.TEXT:\n                return new TextAnnotationElement(parameters);\n\n              case _util.AnnotationType.WIDGET:\n                const fieldType = parameters.data.fieldType;\n\n                switch (fieldType) {\n                  case \"Tx\":\n                    return new TextWidgetAnnotationElement(parameters);\n\n                  case \"Btn\":\n                    if (parameters.data.radioButton) {\n                      return new RadioButtonWidgetAnnotationElement(parameters);\n                    } else if (parameters.data.checkBox) {\n                      return new CheckboxWidgetAnnotationElement(parameters);\n                    }\n\n                    return new PushButtonWidgetAnnotationElement(parameters);\n\n                  case \"Ch\":\n                    return new ChoiceWidgetAnnotationElement(parameters);\n                }\n\n                return new WidgetAnnotationElement(parameters);\n\n              case _util.AnnotationType.POPUP:\n                return new PopupAnnotationElement(parameters);\n\n              case _util.AnnotationType.FREETEXT:\n                return new FreeTextAnnotationElement(parameters);\n\n              case _util.AnnotationType.LINE:\n                return new LineAnnotationElement(parameters);\n\n              case _util.AnnotationType.SQUARE:\n                return new SquareAnnotationElement(parameters);\n\n              case _util.AnnotationType.CIRCLE:\n                return new CircleAnnotationElement(parameters);\n\n              case _util.AnnotationType.POLYLINE:\n                return new PolylineAnnotationElement(parameters);\n\n              case _util.AnnotationType.CARET:\n                return new CaretAnnotationElement(parameters);\n\n              case _util.AnnotationType.INK:\n                return new InkAnnotationElement(parameters);\n\n              case _util.AnnotationType.POLYGON:\n                return new PolygonAnnotationElement(parameters);\n\n              case _util.AnnotationType.HIGHLIGHT:\n                return new HighlightAnnotationElement(parameters);\n\n              case _util.AnnotationType.UNDERLINE:\n                return new UnderlineAnnotationElement(parameters);\n\n              case _util.AnnotationType.SQUIGGLY:\n                return new SquigglyAnnotationElement(parameters);\n\n              case _util.AnnotationType.STRIKEOUT:\n                return new StrikeOutAnnotationElement(parameters);\n\n              case _util.AnnotationType.STAMP:\n                return new StampAnnotationElement(parameters);\n\n              case _util.AnnotationType.FILEATTACHMENT:\n                return new FileAttachmentAnnotationElement(parameters);\n\n              default:\n                return new AnnotationElement(parameters);\n            }\n          }\n\n        }\n\n        class AnnotationElement {\n          constructor(parameters) {\n            let {\n              isRenderable = false,\n              ignoreBorder = false,\n              createQuadrilaterals = false\n            } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n            this.isRenderable = isRenderable;\n            this.data = parameters.data;\n            this.layer = parameters.layer;\n            this.page = parameters.page;\n            this.viewport = parameters.viewport;\n            this.linkService = parameters.linkService;\n            this.downloadManager = parameters.downloadManager;\n            this.imageResourcesPath = parameters.imageResourcesPath;\n            this.renderForms = parameters.renderForms;\n            this.svgFactory = parameters.svgFactory;\n            this.annotationStorage = parameters.annotationStorage;\n            this.enableScripting = parameters.enableScripting;\n            this.hasJSActions = parameters.hasJSActions;\n            this._fieldObjects = parameters.fieldObjects;\n            this._mouseState = parameters.mouseState;\n\n            if (isRenderable) {\n              this.container = this._createContainer(ignoreBorder);\n            }\n\n            if (createQuadrilaterals) {\n              this.quadrilaterals = this._createQuadrilaterals(ignoreBorder);\n            }\n          }\n\n          _createContainer() {\n            let ignoreBorder = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n            const data = this.data,\n                  page = this.page,\n                  viewport = this.viewport;\n            const container = document.createElement(\"section\");\n            let width = data.rect[2] - data.rect[0];\n            let height = data.rect[3] - data.rect[1];\n            container.setAttribute(\"data-annotation-id\", data.id);\n\n            const rect = _util.Util.normalizeRect([data.rect[0], page.view[3] - data.rect[1] + page.view[1], data.rect[2], page.view[3] - data.rect[3] + page.view[1]]);\n\n            if (data.hasOwnCanvas) {\n              const transform = viewport.transform.slice();\n\n              const [scaleX, scaleY] = _util.Util.singularValueDecompose2dScale(transform);\n\n              width = Math.ceil(width * scaleX);\n              height = Math.ceil(height * scaleY);\n              rect[0] *= scaleX;\n              rect[1] *= scaleY;\n\n              for (let i = 0; i < 4; i++) {\n                transform[i] = Math.sign(transform[i]);\n              }\n\n              container.style.transform = `matrix(${transform.join(\",\")})`;\n            } else {\n              container.style.transform = `matrix(${viewport.transform.join(\",\")})`;\n            }\n\n            container.style.transformOrigin = `${-rect[0]}px ${-rect[1]}px`;\n\n            if (!ignoreBorder && data.borderStyle.width > 0) {\n              container.style.borderWidth = `${data.borderStyle.width}px`;\n\n              if (data.borderStyle.style !== _util.AnnotationBorderStyleType.UNDERLINE) {\n                width -= 2 * data.borderStyle.width;\n                height -= 2 * data.borderStyle.width;\n              }\n\n              const horizontalRadius = data.borderStyle.horizontalCornerRadius;\n              const verticalRadius = data.borderStyle.verticalCornerRadius;\n\n              if (horizontalRadius > 0 || verticalRadius > 0) {\n                const radius = `${horizontalRadius}px / ${verticalRadius}px`;\n                container.style.borderRadius = radius;\n              }\n\n              switch (data.borderStyle.style) {\n                case _util.AnnotationBorderStyleType.SOLID:\n                  container.style.borderStyle = \"solid\";\n                  break;\n\n                case _util.AnnotationBorderStyleType.DASHED:\n                  container.style.borderStyle = \"dashed\";\n                  break;\n\n                case _util.AnnotationBorderStyleType.BEVELED:\n                  (0, _util.warn)(\"Unimplemented border style: beveled\");\n                  break;\n\n                case _util.AnnotationBorderStyleType.INSET:\n                  (0, _util.warn)(\"Unimplemented border style: inset\");\n                  break;\n\n                case _util.AnnotationBorderStyleType.UNDERLINE:\n                  container.style.borderBottomStyle = \"solid\";\n                  break;\n\n                default:\n                  break;\n              }\n\n              const borderColor = data.borderColor || data.color || null;\n\n              if (borderColor) {\n                container.style.borderColor = _util.Util.makeHexColor(data.color[0] | 0, data.color[1] | 0, data.color[2] | 0);\n              } else {\n                container.style.borderWidth = 0;\n              }\n            }\n\n            container.style.left = `${rect[0]}px`;\n            container.style.top = `${rect[1]}px`;\n\n            if (data.hasOwnCanvas) {\n              container.style.width = container.style.height = \"auto\";\n            } else {\n              container.style.width = `${width}px`;\n              container.style.height = `${height}px`;\n            }\n\n            return container;\n          }\n\n          _createQuadrilaterals() {\n            let ignoreBorder = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n            if (!this.data.quadPoints) {\n              return null;\n            }\n\n            const quadrilaterals = [];\n            const savedRect = this.data.rect;\n\n            for (const quadPoint of this.data.quadPoints) {\n              this.data.rect = [quadPoint[2].x, quadPoint[2].y, quadPoint[1].x, quadPoint[1].y];\n              quadrilaterals.push(this._createContainer(ignoreBorder));\n            }\n\n            this.data.rect = savedRect;\n            return quadrilaterals;\n          }\n\n          _createPopup(trigger, data) {\n            let container = this.container;\n\n            if (this.quadrilaterals) {\n              trigger = trigger || this.quadrilaterals;\n              container = this.quadrilaterals[0];\n            }\n\n            if (!trigger) {\n              trigger = document.createElement(\"div\");\n              trigger.style.height = container.style.height;\n              trigger.style.width = container.style.width;\n              container.appendChild(trigger);\n            }\n\n            const popupElement = new PopupElement({\n              container,\n              trigger,\n              color: data.color,\n              titleObj: data.titleObj,\n              modificationDate: data.modificationDate,\n              contentsObj: data.contentsObj,\n              richText: data.richText,\n              hideWrapper: true\n            });\n            const popup = popupElement.render();\n            popup.style.left = container.style.width;\n            container.appendChild(popup);\n          }\n\n          _renderQuadrilaterals(className) {\n            for (const quadrilateral of this.quadrilaterals) {\n              quadrilateral.className = className;\n            }\n\n            return this.quadrilaterals;\n          }\n\n          render() {\n            (0, _util.unreachable)(\"Abstract method `AnnotationElement.render` called\");\n          }\n\n          _getElementsByName(name) {\n            let skipId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n            const fields = [];\n\n            if (this._fieldObjects) {\n              const fieldObj = this._fieldObjects[name];\n\n              if (fieldObj) {\n                for (const {\n                  page,\n                  id,\n                  exportValues\n                } of fieldObj) {\n                  if (page === -1) {\n                    continue;\n                  }\n\n                  if (id === skipId) {\n                    continue;\n                  }\n\n                  const exportValue = typeof exportValues === \"string\" ? exportValues : null;\n                  const domElement = document.getElementById(id);\n\n                  if (domElement && !GetElementsByNameSet.has(domElement)) {\n                    (0, _util.warn)(`_getElementsByName - element not allowed: ${id}`);\n                    continue;\n                  }\n\n                  fields.push({\n                    id,\n                    exportValue,\n                    domElement\n                  });\n                }\n              }\n\n              return fields;\n            }\n\n            for (const domElement of document.getElementsByName(name)) {\n              const {\n                id,\n                exportValue\n              } = domElement;\n\n              if (id === skipId) {\n                continue;\n              }\n\n              if (!GetElementsByNameSet.has(domElement)) {\n                continue;\n              }\n\n              fields.push({\n                id,\n                exportValue,\n                domElement\n              });\n            }\n\n            return fields;\n          }\n\n          static get platform() {\n            const platform = typeof navigator !== \"undefined\" ? navigator.platform : \"\";\n            return (0, _util.shadow)(this, \"platform\", {\n              isWin: platform.includes(\"Win\"),\n              isMac: platform.includes(\"Mac\")\n            });\n          }\n\n        }\n\n        class LinkAnnotationElement extends AnnotationElement {\n          constructor(parameters) {\n            let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n            const isRenderable = !!(parameters.data.url || parameters.data.dest || parameters.data.action || parameters.data.isTooltipOnly || parameters.data.resetForm || parameters.data.actions && (parameters.data.actions.Action || parameters.data.actions[\"Mouse Up\"] || parameters.data.actions[\"Mouse Down\"]));\n            super(parameters, {\n              isRenderable,\n              ignoreBorder: !!options?.ignoreBorder,\n              createQuadrilaterals: true\n            });\n          }\n\n          render() {\n            const {\n              data,\n              linkService\n            } = this;\n            const link = document.createElement(\"a\");\n\n            if (data.url) {\n              if (!linkService.addLinkAttributes) {\n                (0, _util.warn)(\"LinkAnnotationElement.render - missing `addLinkAttributes`-method on the `linkService`-instance.\");\n              }\n\n              linkService.addLinkAttributes?.(link, data.url, data.newWindow);\n            } else if (data.action) {\n              this._bindNamedAction(link, data.action);\n            } else if (data.dest) {\n              this._bindLink(link, data.dest);\n            } else {\n              let hasClickAction = false;\n\n              if (data.actions && (data.actions.Action || data.actions[\"Mouse Up\"] || data.actions[\"Mouse Down\"]) && this.enableScripting && this.hasJSActions) {\n                hasClickAction = true;\n\n                this._bindJSAction(link, data);\n              }\n\n              if (data.resetForm) {\n                this._bindResetFormAction(link, data.resetForm);\n              } else if (!hasClickAction) {\n                this._bindLink(link, \"\");\n              }\n            }\n\n            if (this.quadrilaterals) {\n              return this._renderQuadrilaterals(\"linkAnnotation\").map((quadrilateral, index) => {\n                const linkElement = index === 0 ? link : link.cloneNode();\n                quadrilateral.appendChild(linkElement);\n                return quadrilateral;\n              });\n            }\n\n            this.container.className = \"linkAnnotation\";\n            this.container.appendChild(link);\n            return this.container;\n          }\n\n          _bindLink(link, destination) {\n            link.href = this.linkService.getDestinationHash(destination);\n\n            link.onclick = () => {\n              if (destination) {\n                this.linkService.goToDestination(destination);\n              }\n\n              return false;\n            };\n\n            if (destination || destination === \"\") {\n              link.className = \"internalLink\";\n            }\n          }\n\n          _bindNamedAction(link, action) {\n            link.href = this.linkService.getAnchorUrl(\"\");\n\n            link.onclick = () => {\n              this.linkService.executeNamedAction(action);\n              return false;\n            };\n\n            link.className = \"internalLink\";\n          }\n\n          _bindJSAction(link, data) {\n            link.href = this.linkService.getAnchorUrl(\"\");\n            const map = new Map([[\"Action\", \"onclick\"], [\"Mouse Up\", \"onmouseup\"], [\"Mouse Down\", \"onmousedown\"]]);\n\n            for (const name of Object.keys(data.actions)) {\n              const jsName = map.get(name);\n\n              if (!jsName) {\n                continue;\n              }\n\n              link[jsName] = () => {\n                this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\n                  source: this,\n                  detail: {\n                    id: data.id,\n                    name\n                  }\n                });\n                return false;\n              };\n            }\n\n            if (!link.onclick) {\n              link.onclick = () => false;\n            }\n\n            link.className = \"internalLink\";\n          }\n\n          _bindResetFormAction(link, resetForm) {\n            const otherClickAction = link.onclick;\n\n            if (!otherClickAction) {\n              link.href = this.linkService.getAnchorUrl(\"\");\n            }\n\n            link.className = \"internalLink\";\n\n            if (!this._fieldObjects) {\n              (0, _util.warn)(`_bindResetFormAction - \"resetForm\" action not supported, ` + \"ensure that the `fieldObjects` parameter is provided.\");\n\n              if (!otherClickAction) {\n                link.onclick = () => false;\n              }\n\n              return;\n            }\n\n            link.onclick = () => {\n              if (otherClickAction) {\n                otherClickAction();\n              }\n\n              const {\n                fields: resetFormFields,\n                refs: resetFormRefs,\n                include\n              } = resetForm;\n              const allFields = [];\n\n              if (resetFormFields.length !== 0 || resetFormRefs.length !== 0) {\n                const fieldIds = new Set(resetFormRefs);\n\n                for (const fieldName of resetFormFields) {\n                  const fields = this._fieldObjects[fieldName] || [];\n\n                  for (const {\n                    id\n                  } of fields) {\n                    fieldIds.add(id);\n                  }\n                }\n\n                for (const fields of Object.values(this._fieldObjects)) {\n                  for (const field of fields) {\n                    if (fieldIds.has(field.id) === include) {\n                      allFields.push(field);\n                    }\n                  }\n                }\n              } else {\n                for (const fields of Object.values(this._fieldObjects)) {\n                  allFields.push(...fields);\n                }\n              }\n\n              const storage = this.annotationStorage;\n              const allIds = [];\n\n              for (const field of allFields) {\n                const {\n                  id\n                } = field;\n                allIds.push(id);\n\n                switch (field.type) {\n                  case \"text\":\n                    {\n                      const value = field.defaultValue || \"\";\n                      storage.setValue(id, {\n                        value,\n                        valueAsString: value\n                      });\n                      break;\n                    }\n\n                  case \"checkbox\":\n                  case \"radiobutton\":\n                    {\n                      const value = field.defaultValue === field.exportValues;\n                      storage.setValue(id, {\n                        value\n                      });\n                      break;\n                    }\n\n                  case \"combobox\":\n                  case \"listbox\":\n                    {\n                      const value = field.defaultValue || \"\";\n                      storage.setValue(id, {\n                        value\n                      });\n                      break;\n                    }\n\n                  default:\n                    continue;\n                }\n\n                const domElement = document.getElementById(id);\n\n                if (!domElement || !GetElementsByNameSet.has(domElement)) {\n                  continue;\n                }\n\n                domElement.dispatchEvent(new Event(\"resetform\"));\n              }\n\n              if (this.enableScripting) {\n                this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\n                  source: this,\n                  detail: {\n                    id: \"app\",\n                    ids: allIds,\n                    name: \"ResetForm\"\n                  }\n                });\n              }\n\n              return false;\n            };\n          }\n\n        }\n\n        class TextAnnotationElement extends AnnotationElement {\n          constructor(parameters) {\n            const isRenderable = !!(parameters.data.hasPopup || parameters.data.titleObj?.str || parameters.data.contentsObj?.str || parameters.data.richText?.str);\n            super(parameters, {\n              isRenderable\n            });\n          }\n\n          render() {\n            this.container.className = \"textAnnotation\";\n            const image = document.createElement(\"img\");\n            image.style.height = this.container.style.height;\n            image.style.width = this.container.style.width;\n            image.src = this.imageResourcesPath + \"annotation-\" + this.data.name.toLowerCase() + \".svg\";\n            image.alt = \"[{{type}} Annotation]\";\n            image.dataset.l10nId = \"text_annotation_type\";\n            image.dataset.l10nArgs = JSON.stringify({\n              type: this.data.name\n            });\n\n            if (!this.data.hasPopup) {\n              this._createPopup(image, this.data);\n            }\n\n            this.container.appendChild(image);\n            return this.container;\n          }\n\n        }\n\n        class WidgetAnnotationElement extends AnnotationElement {\n          render() {\n            if (this.data.alternativeText) {\n              this.container.title = this.data.alternativeText;\n            }\n\n            return this.container;\n          }\n\n          _getKeyModifier(event) {\n            const {\n              isWin,\n              isMac\n            } = AnnotationElement.platform;\n            return isWin && event.ctrlKey || isMac && event.metaKey;\n          }\n\n          _setEventListener(element, baseName, eventName, valueGetter) {\n            if (baseName.includes(\"mouse\")) {\n              element.addEventListener(baseName, event => {\n                this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\n                  source: this,\n                  detail: {\n                    id: this.data.id,\n                    name: eventName,\n                    value: valueGetter(event),\n                    shift: event.shiftKey,\n                    modifier: this._getKeyModifier(event)\n                  }\n                });\n              });\n            } else {\n              element.addEventListener(baseName, event => {\n                this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\n                  source: this,\n                  detail: {\n                    id: this.data.id,\n                    name: eventName,\n                    value: event.target.checked\n                  }\n                });\n              });\n            }\n          }\n\n          _setEventListeners(element, names, getter) {\n            for (const [baseName, eventName] of names) {\n              if (eventName === \"Action\" || this.data.actions?.[eventName]) {\n                this._setEventListener(element, baseName, eventName, getter);\n              }\n            }\n          }\n\n          _setBackgroundColor(element) {\n            const color = this.data.backgroundColor || null;\n            element.style.backgroundColor = color === null ? \"transparent\" : _util.Util.makeHexColor(color[0], color[1], color[2]);\n          }\n\n          _dispatchEventFromSandbox(actions, jsEvent) {\n            const setColor = (jsName, styleName, event) => {\n              const color = event.detail[jsName];\n              event.target.style[styleName] = _scripting_utils.ColorConverters[`${color[0]}_HTML`](color.slice(1));\n            };\n\n            const commonActions = {\n              display: event => {\n                const hidden = event.detail.display % 2 === 1;\n                event.target.style.visibility = hidden ? \"hidden\" : \"visible\";\n                this.annotationStorage.setValue(this.data.id, {\n                  hidden,\n                  print: event.detail.display === 0 || event.detail.display === 3\n                });\n              },\n              print: event => {\n                this.annotationStorage.setValue(this.data.id, {\n                  print: event.detail.print\n                });\n              },\n              hidden: event => {\n                event.target.style.visibility = event.detail.hidden ? \"hidden\" : \"visible\";\n                this.annotationStorage.setValue(this.data.id, {\n                  hidden: event.detail.hidden\n                });\n              },\n              focus: event => {\n                setTimeout(() => event.target.focus({\n                  preventScroll: false\n                }), 0);\n              },\n              userName: event => {\n                event.target.title = event.detail.userName;\n              },\n              readonly: event => {\n                if (event.detail.readonly) {\n                  event.target.setAttribute(\"readonly\", \"\");\n                } else {\n                  event.target.removeAttribute(\"readonly\");\n                }\n              },\n              required: event => {\n                if (event.detail.required) {\n                  event.target.setAttribute(\"required\", \"\");\n                } else {\n                  event.target.removeAttribute(\"required\");\n                }\n              },\n              bgColor: event => {\n                setColor(\"bgColor\", \"backgroundColor\", event);\n              },\n              fillColor: event => {\n                setColor(\"fillColor\", \"backgroundColor\", event);\n              },\n              fgColor: event => {\n                setColor(\"fgColor\", \"color\", event);\n              },\n              textColor: event => {\n                setColor(\"textColor\", \"color\", event);\n              },\n              borderColor: event => {\n                setColor(\"borderColor\", \"borderColor\", event);\n              },\n              strokeColor: event => {\n                setColor(\"strokeColor\", \"borderColor\", event);\n              }\n            };\n\n            for (const name of Object.keys(jsEvent.detail)) {\n              const action = actions[name] || commonActions[name];\n\n              if (action) {\n                action(jsEvent);\n              }\n            }\n          }\n\n        }\n\n        class TextWidgetAnnotationElement extends WidgetAnnotationElement {\n          constructor(parameters) {\n            const isRenderable = parameters.renderForms || !parameters.data.hasAppearance && !!parameters.data.fieldValue;\n            super(parameters, {\n              isRenderable\n            });\n          }\n\n          setPropertyOnSiblings(base, key, value, keyInStorage) {\n            const storage = this.annotationStorage;\n\n            for (const element of this._getElementsByName(base.name, base.id)) {\n              if (element.domElement) {\n                element.domElement[key] = value;\n              }\n\n              storage.setValue(element.id, {\n                [keyInStorage]: value\n              });\n            }\n          }\n\n          render() {\n            const storage = this.annotationStorage;\n            const id = this.data.id;\n            this.container.className = \"textWidgetAnnotation\";\n            let element = null;\n\n            if (this.renderForms) {\n              const storedData = storage.getValue(id, {\n                value: this.data.fieldValue,\n                valueAsString: this.data.fieldValue\n              });\n              const textContent = storedData.valueAsString || storedData.value || \"\";\n              const elementData = {\n                userValue: null,\n                formattedValue: null,\n                beforeInputSelectionRange: null,\n                beforeInputValue: null\n              };\n\n              if (this.data.multiLine) {\n                element = document.createElement(\"textarea\");\n                element.textContent = textContent;\n              } else {\n                element = document.createElement(\"input\");\n                element.type = \"text\";\n                element.setAttribute(\"value\", textContent);\n              }\n\n              GetElementsByNameSet.add(element);\n              element.disabled = this.data.readOnly;\n              element.name = this.data.fieldName;\n              element.tabIndex = DEFAULT_TAB_INDEX;\n              elementData.userValue = textContent;\n              element.setAttribute(\"id\", id);\n              element.addEventListener(\"input\", event => {\n                storage.setValue(id, {\n                  value: event.target.value\n                });\n                this.setPropertyOnSiblings(element, \"value\", event.target.value, \"value\");\n              });\n              element.addEventListener(\"resetform\", event => {\n                const defaultValue = this.data.defaultFieldValue || \"\";\n                element.value = elementData.userValue = defaultValue;\n                delete elementData.formattedValue;\n              });\n\n              let blurListener = event => {\n                if (elementData.formattedValue) {\n                  event.target.value = elementData.formattedValue;\n                }\n\n                event.target.scrollLeft = 0;\n                elementData.beforeInputSelectionRange = null;\n              };\n\n              if (this.enableScripting && this.hasJSActions) {\n                element.addEventListener(\"focus\", event => {\n                  if (elementData.userValue) {\n                    event.target.value = elementData.userValue;\n                  }\n                });\n                element.addEventListener(\"updatefromsandbox\", jsEvent => {\n                  const actions = {\n                    value(event) {\n                      elementData.userValue = event.detail.value || \"\";\n                      storage.setValue(id, {\n                        value: elementData.userValue.toString()\n                      });\n\n                      if (!elementData.formattedValue) {\n                        event.target.value = elementData.userValue;\n                      }\n                    },\n\n                    valueAsString(event) {\n                      elementData.formattedValue = event.detail.valueAsString || \"\";\n\n                      if (event.target !== document.activeElement) {\n                        event.target.value = elementData.formattedValue;\n                      }\n\n                      storage.setValue(id, {\n                        formattedValue: elementData.formattedValue\n                      });\n                    },\n\n                    selRange(event) {\n                      const [selStart, selEnd] = event.detail.selRange;\n\n                      if (selStart >= 0 && selEnd < event.target.value.length) {\n                        event.target.setSelectionRange(selStart, selEnd);\n                      }\n                    }\n\n                  };\n\n                  this._dispatchEventFromSandbox(actions, jsEvent);\n                });\n                element.addEventListener(\"keydown\", event => {\n                  elementData.beforeInputValue = event.target.value;\n                  let commitKey = -1;\n\n                  if (event.key === \"Escape\") {\n                    commitKey = 0;\n                  } else if (event.key === \"Enter\") {\n                    commitKey = 2;\n                  } else if (event.key === \"Tab\") {\n                    commitKey = 3;\n                  }\n\n                  if (commitKey === -1) {\n                    return;\n                  }\n\n                  elementData.userValue = event.target.value;\n                  this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\n                    source: this,\n                    detail: {\n                      id,\n                      name: \"Keystroke\",\n                      value: event.target.value,\n                      willCommit: true,\n                      commitKey,\n                      selStart: event.target.selectionStart,\n                      selEnd: event.target.selectionEnd\n                    }\n                  });\n                });\n                const _blurListener = blurListener;\n                blurListener = null;\n                element.addEventListener(\"blur\", event => {\n                  if (this._mouseState.isDown) {\n                    elementData.userValue = event.target.value;\n                    this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\n                      source: this,\n                      detail: {\n                        id,\n                        name: \"Keystroke\",\n                        value: event.target.value,\n                        willCommit: true,\n                        commitKey: 1,\n                        selStart: event.target.selectionStart,\n                        selEnd: event.target.selectionEnd\n                      }\n                    });\n                  }\n\n                  _blurListener(event);\n                });\n                element.addEventListener(\"mousedown\", event => {\n                  elementData.beforeInputValue = event.target.value;\n                  elementData.beforeInputSelectionRange = null;\n                });\n                element.addEventListener(\"keyup\", event => {\n                  if (event.target.selectionStart === event.target.selectionEnd) {\n                    elementData.beforeInputSelectionRange = null;\n                  }\n                });\n                element.addEventListener(\"select\", event => {\n                  elementData.beforeInputSelectionRange = [event.target.selectionStart, event.target.selectionEnd];\n                });\n\n                if (this.data.actions?.Keystroke) {\n                  element.addEventListener(\"input\", event => {\n                    let selStart = -1;\n                    let selEnd = -1;\n\n                    if (elementData.beforeInputSelectionRange) {\n                      [selStart, selEnd] = elementData.beforeInputSelectionRange;\n                    }\n\n                    this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\n                      source: this,\n                      detail: {\n                        id,\n                        name: \"Keystroke\",\n                        value: elementData.beforeInputValue,\n                        change: event.data,\n                        willCommit: false,\n                        selStart,\n                        selEnd\n                      }\n                    });\n                  });\n                }\n\n                this._setEventListeners(element, [[\"focus\", \"Focus\"], [\"blur\", \"Blur\"], [\"mousedown\", \"Mouse Down\"], [\"mouseenter\", \"Mouse Enter\"], [\"mouseleave\", \"Mouse Exit\"], [\"mouseup\", \"Mouse Up\"]], event => event.target.value);\n              }\n\n              if (blurListener) {\n                element.addEventListener(\"blur\", blurListener);\n              }\n\n              if (this.data.maxLen !== null) {\n                element.maxLength = this.data.maxLen;\n              }\n\n              if (this.data.comb) {\n                const fieldWidth = this.data.rect[2] - this.data.rect[0];\n                const combWidth = fieldWidth / this.data.maxLen;\n                element.classList.add(\"comb\");\n                element.style.letterSpacing = `calc(${combWidth}px - 1ch)`;\n              }\n            } else {\n              element = document.createElement(\"div\");\n              element.textContent = this.data.fieldValue;\n              element.style.verticalAlign = \"middle\";\n              element.style.display = \"table-cell\";\n            }\n\n            this._setTextStyle(element);\n\n            this._setBackgroundColor(element);\n\n            this.container.appendChild(element);\n            return this.container;\n          }\n\n          _setTextStyle(element) {\n            const TEXT_ALIGNMENT = [\"left\", \"center\", \"right\"];\n            const {\n              fontSize,\n              fontColor\n            } = this.data.defaultAppearanceData;\n            const style = element.style;\n\n            if (fontSize) {\n              style.fontSize = `${fontSize}px`;\n            }\n\n            style.color = _util.Util.makeHexColor(fontColor[0], fontColor[1], fontColor[2]);\n\n            if (this.data.textAlignment !== null) {\n              style.textAlign = TEXT_ALIGNMENT[this.data.textAlignment];\n            }\n          }\n\n        }\n\n        class CheckboxWidgetAnnotationElement extends WidgetAnnotationElement {\n          constructor(parameters) {\n            super(parameters, {\n              isRenderable: parameters.renderForms\n            });\n          }\n\n          render() {\n            const storage = this.annotationStorage;\n            const data = this.data;\n            const id = data.id;\n            let value = storage.getValue(id, {\n              value: data.exportValue === data.fieldValue\n            }).value;\n\n            if (typeof value === \"string\") {\n              value = value !== \"Off\";\n              storage.setValue(id, {\n                value\n              });\n            }\n\n            this.container.className = \"buttonWidgetAnnotation checkBox\";\n            const element = document.createElement(\"input\");\n            GetElementsByNameSet.add(element);\n            element.disabled = data.readOnly;\n            element.type = \"checkbox\";\n            element.name = data.fieldName;\n\n            if (value) {\n              element.setAttribute(\"checked\", true);\n            }\n\n            element.setAttribute(\"id\", id);\n            element.setAttribute(\"exportValue\", data.exportValue);\n            element.tabIndex = DEFAULT_TAB_INDEX;\n            element.addEventListener(\"change\", event => {\n              const {\n                name,\n                checked\n              } = event.target;\n\n              for (const checkbox of this._getElementsByName(name, id)) {\n                const curChecked = checked && checkbox.exportValue === data.exportValue;\n\n                if (checkbox.domElement) {\n                  checkbox.domElement.checked = curChecked;\n                }\n\n                storage.setValue(checkbox.id, {\n                  value: curChecked\n                });\n              }\n\n              storage.setValue(id, {\n                value: checked\n              });\n            });\n            element.addEventListener(\"resetform\", event => {\n              const defaultValue = data.defaultFieldValue || \"Off\";\n              event.target.checked = defaultValue === data.exportValue;\n            });\n\n            if (this.enableScripting && this.hasJSActions) {\n              element.addEventListener(\"updatefromsandbox\", jsEvent => {\n                const actions = {\n                  value(event) {\n                    event.target.checked = event.detail.value !== \"Off\";\n                    storage.setValue(id, {\n                      value: event.target.checked\n                    });\n                  }\n\n                };\n\n                this._dispatchEventFromSandbox(actions, jsEvent);\n              });\n\n              this._setEventListeners(element, [[\"change\", \"Validate\"], [\"change\", \"Action\"], [\"focus\", \"Focus\"], [\"blur\", \"Blur\"], [\"mousedown\", \"Mouse Down\"], [\"mouseenter\", \"Mouse Enter\"], [\"mouseleave\", \"Mouse Exit\"], [\"mouseup\", \"Mouse Up\"]], event => event.target.checked);\n            }\n\n            this._setBackgroundColor(element);\n\n            this.container.appendChild(element);\n            return this.container;\n          }\n\n        }\n\n        class RadioButtonWidgetAnnotationElement extends WidgetAnnotationElement {\n          constructor(parameters) {\n            super(parameters, {\n              isRenderable: parameters.renderForms\n            });\n          }\n\n          render() {\n            this.container.className = \"buttonWidgetAnnotation radioButton\";\n            const storage = this.annotationStorage;\n            const data = this.data;\n            const id = data.id;\n            let value = storage.getValue(id, {\n              value: data.fieldValue === data.buttonValue\n            }).value;\n\n            if (typeof value === \"string\") {\n              value = value !== data.buttonValue;\n              storage.setValue(id, {\n                value\n              });\n            }\n\n            const element = document.createElement(\"input\");\n            GetElementsByNameSet.add(element);\n            element.disabled = data.readOnly;\n            element.type = \"radio\";\n            element.name = data.fieldName;\n\n            if (value) {\n              element.setAttribute(\"checked\", true);\n            }\n\n            element.setAttribute(\"id\", id);\n            element.tabIndex = DEFAULT_TAB_INDEX;\n            element.addEventListener(\"change\", event => {\n              const {\n                name,\n                checked\n              } = event.target;\n\n              for (const radio of this._getElementsByName(name, id)) {\n                storage.setValue(radio.id, {\n                  value: false\n                });\n              }\n\n              storage.setValue(id, {\n                value: checked\n              });\n            });\n            element.addEventListener(\"resetform\", event => {\n              const defaultValue = data.defaultFieldValue;\n              event.target.checked = defaultValue !== null && defaultValue !== undefined && defaultValue === data.buttonValue;\n            });\n\n            if (this.enableScripting && this.hasJSActions) {\n              const pdfButtonValue = data.buttonValue;\n              element.addEventListener(\"updatefromsandbox\", jsEvent => {\n                const actions = {\n                  value: event => {\n                    const checked = pdfButtonValue === event.detail.value;\n\n                    for (const radio of this._getElementsByName(event.target.name)) {\n                      const curChecked = checked && radio.id === id;\n\n                      if (radio.domElement) {\n                        radio.domElement.checked = curChecked;\n                      }\n\n                      storage.setValue(radio.id, {\n                        value: curChecked\n                      });\n                    }\n                  }\n                };\n\n                this._dispatchEventFromSandbox(actions, jsEvent);\n              });\n\n              this._setEventListeners(element, [[\"change\", \"Validate\"], [\"change\", \"Action\"], [\"focus\", \"Focus\"], [\"blur\", \"Blur\"], [\"mousedown\", \"Mouse Down\"], [\"mouseenter\", \"Mouse Enter\"], [\"mouseleave\", \"Mouse Exit\"], [\"mouseup\", \"Mouse Up\"]], event => event.target.checked);\n            }\n\n            this._setBackgroundColor(element);\n\n            this.container.appendChild(element);\n            return this.container;\n          }\n\n        }\n\n        class PushButtonWidgetAnnotationElement extends LinkAnnotationElement {\n          constructor(parameters) {\n            super(parameters, {\n              ignoreBorder: parameters.data.hasAppearance\n            });\n          }\n\n          render() {\n            const container = super.render();\n            container.className = \"buttonWidgetAnnotation pushButton\";\n\n            if (this.data.alternativeText) {\n              container.title = this.data.alternativeText;\n            }\n\n            return container;\n          }\n\n        }\n\n        class ChoiceWidgetAnnotationElement extends WidgetAnnotationElement {\n          constructor(parameters) {\n            super(parameters, {\n              isRenderable: parameters.renderForms\n            });\n          }\n\n          render() {\n            this.container.className = \"choiceWidgetAnnotation\";\n            const storage = this.annotationStorage;\n            const id = this.data.id;\n            storage.getValue(id, {\n              value: this.data.fieldValue.length > 0 ? this.data.fieldValue[0] : undefined\n            });\n            let {\n              fontSize\n            } = this.data.defaultAppearanceData;\n\n            if (!fontSize) {\n              fontSize = 9;\n            }\n\n            const fontSizeStyle = `calc(${fontSize}px * var(--zoom-factor))`;\n            const selectElement = document.createElement(\"select\");\n            GetElementsByNameSet.add(selectElement);\n            selectElement.disabled = this.data.readOnly;\n            selectElement.name = this.data.fieldName;\n            selectElement.setAttribute(\"id\", id);\n            selectElement.tabIndex = DEFAULT_TAB_INDEX;\n            selectElement.style.fontSize = `${fontSize}px`;\n\n            if (!this.data.combo) {\n              selectElement.size = this.data.options.length;\n\n              if (this.data.multiSelect) {\n                selectElement.multiple = true;\n              }\n            }\n\n            selectElement.addEventListener(\"resetform\", event => {\n              const defaultValue = this.data.defaultFieldValue;\n\n              for (const option of selectElement.options) {\n                option.selected = option.value === defaultValue;\n              }\n            });\n\n            for (const option of this.data.options) {\n              const optionElement = document.createElement(\"option\");\n              optionElement.textContent = option.displayValue;\n              optionElement.value = option.exportValue;\n\n              if (this.data.combo) {\n                optionElement.style.fontSize = fontSizeStyle;\n              }\n\n              if (this.data.fieldValue.includes(option.exportValue)) {\n                optionElement.setAttribute(\"selected\", true);\n              }\n\n              selectElement.appendChild(optionElement);\n            }\n\n            const getValue = (event, isExport) => {\n              const name = isExport ? \"value\" : \"textContent\";\n              const options = event.target.options;\n\n              if (!event.target.multiple) {\n                return options.selectedIndex === -1 ? null : options[options.selectedIndex][name];\n              }\n\n              return Array.prototype.filter.call(options, option => option.selected).map(option => option[name]);\n            };\n\n            const getItems = event => {\n              const options = event.target.options;\n              return Array.prototype.map.call(options, option => {\n                return {\n                  displayValue: option.textContent,\n                  exportValue: option.value\n                };\n              });\n            };\n\n            if (this.enableScripting && this.hasJSActions) {\n              selectElement.addEventListener(\"updatefromsandbox\", jsEvent => {\n                const actions = {\n                  value(event) {\n                    const value = event.detail.value;\n                    const values = new Set(Array.isArray(value) ? value : [value]);\n\n                    for (const option of selectElement.options) {\n                      option.selected = values.has(option.value);\n                    }\n\n                    storage.setValue(id, {\n                      value: getValue(event, true)\n                    });\n                  },\n\n                  multipleSelection(event) {\n                    selectElement.multiple = true;\n                  },\n\n                  remove(event) {\n                    const options = selectElement.options;\n                    const index = event.detail.remove;\n                    options[index].selected = false;\n                    selectElement.remove(index);\n\n                    if (options.length > 0) {\n                      const i = Array.prototype.findIndex.call(options, option => option.selected);\n\n                      if (i === -1) {\n                        options[0].selected = true;\n                      }\n                    }\n\n                    storage.setValue(id, {\n                      value: getValue(event, true),\n                      items: getItems(event)\n                    });\n                  },\n\n                  clear(event) {\n                    while (selectElement.length !== 0) {\n                      selectElement.remove(0);\n                    }\n\n                    storage.setValue(id, {\n                      value: null,\n                      items: []\n                    });\n                  },\n\n                  insert(event) {\n                    const {\n                      index,\n                      displayValue,\n                      exportValue\n                    } = event.detail.insert;\n                    const optionElement = document.createElement(\"option\");\n                    optionElement.textContent = displayValue;\n                    optionElement.value = exportValue;\n                    selectElement.insertBefore(optionElement, selectElement.children[index]);\n                    storage.setValue(id, {\n                      value: getValue(event, true),\n                      items: getItems(event)\n                    });\n                  },\n\n                  items(event) {\n                    const {\n                      items\n                    } = event.detail;\n\n                    while (selectElement.length !== 0) {\n                      selectElement.remove(0);\n                    }\n\n                    for (const item of items) {\n                      const {\n                        displayValue,\n                        exportValue\n                      } = item;\n                      const optionElement = document.createElement(\"option\");\n                      optionElement.textContent = displayValue;\n                      optionElement.value = exportValue;\n                      selectElement.appendChild(optionElement);\n                    }\n\n                    if (selectElement.options.length > 0) {\n                      selectElement.options[0].selected = true;\n                    }\n\n                    storage.setValue(id, {\n                      value: getValue(event, true),\n                      items: getItems(event)\n                    });\n                  },\n\n                  indices(event) {\n                    const indices = new Set(event.detail.indices);\n\n                    for (const option of event.target.options) {\n                      option.selected = indices.has(option.index);\n                    }\n\n                    storage.setValue(id, {\n                      value: getValue(event, true)\n                    });\n                  },\n\n                  editable(event) {\n                    event.target.disabled = !event.detail.editable;\n                  }\n\n                };\n\n                this._dispatchEventFromSandbox(actions, jsEvent);\n              });\n              selectElement.addEventListener(\"input\", event => {\n                const exportValue = getValue(event, true);\n                const value = getValue(event, false);\n                storage.setValue(id, {\n                  value: exportValue\n                });\n                this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\n                  source: this,\n                  detail: {\n                    id,\n                    name: \"Keystroke\",\n                    value,\n                    changeEx: exportValue,\n                    willCommit: true,\n                    commitKey: 1,\n                    keyDown: false\n                  }\n                });\n              });\n\n              this._setEventListeners(selectElement, [[\"focus\", \"Focus\"], [\"blur\", \"Blur\"], [\"mousedown\", \"Mouse Down\"], [\"mouseenter\", \"Mouse Enter\"], [\"mouseleave\", \"Mouse Exit\"], [\"mouseup\", \"Mouse Up\"], [\"input\", \"Action\"]], event => event.target.checked);\n            } else {\n              selectElement.addEventListener(\"input\", function (event) {\n                storage.setValue(id, {\n                  value: getValue(event)\n                });\n              });\n            }\n\n            this._setBackgroundColor(selectElement);\n\n            this.container.appendChild(selectElement);\n            return this.container;\n          }\n\n        }\n\n        class PopupAnnotationElement extends AnnotationElement {\n          constructor(parameters) {\n            const isRenderable = !!(parameters.data.titleObj?.str || parameters.data.contentsObj?.str || parameters.data.richText?.str);\n            super(parameters, {\n              isRenderable\n            });\n          }\n\n          render() {\n            const IGNORE_TYPES = [\"Line\", \"Square\", \"Circle\", \"PolyLine\", \"Polygon\", \"Ink\"];\n            this.container.className = \"popupAnnotation\";\n\n            if (IGNORE_TYPES.includes(this.data.parentType)) {\n              return this.container;\n            }\n\n            const selector = `[data-annotation-id=\"${this.data.parentId}\"]`;\n            const parentElements = this.layer.querySelectorAll(selector);\n\n            if (parentElements.length === 0) {\n              return this.container;\n            }\n\n            const popup = new PopupElement({\n              container: this.container,\n              trigger: Array.from(parentElements),\n              color: this.data.color,\n              titleObj: this.data.titleObj,\n              modificationDate: this.data.modificationDate,\n              contentsObj: this.data.contentsObj,\n              richText: this.data.richText\n            });\n            const page = this.page;\n\n            const rect = _util.Util.normalizeRect([this.data.parentRect[0], page.view[3] - this.data.parentRect[1] + page.view[1], this.data.parentRect[2], page.view[3] - this.data.parentRect[3] + page.view[1]]);\n\n            const popupLeft = rect[0] + this.data.parentRect[2] - this.data.parentRect[0];\n            const popupTop = rect[1];\n            this.container.style.transformOrigin = `${-popupLeft}px ${-popupTop}px`;\n            this.container.style.left = `${popupLeft}px`;\n            this.container.style.top = `${popupTop}px`;\n            this.container.appendChild(popup.render());\n            return this.container;\n          }\n\n        }\n\n        class PopupElement {\n          constructor(parameters) {\n            this.container = parameters.container;\n            this.trigger = parameters.trigger;\n            this.color = parameters.color;\n            this.titleObj = parameters.titleObj;\n            this.modificationDate = parameters.modificationDate;\n            this.contentsObj = parameters.contentsObj;\n            this.richText = parameters.richText;\n            this.hideWrapper = parameters.hideWrapper || false;\n            this.pinned = false;\n          }\n\n          render() {\n            const BACKGROUND_ENLIGHT = 0.7;\n            const wrapper = document.createElement(\"div\");\n            wrapper.className = \"popupWrapper\";\n            this.hideElement = this.hideWrapper ? wrapper : this.container;\n            this.hideElement.hidden = true;\n            const popup = document.createElement(\"div\");\n            popup.className = \"popup\";\n            const color = this.color;\n\n            if (color) {\n              const r = BACKGROUND_ENLIGHT * (255 - color[0]) + color[0];\n              const g = BACKGROUND_ENLIGHT * (255 - color[1]) + color[1];\n              const b = BACKGROUND_ENLIGHT * (255 - color[2]) + color[2];\n              popup.style.backgroundColor = _util.Util.makeHexColor(r | 0, g | 0, b | 0);\n            }\n\n            const title = document.createElement(\"h1\");\n            title.dir = this.titleObj.dir;\n            title.textContent = this.titleObj.str;\n            popup.appendChild(title);\n\n            const dateObject = _display_utils.PDFDateString.toDateObject(this.modificationDate);\n\n            if (dateObject) {\n              const modificationDate = document.createElement(\"span\");\n              modificationDate.className = \"popupDate\";\n              modificationDate.textContent = \"{{date}}, {{time}}\";\n              modificationDate.dataset.l10nId = \"annotation_date_string\";\n              modificationDate.dataset.l10nArgs = JSON.stringify({\n                date: dateObject.toLocaleDateString(),\n                time: dateObject.toLocaleTimeString()\n              });\n              popup.appendChild(modificationDate);\n            }\n\n            if (this.richText?.str && (!this.contentsObj?.str || this.contentsObj.str === this.richText.str)) {\n              _xfa_layer.XfaLayer.render({\n                xfaHtml: this.richText.html,\n                intent: \"richText\",\n                div: popup\n              });\n\n              popup.lastChild.className = \"richText popupContent\";\n            } else {\n              const contents = this._formatContents(this.contentsObj);\n\n              popup.appendChild(contents);\n            }\n\n            if (!Array.isArray(this.trigger)) {\n              this.trigger = [this.trigger];\n            }\n\n            for (const element of this.trigger) {\n              element.addEventListener(\"click\", this._toggle.bind(this));\n              element.addEventListener(\"mouseover\", this._show.bind(this, false));\n              element.addEventListener(\"mouseout\", this._hide.bind(this, false));\n            }\n\n            popup.addEventListener(\"click\", this._hide.bind(this, true));\n            wrapper.appendChild(popup);\n            return wrapper;\n          }\n\n          _formatContents(_ref26) {\n            let {\n              str,\n              dir\n            } = _ref26;\n            const p = document.createElement(\"p\");\n            p.className = \"popupContent\";\n            p.dir = dir;\n            const lines = str.split(/(?:\\r\\n?|\\n)/);\n\n            for (let i = 0, ii = lines.length; i < ii; ++i) {\n              const line = lines[i];\n              p.appendChild(document.createTextNode(line));\n\n              if (i < ii - 1) {\n                p.appendChild(document.createElement(\"br\"));\n              }\n            }\n\n            return p;\n          }\n\n          _toggle() {\n            if (this.pinned) {\n              this._hide(true);\n            } else {\n              this._show(true);\n            }\n          }\n\n          _show() {\n            let pin = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n            if (pin) {\n              this.pinned = true;\n            }\n\n            if (this.hideElement.hidden) {\n              this.hideElement.hidden = false;\n              this.container.style.zIndex += 1;\n            }\n          }\n\n          _hide() {\n            let unpin = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n            if (unpin) {\n              this.pinned = false;\n            }\n\n            if (!this.hideElement.hidden && !this.pinned) {\n              this.hideElement.hidden = true;\n              this.container.style.zIndex -= 1;\n            }\n          }\n\n        }\n\n        class FreeTextAnnotationElement extends AnnotationElement {\n          constructor(parameters) {\n            const isRenderable = !!(parameters.data.hasPopup || parameters.data.titleObj?.str || parameters.data.contentsObj?.str || parameters.data.richText?.str);\n            super(parameters, {\n              isRenderable,\n              ignoreBorder: true\n            });\n          }\n\n          render() {\n            this.container.className = \"freeTextAnnotation\";\n\n            if (!this.data.hasPopup) {\n              this._createPopup(null, this.data);\n            }\n\n            return this.container;\n          }\n\n        }\n\n        class LineAnnotationElement extends AnnotationElement {\n          constructor(parameters) {\n            const isRenderable = !!(parameters.data.hasPopup || parameters.data.titleObj?.str || parameters.data.contentsObj?.str || parameters.data.richText?.str);\n            super(parameters, {\n              isRenderable,\n              ignoreBorder: true\n            });\n          }\n\n          render() {\n            this.container.className = \"lineAnnotation\";\n            const data = this.data;\n            const width = data.rect[2] - data.rect[0];\n            const height = data.rect[3] - data.rect[1];\n            const svg = this.svgFactory.create(width, height);\n            const line = this.svgFactory.createElement(\"svg:line\");\n            line.setAttribute(\"x1\", data.rect[2] - data.lineCoordinates[0]);\n            line.setAttribute(\"y1\", data.rect[3] - data.lineCoordinates[1]);\n            line.setAttribute(\"x2\", data.rect[2] - data.lineCoordinates[2]);\n            line.setAttribute(\"y2\", data.rect[3] - data.lineCoordinates[3]);\n            line.setAttribute(\"stroke-width\", data.borderStyle.width || 1);\n            line.setAttribute(\"stroke\", \"transparent\");\n            line.setAttribute(\"fill\", \"transparent\");\n            svg.appendChild(line);\n            this.container.append(svg);\n\n            this._createPopup(line, data);\n\n            return this.container;\n          }\n\n        }\n\n        class SquareAnnotationElement extends AnnotationElement {\n          constructor(parameters) {\n            const isRenderable = !!(parameters.data.hasPopup || parameters.data.titleObj?.str || parameters.data.contentsObj?.str || parameters.data.richText?.str);\n            super(parameters, {\n              isRenderable,\n              ignoreBorder: true\n            });\n          }\n\n          render() {\n            this.container.className = \"squareAnnotation\";\n            const data = this.data;\n            const width = data.rect[2] - data.rect[0];\n            const height = data.rect[3] - data.rect[1];\n            const svg = this.svgFactory.create(width, height);\n            const borderWidth = data.borderStyle.width;\n            const square = this.svgFactory.createElement(\"svg:rect\");\n            square.setAttribute(\"x\", borderWidth / 2);\n            square.setAttribute(\"y\", borderWidth / 2);\n            square.setAttribute(\"width\", width - borderWidth);\n            square.setAttribute(\"height\", height - borderWidth);\n            square.setAttribute(\"stroke-width\", borderWidth || 1);\n            square.setAttribute(\"stroke\", \"transparent\");\n            square.setAttribute(\"fill\", \"transparent\");\n            svg.appendChild(square);\n            this.container.append(svg);\n\n            this._createPopup(square, data);\n\n            return this.container;\n          }\n\n        }\n\n        class CircleAnnotationElement extends AnnotationElement {\n          constructor(parameters) {\n            const isRenderable = !!(parameters.data.hasPopup || parameters.data.titleObj?.str || parameters.data.contentsObj?.str || parameters.data.richText?.str);\n            super(parameters, {\n              isRenderable,\n              ignoreBorder: true\n            });\n          }\n\n          render() {\n            this.container.className = \"circleAnnotation\";\n            const data = this.data;\n            const width = data.rect[2] - data.rect[0];\n            const height = data.rect[3] - data.rect[1];\n            const svg = this.svgFactory.create(width, height);\n            const borderWidth = data.borderStyle.width;\n            const circle = this.svgFactory.createElement(\"svg:ellipse\");\n            circle.setAttribute(\"cx\", width / 2);\n            circle.setAttribute(\"cy\", height / 2);\n            circle.setAttribute(\"rx\", width / 2 - borderWidth / 2);\n            circle.setAttribute(\"ry\", height / 2 - borderWidth / 2);\n            circle.setAttribute(\"stroke-width\", borderWidth || 1);\n            circle.setAttribute(\"stroke\", \"transparent\");\n            circle.setAttribute(\"fill\", \"transparent\");\n            svg.appendChild(circle);\n            this.container.append(svg);\n\n            this._createPopup(circle, data);\n\n            return this.container;\n          }\n\n        }\n\n        class PolylineAnnotationElement extends AnnotationElement {\n          constructor(parameters) {\n            const isRenderable = !!(parameters.data.hasPopup || parameters.data.titleObj?.str || parameters.data.contentsObj?.str || parameters.data.richText?.str);\n            super(parameters, {\n              isRenderable,\n              ignoreBorder: true\n            });\n            this.containerClassName = \"polylineAnnotation\";\n            this.svgElementName = \"svg:polyline\";\n          }\n\n          render() {\n            this.container.className = this.containerClassName;\n            const data = this.data;\n            const width = data.rect[2] - data.rect[0];\n            const height = data.rect[3] - data.rect[1];\n            const svg = this.svgFactory.create(width, height);\n            let points = [];\n\n            for (const coordinate of data.vertices) {\n              const x = coordinate.x - data.rect[0];\n              const y = data.rect[3] - coordinate.y;\n              points.push(x + \",\" + y);\n            }\n\n            points = points.join(\" \");\n            const polyline = this.svgFactory.createElement(this.svgElementName);\n            polyline.setAttribute(\"points\", points);\n            polyline.setAttribute(\"stroke-width\", data.borderStyle.width || 1);\n            polyline.setAttribute(\"stroke\", \"transparent\");\n            polyline.setAttribute(\"fill\", \"transparent\");\n            svg.appendChild(polyline);\n            this.container.append(svg);\n\n            this._createPopup(polyline, data);\n\n            return this.container;\n          }\n\n        }\n\n        class PolygonAnnotationElement extends PolylineAnnotationElement {\n          constructor(parameters) {\n            super(parameters);\n            this.containerClassName = \"polygonAnnotation\";\n            this.svgElementName = \"svg:polygon\";\n          }\n\n        }\n\n        class CaretAnnotationElement extends AnnotationElement {\n          constructor(parameters) {\n            const isRenderable = !!(parameters.data.hasPopup || parameters.data.titleObj?.str || parameters.data.contentsObj?.str || parameters.data.richText?.str);\n            super(parameters, {\n              isRenderable,\n              ignoreBorder: true\n            });\n          }\n\n          render() {\n            this.container.className = \"caretAnnotation\";\n\n            if (!this.data.hasPopup) {\n              this._createPopup(null, this.data);\n            }\n\n            return this.container;\n          }\n\n        }\n\n        class InkAnnotationElement extends AnnotationElement {\n          constructor(parameters) {\n            const isRenderable = !!(parameters.data.hasPopup || parameters.data.titleObj?.str || parameters.data.contentsObj?.str || parameters.data.richText?.str);\n            super(parameters, {\n              isRenderable,\n              ignoreBorder: true\n            });\n            this.containerClassName = \"inkAnnotation\";\n            this.svgElementName = \"svg:polyline\";\n          }\n\n          render() {\n            this.container.className = this.containerClassName;\n            const data = this.data;\n            const width = data.rect[2] - data.rect[0];\n            const height = data.rect[3] - data.rect[1];\n            const svg = this.svgFactory.create(width, height);\n\n            for (const inkList of data.inkLists) {\n              let points = [];\n\n              for (const coordinate of inkList) {\n                const x = coordinate.x - data.rect[0];\n                const y = data.rect[3] - coordinate.y;\n                points.push(`${x},${y}`);\n              }\n\n              points = points.join(\" \");\n              const polyline = this.svgFactory.createElement(this.svgElementName);\n              polyline.setAttribute(\"points\", points);\n              polyline.setAttribute(\"stroke-width\", data.borderStyle.width || 1);\n              polyline.setAttribute(\"stroke\", \"transparent\");\n              polyline.setAttribute(\"fill\", \"transparent\");\n\n              this._createPopup(polyline, data);\n\n              svg.appendChild(polyline);\n            }\n\n            this.container.append(svg);\n            return this.container;\n          }\n\n        }\n\n        class HighlightAnnotationElement extends AnnotationElement {\n          constructor(parameters) {\n            const isRenderable = !!(parameters.data.hasPopup || parameters.data.titleObj?.str || parameters.data.contentsObj?.str || parameters.data.richText?.str);\n            super(parameters, {\n              isRenderable,\n              ignoreBorder: true,\n              createQuadrilaterals: true\n            });\n          }\n\n          render() {\n            if (!this.data.hasPopup) {\n              this._createPopup(null, this.data);\n            }\n\n            if (this.quadrilaterals) {\n              return this._renderQuadrilaterals(\"highlightAnnotation\");\n            }\n\n            this.container.className = \"highlightAnnotation\";\n            return this.container;\n          }\n\n        }\n\n        class UnderlineAnnotationElement extends AnnotationElement {\n          constructor(parameters) {\n            const isRenderable = !!(parameters.data.hasPopup || parameters.data.titleObj?.str || parameters.data.contentsObj?.str || parameters.data.richText?.str);\n            super(parameters, {\n              isRenderable,\n              ignoreBorder: true,\n              createQuadrilaterals: true\n            });\n          }\n\n          render() {\n            if (!this.data.hasPopup) {\n              this._createPopup(null, this.data);\n            }\n\n            if (this.quadrilaterals) {\n              return this._renderQuadrilaterals(\"underlineAnnotation\");\n            }\n\n            this.container.className = \"underlineAnnotation\";\n            return this.container;\n          }\n\n        }\n\n        class SquigglyAnnotationElement extends AnnotationElement {\n          constructor(parameters) {\n            const isRenderable = !!(parameters.data.hasPopup || parameters.data.titleObj?.str || parameters.data.contentsObj?.str || parameters.data.richText?.str);\n            super(parameters, {\n              isRenderable,\n              ignoreBorder: true,\n              createQuadrilaterals: true\n            });\n          }\n\n          render() {\n            if (!this.data.hasPopup) {\n              this._createPopup(null, this.data);\n            }\n\n            if (this.quadrilaterals) {\n              return this._renderQuadrilaterals(\"squigglyAnnotation\");\n            }\n\n            this.container.className = \"squigglyAnnotation\";\n            return this.container;\n          }\n\n        }\n\n        class StrikeOutAnnotationElement extends AnnotationElement {\n          constructor(parameters) {\n            const isRenderable = !!(parameters.data.hasPopup || parameters.data.titleObj?.str || parameters.data.contentsObj?.str || parameters.data.richText?.str);\n            super(parameters, {\n              isRenderable,\n              ignoreBorder: true,\n              createQuadrilaterals: true\n            });\n          }\n\n          render() {\n            if (!this.data.hasPopup) {\n              this._createPopup(null, this.data);\n            }\n\n            if (this.quadrilaterals) {\n              return this._renderQuadrilaterals(\"strikeoutAnnotation\");\n            }\n\n            this.container.className = \"strikeoutAnnotation\";\n            return this.container;\n          }\n\n        }\n\n        class StampAnnotationElement extends AnnotationElement {\n          constructor(parameters) {\n            const isRenderable = !!(parameters.data.hasPopup || parameters.data.titleObj?.str || parameters.data.contentsObj?.str || parameters.data.richText?.str);\n            super(parameters, {\n              isRenderable,\n              ignoreBorder: true\n            });\n          }\n\n          render() {\n            this.container.className = \"stampAnnotation\";\n\n            if (!this.data.hasPopup) {\n              this._createPopup(null, this.data);\n            }\n\n            return this.container;\n          }\n\n        }\n\n        class FileAttachmentAnnotationElement extends AnnotationElement {\n          constructor(parameters) {\n            super(parameters, {\n              isRenderable: true\n            });\n            const {\n              filename,\n              content\n            } = this.data.file;\n            this.filename = (0, _display_utils.getFilenameFromUrl)(filename);\n            this.content = content;\n            this.linkService.eventBus?.dispatch(\"fileattachmentannotation\", {\n              source: this,\n              id: (0, _util.stringToPDFString)(filename),\n              filename,\n              content\n            });\n          }\n\n          render() {\n            this.container.className = \"fileAttachmentAnnotation\";\n            const trigger = document.createElement(\"div\");\n            trigger.style.height = this.container.style.height;\n            trigger.style.width = this.container.style.width;\n            trigger.addEventListener(\"dblclick\", this._download.bind(this));\n\n            if (!this.data.hasPopup && (this.data.titleObj?.str || this.data.contentsObj?.str || this.data.richText)) {\n              this._createPopup(trigger, this.data);\n            }\n\n            this.container.appendChild(trigger);\n            return this.container;\n          }\n\n          _download() {\n            this.downloadManager?.openOrDownloadData(this.container, this.content, this.filename);\n          }\n\n        }\n\n        class AnnotationLayer {\n          static render(parameters) {\n            const sortedAnnotations = [],\n                  popupAnnotations = [];\n\n            for (const data of parameters.annotations) {\n              if (!data) {\n                continue;\n              }\n\n              if (data.annotationType === _util.AnnotationType.POPUP) {\n                popupAnnotations.push(data);\n                continue;\n              }\n\n              sortedAnnotations.push(data);\n            }\n\n            if (popupAnnotations.length) {\n              sortedAnnotations.push(...popupAnnotations);\n            }\n\n            const div = parameters.div;\n\n            for (const data of sortedAnnotations) {\n              const element = AnnotationElementFactory.create({\n                data,\n                layer: div,\n                page: parameters.page,\n                viewport: parameters.viewport,\n                linkService: parameters.linkService,\n                downloadManager: parameters.downloadManager,\n                imageResourcesPath: parameters.imageResourcesPath || \"\",\n                renderForms: parameters.renderForms !== false,\n                svgFactory: new _display_utils.DOMSVGFactory(),\n                annotationStorage: parameters.annotationStorage || new _annotation_storage.AnnotationStorage(),\n                enableScripting: parameters.enableScripting,\n                hasJSActions: parameters.hasJSActions,\n                fieldObjects: parameters.fieldObjects,\n                mouseState: parameters.mouseState || {\n                  isDown: false\n                }\n              });\n\n              if (element.isRenderable) {\n                const rendered = element.render();\n\n                if (data.hidden) {\n                  rendered.style.visibility = \"hidden\";\n                }\n\n                if (Array.isArray(rendered)) {\n                  for (const renderedElement of rendered) {\n                    div.appendChild(renderedElement);\n                  }\n                } else {\n                  if (element instanceof PopupAnnotationElement) {\n                    div.prepend(rendered);\n                  } else {\n                    div.appendChild(rendered);\n                  }\n                }\n              }\n            }\n\n            this.#setAnnotationCanvasMap(div, parameters.annotationCanvasMap);\n          }\n\n          static update(parameters) {\n            const {\n              page,\n              viewport,\n              annotations,\n              annotationCanvasMap,\n              div\n            } = parameters;\n            const transform = viewport.transform;\n            const matrix = `matrix(${transform.join(\",\")})`;\n            let scale, ownMatrix;\n\n            for (const data of annotations) {\n              const elements = div.querySelectorAll(`[data-annotation-id=\"${data.id}\"]`);\n\n              if (elements) {\n                for (const element of elements) {\n                  if (data.hasOwnCanvas) {\n                    const rect = _util.Util.normalizeRect([data.rect[0], page.view[3] - data.rect[1] + page.view[1], data.rect[2], page.view[3] - data.rect[3] + page.view[1]]);\n\n                    if (!ownMatrix) {\n                      scale = Math.abs(transform[0] || transform[1]);\n                      const ownTransform = transform.slice();\n\n                      for (let i = 0; i < 4; i++) {\n                        ownTransform[i] = Math.sign(ownTransform[i]);\n                      }\n\n                      ownMatrix = `matrix(${ownTransform.join(\",\")})`;\n                    }\n\n                    const left = rect[0] * scale;\n                    const top = rect[1] * scale;\n                    element.style.left = `${left}px`;\n                    element.style.top = `${top}px`;\n                    element.style.transformOrigin = `${-left}px ${-top}px`;\n                    element.style.transform = ownMatrix;\n                  } else {\n                    element.style.transform = matrix;\n                  }\n                }\n              }\n            }\n\n            this.#setAnnotationCanvasMap(div, annotationCanvasMap);\n            div.hidden = false;\n          }\n\n          static #setAnnotationCanvasMap(div, annotationCanvasMap) {\n            if (!annotationCanvasMap) {\n              return;\n            }\n\n            for (const [id, canvas] of annotationCanvasMap) {\n              const element = div.querySelector(`[data-annotation-id=\"${id}\"]`);\n\n              if (!element) {\n                continue;\n              }\n\n              const {\n                firstChild\n              } = element;\n\n              if (firstChild.nodeName === \"CANVAS\") {\n                element.replaceChild(canvas, firstChild);\n              } else {\n                element.insertBefore(canvas, firstChild);\n              }\n            }\n\n            annotationCanvasMap.clear();\n          }\n\n        }\n\n        exports.AnnotationLayer = AnnotationLayer;\n        /***/\n      },\n      /* 19 */\n\n      /***/\n      (__unused_webpack_module, exports) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.ColorConverters = void 0;\n\n        function makeColorComp(n) {\n          return Math.floor(Math.max(0, Math.min(1, n)) * 255).toString(16).padStart(2, \"0\");\n        }\n\n        class ColorConverters {\n          static CMYK_G(_ref27) {\n            let [c, y, m, k] = _ref27;\n            return [\"G\", 1 - Math.min(1, 0.3 * c + 0.59 * m + 0.11 * y + k)];\n          }\n\n          static G_CMYK(_ref28) {\n            let [g] = _ref28;\n            return [\"CMYK\", 0, 0, 0, 1 - g];\n          }\n\n          static G_RGB(_ref29) {\n            let [g] = _ref29;\n            return [\"RGB\", g, g, g];\n          }\n\n          static G_HTML(_ref30) {\n            let [g] = _ref30;\n            const G = makeColorComp(g);\n            return `#${G}${G}${G}`;\n          }\n\n          static RGB_G(_ref31) {\n            let [r, g, b] = _ref31;\n            return [\"G\", 0.3 * r + 0.59 * g + 0.11 * b];\n          }\n\n          static RGB_HTML(_ref32) {\n            let [r, g, b] = _ref32;\n            const R = makeColorComp(r);\n            const G = makeColorComp(g);\n            const B = makeColorComp(b);\n            return `#${R}${G}${B}`;\n          }\n\n          static T_HTML() {\n            return \"#00000000\";\n          }\n\n          static CMYK_RGB(_ref33) {\n            let [c, y, m, k] = _ref33;\n            return [\"RGB\", 1 - Math.min(1, c + k), 1 - Math.min(1, m + k), 1 - Math.min(1, y + k)];\n          }\n\n          static CMYK_HTML(components) {\n            return this.RGB_HTML(this.CMYK_RGB(components));\n          }\n\n          static RGB_CMYK(_ref34) {\n            let [r, g, b] = _ref34;\n            const c = 1 - r;\n            const m = 1 - g;\n            const y = 1 - b;\n            const k = Math.min(c, m, y);\n            return [\"CMYK\", c, m, y, k];\n          }\n\n        }\n\n        exports.ColorConverters = ColorConverters;\n        /***/\n      },\n      /* 20 */\n\n      /***/\n      (__unused_webpack_module, exports, __w_pdfjs_require__) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.XfaLayer = void 0;\n\n        var _util = __w_pdfjs_require__(2);\n\n        var _xfa_text = __w_pdfjs_require__(17);\n\n        class XfaLayer {\n          static setupStorage(html, id, element, storage, intent) {\n            const storedData = storage.getValue(id, {\n              value: null\n            });\n\n            switch (element.name) {\n              case \"textarea\":\n                if (storedData.value !== null) {\n                  html.textContent = storedData.value;\n                }\n\n                if (intent === \"print\") {\n                  break;\n                }\n\n                html.addEventListener(\"input\", event => {\n                  storage.setValue(id, {\n                    value: event.target.value\n                  });\n                });\n                break;\n\n              case \"input\":\n                if (element.attributes.type === \"radio\" || element.attributes.type === \"checkbox\") {\n                  if (storedData.value === element.attributes.xfaOn) {\n                    html.setAttribute(\"checked\", true);\n                  } else if (storedData.value === element.attributes.xfaOff) {\n                    html.removeAttribute(\"checked\");\n                  }\n\n                  if (intent === \"print\") {\n                    break;\n                  }\n\n                  html.addEventListener(\"change\", event => {\n                    storage.setValue(id, {\n                      value: event.target.checked ? event.target.getAttribute(\"xfaOn\") : event.target.getAttribute(\"xfaOff\")\n                    });\n                  });\n                } else {\n                  if (storedData.value !== null) {\n                    html.setAttribute(\"value\", storedData.value);\n                  }\n\n                  if (intent === \"print\") {\n                    break;\n                  }\n\n                  html.addEventListener(\"input\", event => {\n                    storage.setValue(id, {\n                      value: event.target.value\n                    });\n                  });\n                }\n\n                break;\n\n              case \"select\":\n                if (storedData.value !== null) {\n                  for (const option of element.children) {\n                    if (option.attributes.value === storedData.value) {\n                      option.attributes.selected = true;\n                    }\n                  }\n                }\n\n                html.addEventListener(\"input\", event => {\n                  const options = event.target.options;\n                  const value = options.selectedIndex === -1 ? \"\" : options[options.selectedIndex].value;\n                  storage.setValue(id, {\n                    value\n                  });\n                });\n                break;\n            }\n          }\n\n          static setAttributes(_ref35) {\n            let {\n              html,\n              element,\n              storage = null,\n              intent,\n              linkService\n            } = _ref35;\n            const {\n              attributes\n            } = element;\n            const isHTMLAnchorElement = html instanceof HTMLAnchorElement;\n\n            if (attributes.type === \"radio\") {\n              attributes.name = `${attributes.name}-${intent}`;\n            }\n\n            for (const [key, value] of Object.entries(attributes)) {\n              if (value === null || value === undefined || key === \"dataId\") {\n                continue;\n              }\n\n              if (key !== \"style\") {\n                if (key === \"textContent\") {\n                  html.textContent = value;\n                } else if (key === \"class\") {\n                  if (value.length) {\n                    html.setAttribute(key, value.join(\" \"));\n                  }\n                } else {\n                  if (isHTMLAnchorElement && (key === \"href\" || key === \"newWindow\")) {\n                    continue;\n                  }\n\n                  html.setAttribute(key, value);\n                }\n              } else {\n                Object.assign(html.style, value);\n              }\n            }\n\n            if (isHTMLAnchorElement) {\n              if (!linkService.addLinkAttributes) {\n                (0, _util.warn)(\"XfaLayer.setAttribute - missing `addLinkAttributes`-method on the `linkService`-instance.\");\n              }\n\n              linkService.addLinkAttributes?.(html, attributes.href, attributes.newWindow);\n            }\n\n            if (storage && attributes.dataId) {\n              this.setupStorage(html, attributes.dataId, element, storage);\n            }\n          }\n\n          static render(parameters) {\n            const storage = parameters.annotationStorage;\n            const linkService = parameters.linkService;\n            const root = parameters.xfaHtml;\n            const intent = parameters.intent || \"display\";\n            const rootHtml = document.createElement(root.name);\n\n            if (root.attributes) {\n              this.setAttributes({\n                html: rootHtml,\n                element: root,\n                intent,\n                linkService\n              });\n            }\n\n            const stack = [[root, -1, rootHtml]];\n            const rootDiv = parameters.div;\n            rootDiv.appendChild(rootHtml);\n\n            if (parameters.viewport) {\n              const transform = `matrix(${parameters.viewport.transform.join(\",\")})`;\n              rootDiv.style.transform = transform;\n            }\n\n            if (intent !== \"richText\") {\n              rootDiv.setAttribute(\"class\", \"xfaLayer xfaFont\");\n            }\n\n            const textDivs = [];\n\n            while (stack.length > 0) {\n              const [parent, i, html] = stack[stack.length - 1];\n\n              if (i + 1 === parent.children.length) {\n                stack.pop();\n                continue;\n              }\n\n              const child = parent.children[++stack[stack.length - 1][1]];\n\n              if (child === null) {\n                continue;\n              }\n\n              const {\n                name\n              } = child;\n\n              if (name === \"#text\") {\n                const node = document.createTextNode(child.value);\n                textDivs.push(node);\n                html.appendChild(node);\n                continue;\n              }\n\n              let childHtml;\n\n              if (child?.attributes?.xmlns) {\n                childHtml = document.createElementNS(child.attributes.xmlns, name);\n              } else {\n                childHtml = document.createElement(name);\n              }\n\n              html.appendChild(childHtml);\n\n              if (child.attributes) {\n                this.setAttributes({\n                  html: childHtml,\n                  element: child,\n                  storage,\n                  intent,\n                  linkService\n                });\n              }\n\n              if (child.children && child.children.length > 0) {\n                stack.push([child, -1, childHtml]);\n              } else if (child.value) {\n                const node = document.createTextNode(child.value);\n\n                if (_xfa_text.XfaText.shouldBuildText(name)) {\n                  textDivs.push(node);\n                }\n\n                childHtml.appendChild(node);\n              }\n            }\n\n            for (const el of rootDiv.querySelectorAll(\".xfaNonInteractive input, .xfaNonInteractive textarea\")) {\n              el.setAttribute(\"readOnly\", true);\n            }\n\n            return {\n              textDivs\n            };\n          }\n\n          static update(parameters) {\n            const transform = `matrix(${parameters.viewport.transform.join(\",\")})`;\n            parameters.div.style.transform = transform;\n            parameters.div.hidden = false;\n          }\n\n        }\n\n        exports.XfaLayer = XfaLayer;\n        /***/\n      },\n      /* 21 */\n\n      /***/\n      (__unused_webpack_module, exports, __w_pdfjs_require__) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.renderTextLayer = renderTextLayer;\n\n        var _util = __w_pdfjs_require__(2);\n\n        const MAX_TEXT_DIVS_TO_RENDER = 100000;\n        const DEFAULT_FONT_SIZE = 30;\n        const DEFAULT_FONT_ASCENT = 0.8;\n        const ascentCache = new Map();\n        const AllWhitespaceRegexp = /^\\s+$/g;\n\n        function getAscent(fontFamily, ctx) {\n          const cachedAscent = ascentCache.get(fontFamily);\n\n          if (cachedAscent) {\n            return cachedAscent;\n          }\n\n          ctx.save();\n          ctx.font = `${DEFAULT_FONT_SIZE}px ${fontFamily}`;\n          const metrics = ctx.measureText(\"\");\n          let ascent = metrics.fontBoundingBoxAscent;\n          let descent = Math.abs(metrics.fontBoundingBoxDescent);\n\n          if (ascent) {\n            ctx.restore();\n            const ratio = ascent / (ascent + descent);\n            ascentCache.set(fontFamily, ratio);\n            return ratio;\n          }\n\n          ctx.strokeStyle = \"red\";\n          ctx.clearRect(0, 0, DEFAULT_FONT_SIZE, DEFAULT_FONT_SIZE);\n          ctx.strokeText(\"g\", 0, 0);\n          let pixels = ctx.getImageData(0, 0, DEFAULT_FONT_SIZE, DEFAULT_FONT_SIZE).data;\n          descent = 0;\n\n          for (let i = pixels.length - 1 - 3; i >= 0; i -= 4) {\n            if (pixels[i] > 0) {\n              descent = Math.ceil(i / 4 / DEFAULT_FONT_SIZE);\n              break;\n            }\n          }\n\n          ctx.clearRect(0, 0, DEFAULT_FONT_SIZE, DEFAULT_FONT_SIZE);\n          ctx.strokeText(\"A\", 0, DEFAULT_FONT_SIZE);\n          pixels = ctx.getImageData(0, 0, DEFAULT_FONT_SIZE, DEFAULT_FONT_SIZE).data;\n          ascent = 0;\n\n          for (let i = 0, ii = pixels.length; i < ii; i += 4) {\n            if (pixels[i] > 0) {\n              ascent = DEFAULT_FONT_SIZE - Math.floor(i / 4 / DEFAULT_FONT_SIZE);\n              break;\n            }\n          }\n\n          ctx.restore();\n\n          if (ascent) {\n            const ratio = ascent / (ascent + descent);\n            ascentCache.set(fontFamily, ratio);\n            return ratio;\n          }\n\n          ascentCache.set(fontFamily, DEFAULT_FONT_ASCENT);\n          return DEFAULT_FONT_ASCENT;\n        }\n\n        function appendText(task, geom, styles, ctx) {\n          const textDiv = document.createElement(\"span\");\n          const textDivProperties = task._enhanceTextSelection ? {\n            angle: 0,\n            canvasWidth: 0,\n            hasText: geom.str !== \"\",\n            hasEOL: geom.hasEOL,\n            originalTransform: null,\n            paddingBottom: 0,\n            paddingLeft: 0,\n            paddingRight: 0,\n            paddingTop: 0,\n            scale: 1\n          } : {\n            angle: 0,\n            canvasWidth: 0,\n            hasText: geom.str !== \"\",\n            hasEOL: geom.hasEOL\n          };\n\n          task._textDivs.push(textDiv);\n\n          const tx = _util.Util.transform(task._viewport.transform, geom.transform);\n\n          let angle = Math.atan2(tx[1], tx[0]);\n          const style = styles[geom.fontName];\n\n          if (style.vertical) {\n            angle += Math.PI / 2;\n          }\n\n          const fontHeight = Math.hypot(tx[2], tx[3]);\n          const fontAscent = fontHeight * getAscent(style.fontFamily, ctx);\n          let left, top;\n\n          if (angle === 0) {\n            left = tx[4];\n            top = tx[5] - fontAscent;\n          } else {\n            left = tx[4] + fontAscent * Math.sin(angle);\n            top = tx[5] - fontAscent * Math.cos(angle);\n          }\n\n          textDiv.style.left = `${left}px`;\n          textDiv.style.top = `${top}px`;\n          textDiv.style.fontSize = `${fontHeight}px`;\n          textDiv.style.fontFamily = style.fontFamily;\n          textDiv.setAttribute(\"role\", \"presentation\");\n          textDiv.textContent = geom.str;\n          textDiv.dir = geom.dir;\n\n          if (task._fontInspectorEnabled) {\n            textDiv.dataset.fontName = geom.fontName;\n          }\n\n          if (angle !== 0) {\n            textDivProperties.angle = angle * (180 / Math.PI);\n          }\n\n          let shouldScaleText = false;\n\n          if (geom.str.length > 1 || task._enhanceTextSelection && AllWhitespaceRegexp.test(geom.str)) {\n            shouldScaleText = true;\n          } else if (geom.str !== \" \" && geom.transform[0] !== geom.transform[3]) {\n            const absScaleX = Math.abs(geom.transform[0]),\n                  absScaleY = Math.abs(geom.transform[3]);\n\n            if (absScaleX !== absScaleY && Math.max(absScaleX, absScaleY) / Math.min(absScaleX, absScaleY) > 1.5) {\n              shouldScaleText = true;\n            }\n          }\n\n          if (shouldScaleText) {\n            if (style.vertical) {\n              textDivProperties.canvasWidth = geom.height * task._viewport.scale;\n            } else {\n              textDivProperties.canvasWidth = geom.width * task._viewport.scale;\n            }\n          }\n\n          task._textDivProperties.set(textDiv, textDivProperties);\n\n          if (task._textContentStream) {\n            task._layoutText(textDiv);\n          }\n\n          if (task._enhanceTextSelection && textDivProperties.hasText) {\n            let angleCos = 1,\n                angleSin = 0;\n\n            if (angle !== 0) {\n              angleCos = Math.cos(angle);\n              angleSin = Math.sin(angle);\n            }\n\n            const divWidth = (style.vertical ? geom.height : geom.width) * task._viewport.scale;\n            const divHeight = fontHeight;\n            let m, b;\n\n            if (angle !== 0) {\n              m = [angleCos, angleSin, -angleSin, angleCos, left, top];\n              b = _util.Util.getAxialAlignedBoundingBox([0, 0, divWidth, divHeight], m);\n            } else {\n              b = [left, top, left + divWidth, top + divHeight];\n            }\n\n            task._bounds.push({\n              left: b[0],\n              top: b[1],\n              right: b[2],\n              bottom: b[3],\n              div: textDiv,\n              size: [divWidth, divHeight],\n              m\n            });\n          }\n        }\n\n        function render(task) {\n          if (task._canceled) {\n            return;\n          }\n\n          const textDivs = task._textDivs;\n          const capability = task._capability;\n          const textDivsLength = textDivs.length;\n\n          if (textDivsLength > MAX_TEXT_DIVS_TO_RENDER) {\n            task._renderingDone = true;\n            capability.resolve();\n            return;\n          }\n\n          if (!task._textContentStream) {\n            for (let i = 0; i < textDivsLength; i++) {\n              task._layoutText(textDivs[i]);\n            }\n          }\n\n          task._renderingDone = true;\n          capability.resolve();\n        }\n\n        function findPositiveMin(ts, offset, count) {\n          let result = 0;\n\n          for (let i = 0; i < count; i++) {\n            const t = ts[offset++];\n\n            if (t > 0) {\n              result = result ? Math.min(t, result) : t;\n            }\n          }\n\n          return result;\n        }\n\n        function expand(task) {\n          const bounds = task._bounds;\n          const viewport = task._viewport;\n          const expanded = expandBounds(viewport.width, viewport.height, bounds);\n\n          for (let i = 0; i < expanded.length; i++) {\n            const div = bounds[i].div;\n\n            const divProperties = task._textDivProperties.get(div);\n\n            if (divProperties.angle === 0) {\n              divProperties.paddingLeft = bounds[i].left - expanded[i].left;\n              divProperties.paddingTop = bounds[i].top - expanded[i].top;\n              divProperties.paddingRight = expanded[i].right - bounds[i].right;\n              divProperties.paddingBottom = expanded[i].bottom - bounds[i].bottom;\n\n              task._textDivProperties.set(div, divProperties);\n\n              continue;\n            }\n\n            const e = expanded[i],\n                  b = bounds[i];\n            const m = b.m,\n                  c = m[0],\n                  s = m[1];\n            const points = [[0, 0], [0, b.size[1]], [b.size[0], 0], b.size];\n            const ts = new Float64Array(64);\n\n            for (let j = 0, jj = points.length; j < jj; j++) {\n              const t = _util.Util.applyTransform(points[j], m);\n\n              ts[j + 0] = c && (e.left - t[0]) / c;\n              ts[j + 4] = s && (e.top - t[1]) / s;\n              ts[j + 8] = c && (e.right - t[0]) / c;\n              ts[j + 12] = s && (e.bottom - t[1]) / s;\n              ts[j + 16] = s && (e.left - t[0]) / -s;\n              ts[j + 20] = c && (e.top - t[1]) / c;\n              ts[j + 24] = s && (e.right - t[0]) / -s;\n              ts[j + 28] = c && (e.bottom - t[1]) / c;\n              ts[j + 32] = c && (e.left - t[0]) / -c;\n              ts[j + 36] = s && (e.top - t[1]) / -s;\n              ts[j + 40] = c && (e.right - t[0]) / -c;\n              ts[j + 44] = s && (e.bottom - t[1]) / -s;\n              ts[j + 48] = s && (e.left - t[0]) / s;\n              ts[j + 52] = c && (e.top - t[1]) / -c;\n              ts[j + 56] = s && (e.right - t[0]) / s;\n              ts[j + 60] = c && (e.bottom - t[1]) / -c;\n            }\n\n            const boxScale = 1 + Math.min(Math.abs(c), Math.abs(s));\n            divProperties.paddingLeft = findPositiveMin(ts, 32, 16) / boxScale;\n            divProperties.paddingTop = findPositiveMin(ts, 48, 16) / boxScale;\n            divProperties.paddingRight = findPositiveMin(ts, 0, 16) / boxScale;\n            divProperties.paddingBottom = findPositiveMin(ts, 16, 16) / boxScale;\n\n            task._textDivProperties.set(div, divProperties);\n          }\n        }\n\n        function expandBounds(width, height, boxes) {\n          const bounds = boxes.map(function (box, i) {\n            return {\n              x1: box.left,\n              y1: box.top,\n              x2: box.right,\n              y2: box.bottom,\n              index: i,\n              x1New: undefined,\n              x2New: undefined\n            };\n          });\n          expandBoundsLTR(width, bounds);\n          const expanded = new Array(boxes.length);\n\n          for (const b of bounds) {\n            const i = b.index;\n            expanded[i] = {\n              left: b.x1New,\n              top: 0,\n              right: b.x2New,\n              bottom: 0\n            };\n          }\n\n          boxes.map(function (box, i) {\n            const e = expanded[i],\n                  b = bounds[i];\n            b.x1 = box.top;\n            b.y1 = width - e.right;\n            b.x2 = box.bottom;\n            b.y2 = width - e.left;\n            b.index = i;\n            b.x1New = undefined;\n            b.x2New = undefined;\n          });\n          expandBoundsLTR(height, bounds);\n\n          for (const b of bounds) {\n            const i = b.index;\n            expanded[i].top = b.x1New;\n            expanded[i].bottom = b.x2New;\n          }\n\n          return expanded;\n        }\n\n        function expandBoundsLTR(width, bounds) {\n          bounds.sort(function (a, b) {\n            return a.x1 - b.x1 || a.index - b.index;\n          });\n          const fakeBoundary = {\n            x1: -Infinity,\n            y1: -Infinity,\n            x2: 0,\n            y2: Infinity,\n            index: -1,\n            x1New: 0,\n            x2New: 0\n          };\n          const horizon = [{\n            start: -Infinity,\n            end: Infinity,\n            boundary: fakeBoundary\n          }];\n\n          for (const boundary of bounds) {\n            let i = 0;\n\n            while (i < horizon.length && horizon[i].end <= boundary.y1) {\n              i++;\n            }\n\n            let j = horizon.length - 1;\n\n            while (j >= 0 && horizon[j].start >= boundary.y2) {\n              j--;\n            }\n\n            let horizonPart, affectedBoundary;\n            let q,\n                k,\n                maxXNew = -Infinity;\n\n            for (q = i; q <= j; q++) {\n              horizonPart = horizon[q];\n              affectedBoundary = horizonPart.boundary;\n              let xNew;\n\n              if (affectedBoundary.x2 > boundary.x1) {\n                xNew = affectedBoundary.index > boundary.index ? affectedBoundary.x1New : boundary.x1;\n              } else if (affectedBoundary.x2New === undefined) {\n                xNew = (affectedBoundary.x2 + boundary.x1) / 2;\n              } else {\n                xNew = affectedBoundary.x2New;\n              }\n\n              if (xNew > maxXNew) {\n                maxXNew = xNew;\n              }\n            }\n\n            boundary.x1New = maxXNew;\n\n            for (q = i; q <= j; q++) {\n              horizonPart = horizon[q];\n              affectedBoundary = horizonPart.boundary;\n\n              if (affectedBoundary.x2New === undefined) {\n                if (affectedBoundary.x2 > boundary.x1) {\n                  if (affectedBoundary.index > boundary.index) {\n                    affectedBoundary.x2New = affectedBoundary.x2;\n                  }\n                } else {\n                  affectedBoundary.x2New = maxXNew;\n                }\n              } else if (affectedBoundary.x2New > maxXNew) {\n                affectedBoundary.x2New = Math.max(maxXNew, affectedBoundary.x2);\n              }\n            }\n\n            const changedHorizon = [];\n            let lastBoundary = null;\n\n            for (q = i; q <= j; q++) {\n              horizonPart = horizon[q];\n              affectedBoundary = horizonPart.boundary;\n              const useBoundary = affectedBoundary.x2 > boundary.x2 ? affectedBoundary : boundary;\n\n              if (lastBoundary === useBoundary) {\n                changedHorizon[changedHorizon.length - 1].end = horizonPart.end;\n              } else {\n                changedHorizon.push({\n                  start: horizonPart.start,\n                  end: horizonPart.end,\n                  boundary: useBoundary\n                });\n                lastBoundary = useBoundary;\n              }\n            }\n\n            if (horizon[i].start < boundary.y1) {\n              changedHorizon[0].start = boundary.y1;\n              changedHorizon.unshift({\n                start: horizon[i].start,\n                end: boundary.y1,\n                boundary: horizon[i].boundary\n              });\n            }\n\n            if (boundary.y2 < horizon[j].end) {\n              changedHorizon[changedHorizon.length - 1].end = boundary.y2;\n              changedHorizon.push({\n                start: boundary.y2,\n                end: horizon[j].end,\n                boundary: horizon[j].boundary\n              });\n            }\n\n            for (q = i; q <= j; q++) {\n              horizonPart = horizon[q];\n              affectedBoundary = horizonPart.boundary;\n\n              if (affectedBoundary.x2New !== undefined) {\n                continue;\n              }\n\n              let used = false;\n\n              for (k = i - 1; !used && k >= 0 && horizon[k].start >= affectedBoundary.y1; k--) {\n                used = horizon[k].boundary === affectedBoundary;\n              }\n\n              for (k = j + 1; !used && k < horizon.length && horizon[k].end <= affectedBoundary.y2; k++) {\n                used = horizon[k].boundary === affectedBoundary;\n              }\n\n              for (k = 0; !used && k < changedHorizon.length; k++) {\n                used = changedHorizon[k].boundary === affectedBoundary;\n              }\n\n              if (!used) {\n                affectedBoundary.x2New = maxXNew;\n              }\n            }\n\n            Array.prototype.splice.apply(horizon, [i, j - i + 1].concat(changedHorizon));\n          }\n\n          for (const horizonPart of horizon) {\n            const affectedBoundary = horizonPart.boundary;\n\n            if (affectedBoundary.x2New === undefined) {\n              affectedBoundary.x2New = Math.max(width, affectedBoundary.x2);\n            }\n          }\n        }\n\n        class TextLayerRenderTask {\n          constructor(_ref36) {\n            let {\n              textContent,\n              textContentStream,\n              container,\n              viewport,\n              textDivs,\n              textContentItemsStr,\n              enhanceTextSelection\n            } = _ref36;\n            this._textContent = textContent;\n            this._textContentStream = textContentStream;\n            this._container = container;\n            this._document = container.ownerDocument;\n            this._viewport = viewport;\n            this._textDivs = textDivs || [];\n            this._textContentItemsStr = textContentItemsStr || [];\n            this._enhanceTextSelection = !!enhanceTextSelection;\n            this._fontInspectorEnabled = !!globalThis.FontInspector?.enabled;\n            this._reader = null;\n            this._layoutTextLastFontSize = null;\n            this._layoutTextLastFontFamily = null;\n            this._layoutTextCtx = null;\n            this._textDivProperties = new WeakMap();\n            this._renderingDone = false;\n            this._canceled = false;\n            this._capability = (0, _util.createPromiseCapability)();\n            this._renderTimer = null;\n            this._bounds = [];\n\n            this._capability.promise.finally(() => {\n              if (!this._enhanceTextSelection) {\n                this._textDivProperties = null;\n              }\n\n              if (this._layoutTextCtx) {\n                this._layoutTextCtx.canvas.width = 0;\n                this._layoutTextCtx.canvas.height = 0;\n                this._layoutTextCtx = null;\n              }\n            }).catch(() => {});\n          }\n\n          get promise() {\n            return this._capability.promise;\n          }\n\n          cancel() {\n            this._canceled = true;\n\n            if (this._reader) {\n              this._reader.cancel(new _util.AbortException(\"TextLayer task cancelled.\")).catch(() => {});\n\n              this._reader = null;\n            }\n\n            if (this._renderTimer !== null) {\n              clearTimeout(this._renderTimer);\n              this._renderTimer = null;\n            }\n\n            this._capability.reject(new Error(\"TextLayer task cancelled.\"));\n          }\n\n          _processItems(items, styleCache) {\n            for (let i = 0, len = items.length; i < len; i++) {\n              if (items[i].str === undefined) {\n                if (items[i].type === \"beginMarkedContentProps\" || items[i].type === \"beginMarkedContent\") {\n                  const parent = this._container;\n                  this._container = document.createElement(\"span\");\n\n                  this._container.classList.add(\"markedContent\");\n\n                  if (items[i].id !== null) {\n                    this._container.setAttribute(\"id\", `${items[i].id}`);\n                  }\n\n                  parent.appendChild(this._container);\n                } else if (items[i].type === \"endMarkedContent\") {\n                  this._container = this._container.parentNode;\n                }\n\n                continue;\n              }\n\n              this._textContentItemsStr.push(items[i].str);\n\n              appendText(this, items[i], styleCache, this._layoutTextCtx);\n            }\n          }\n\n          _layoutText(textDiv) {\n            const textDivProperties = this._textDivProperties.get(textDiv);\n\n            let transform = \"\";\n\n            if (textDivProperties.canvasWidth !== 0 && textDivProperties.hasText) {\n              const {\n                fontSize,\n                fontFamily\n              } = textDiv.style;\n\n              if (fontSize !== this._layoutTextLastFontSize || fontFamily !== this._layoutTextLastFontFamily) {\n                this._layoutTextCtx.font = `${fontSize} ${fontFamily}`;\n                this._layoutTextLastFontSize = fontSize;\n                this._layoutTextLastFontFamily = fontFamily;\n              }\n\n              const {\n                width\n              } = this._layoutTextCtx.measureText(textDiv.textContent);\n\n              if (width > 0) {\n                const scale = textDivProperties.canvasWidth / width;\n\n                if (this._enhanceTextSelection) {\n                  textDivProperties.scale = scale;\n                }\n\n                transform = `scaleX(${scale})`;\n              }\n            }\n\n            if (textDivProperties.angle !== 0) {\n              transform = `rotate(${textDivProperties.angle}deg) ${transform}`;\n            }\n\n            if (transform.length > 0) {\n              if (this._enhanceTextSelection) {\n                textDivProperties.originalTransform = transform;\n              }\n\n              textDiv.style.transform = transform;\n            }\n\n            if (textDivProperties.hasText) {\n              this._container.appendChild(textDiv);\n            }\n\n            if (textDivProperties.hasEOL) {\n              const br = document.createElement(\"br\");\n              br.setAttribute(\"role\", \"presentation\");\n\n              this._container.appendChild(br);\n            }\n          }\n\n          _render() {\n            let timeout = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n            const capability = (0, _util.createPromiseCapability)();\n            let styleCache = Object.create(null);\n\n            const canvas = this._document.createElement(\"canvas\");\n\n            canvas.height = canvas.width = DEFAULT_FONT_SIZE;\n            canvas.mozOpaque = true;\n            this._layoutTextCtx = canvas.getContext(\"2d\", {\n              alpha: false\n            });\n\n            if (this._textContent) {\n              const textItems = this._textContent.items;\n              const textStyles = this._textContent.styles;\n\n              this._processItems(textItems, textStyles);\n\n              capability.resolve();\n            } else if (this._textContentStream) {\n              const pump = () => {\n                this._reader.read().then(_ref37 => {\n                  let {\n                    value,\n                    done\n                  } = _ref37;\n\n                  if (done) {\n                    capability.resolve();\n                    return;\n                  }\n\n                  Object.assign(styleCache, value.styles);\n\n                  this._processItems(value.items, styleCache);\n\n                  pump();\n                }, capability.reject);\n              };\n\n              this._reader = this._textContentStream.getReader();\n              pump();\n            } else {\n              throw new Error('Neither \"textContent\" nor \"textContentStream\" parameters specified.');\n            }\n\n            capability.promise.then(() => {\n              styleCache = null;\n\n              if (!timeout) {\n                render(this);\n              } else {\n                this._renderTimer = setTimeout(() => {\n                  render(this);\n                  this._renderTimer = null;\n                }, timeout);\n              }\n            }, this._capability.reject);\n          }\n\n          expandTextDivs() {\n            let expandDivs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n            if (!this._enhanceTextSelection || !this._renderingDone) {\n              return;\n            }\n\n            if (this._bounds !== null) {\n              expand(this);\n              this._bounds = null;\n            }\n\n            const transformBuf = [],\n                  paddingBuf = [];\n\n            for (let i = 0, ii = this._textDivs.length; i < ii; i++) {\n              const div = this._textDivs[i];\n\n              const divProps = this._textDivProperties.get(div);\n\n              if (!divProps.hasText) {\n                continue;\n              }\n\n              if (expandDivs) {\n                transformBuf.length = 0;\n                paddingBuf.length = 0;\n\n                if (divProps.originalTransform) {\n                  transformBuf.push(divProps.originalTransform);\n                }\n\n                if (divProps.paddingTop > 0) {\n                  paddingBuf.push(`${divProps.paddingTop}px`);\n                  transformBuf.push(`translateY(${-divProps.paddingTop}px)`);\n                } else {\n                  paddingBuf.push(0);\n                }\n\n                if (divProps.paddingRight > 0) {\n                  paddingBuf.push(`${divProps.paddingRight / divProps.scale}px`);\n                } else {\n                  paddingBuf.push(0);\n                }\n\n                if (divProps.paddingBottom > 0) {\n                  paddingBuf.push(`${divProps.paddingBottom}px`);\n                } else {\n                  paddingBuf.push(0);\n                }\n\n                if (divProps.paddingLeft > 0) {\n                  paddingBuf.push(`${divProps.paddingLeft / divProps.scale}px`);\n                  transformBuf.push(`translateX(${-divProps.paddingLeft / divProps.scale}px)`);\n                } else {\n                  paddingBuf.push(0);\n                }\n\n                div.style.padding = paddingBuf.join(\" \");\n\n                if (transformBuf.length) {\n                  div.style.transform = transformBuf.join(\" \");\n                }\n              } else {\n                div.style.padding = null;\n                div.style.transform = divProps.originalTransform;\n              }\n            }\n          }\n\n        }\n\n        function renderTextLayer(renderParameters) {\n          const task = new TextLayerRenderTask({\n            textContent: renderParameters.textContent,\n            textContentStream: renderParameters.textContentStream,\n            container: renderParameters.container,\n            viewport: renderParameters.viewport,\n            textDivs: renderParameters.textDivs,\n            textContentItemsStr: renderParameters.textContentItemsStr,\n            enhanceTextSelection: renderParameters.enhanceTextSelection\n          });\n\n          task._render(renderParameters.timeout);\n\n          return task;\n        }\n        /***/\n\n      },\n      /* 22 */\n\n      /***/\n      (__unused_webpack_module, exports, __w_pdfjs_require__) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.SVGGraphics = void 0;\n\n        var _util = __w_pdfjs_require__(2);\n\n        var _display_utils = __w_pdfjs_require__(1);\n\n        var _is_node = __w_pdfjs_require__(4);\n\n        let SVGGraphics = class {\n          constructor() {\n            (0, _util.unreachable)(\"Not implemented: SVGGraphics\");\n          }\n\n        };\n        exports.SVGGraphics = SVGGraphics;\n        {\n          const SVG_DEFAULTS = {\n            fontStyle: \"normal\",\n            fontWeight: \"normal\",\n            fillColor: \"#000000\"\n          };\n          const XML_NS = \"http://www.w3.org/XML/1998/namespace\";\n          const XLINK_NS = \"http://www.w3.org/1999/xlink\";\n          const LINE_CAP_STYLES = [\"butt\", \"round\", \"square\"];\n          const LINE_JOIN_STYLES = [\"miter\", \"round\", \"bevel\"];\n\n          const convertImgDataToPng = function () {\n            const PNG_HEADER = new Uint8Array([0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a]);\n            const CHUNK_WRAPPER_SIZE = 12;\n            const crcTable = new Int32Array(256);\n\n            for (let i = 0; i < 256; i++) {\n              let c = i;\n\n              for (let h = 0; h < 8; h++) {\n                if (c & 1) {\n                  c = 0xedb88320 ^ c >> 1 & 0x7fffffff;\n                } else {\n                  c = c >> 1 & 0x7fffffff;\n                }\n              }\n\n              crcTable[i] = c;\n            }\n\n            function crc32(data, start, end) {\n              let crc = -1;\n\n              for (let i = start; i < end; i++) {\n                const a = (crc ^ data[i]) & 0xff;\n                const b = crcTable[a];\n                crc = crc >>> 8 ^ b;\n              }\n\n              return crc ^ -1;\n            }\n\n            function writePngChunk(type, body, data, offset) {\n              let p = offset;\n              const len = body.length;\n              data[p] = len >> 24 & 0xff;\n              data[p + 1] = len >> 16 & 0xff;\n              data[p + 2] = len >> 8 & 0xff;\n              data[p + 3] = len & 0xff;\n              p += 4;\n              data[p] = type.charCodeAt(0) & 0xff;\n              data[p + 1] = type.charCodeAt(1) & 0xff;\n              data[p + 2] = type.charCodeAt(2) & 0xff;\n              data[p + 3] = type.charCodeAt(3) & 0xff;\n              p += 4;\n              data.set(body, p);\n              p += body.length;\n              const crc = crc32(data, offset + 4, p);\n              data[p] = crc >> 24 & 0xff;\n              data[p + 1] = crc >> 16 & 0xff;\n              data[p + 2] = crc >> 8 & 0xff;\n              data[p + 3] = crc & 0xff;\n            }\n\n            function adler32(data, start, end) {\n              let a = 1;\n              let b = 0;\n\n              for (let i = start; i < end; ++i) {\n                a = (a + (data[i] & 0xff)) % 65521;\n                b = (b + a) % 65521;\n              }\n\n              return b << 16 | a;\n            }\n\n            function deflateSync(literals) {\n              if (!_is_node.isNodeJS) {\n                return deflateSyncUncompressed(literals);\n              }\n\n              try {\n                let input;\n\n                if (parseInt(process.versions.node) >= 8) {\n                  input = literals;\n                } else {\n                  input = Buffer.from(literals);\n                }\n\n                const output = require(\"zlib\").deflateSync(input, {\n                  level: 9\n                });\n\n                return output instanceof Uint8Array ? output : new Uint8Array(output);\n              } catch (e) {\n                (0, _util.warn)(\"Not compressing PNG because zlib.deflateSync is unavailable: \" + e);\n              }\n\n              return deflateSyncUncompressed(literals);\n            }\n\n            function deflateSyncUncompressed(literals) {\n              let len = literals.length;\n              const maxBlockLength = 0xffff;\n              const deflateBlocks = Math.ceil(len / maxBlockLength);\n              const idat = new Uint8Array(2 + len + deflateBlocks * 5 + 4);\n              let pi = 0;\n              idat[pi++] = 0x78;\n              idat[pi++] = 0x9c;\n              let pos = 0;\n\n              while (len > maxBlockLength) {\n                idat[pi++] = 0x00;\n                idat[pi++] = 0xff;\n                idat[pi++] = 0xff;\n                idat[pi++] = 0x00;\n                idat[pi++] = 0x00;\n                idat.set(literals.subarray(pos, pos + maxBlockLength), pi);\n                pi += maxBlockLength;\n                pos += maxBlockLength;\n                len -= maxBlockLength;\n              }\n\n              idat[pi++] = 0x01;\n              idat[pi++] = len & 0xff;\n              idat[pi++] = len >> 8 & 0xff;\n              idat[pi++] = ~len & 0xffff & 0xff;\n              idat[pi++] = (~len & 0xffff) >> 8 & 0xff;\n              idat.set(literals.subarray(pos), pi);\n              pi += literals.length - pos;\n              const adler = adler32(literals, 0, literals.length);\n              idat[pi++] = adler >> 24 & 0xff;\n              idat[pi++] = adler >> 16 & 0xff;\n              idat[pi++] = adler >> 8 & 0xff;\n              idat[pi++] = adler & 0xff;\n              return idat;\n            }\n\n            function encode(imgData, kind, forceDataSchema, isMask) {\n              const width = imgData.width;\n              const height = imgData.height;\n              let bitDepth, colorType, lineSize;\n              const bytes = imgData.data;\n\n              switch (kind) {\n                case _util.ImageKind.GRAYSCALE_1BPP:\n                  colorType = 0;\n                  bitDepth = 1;\n                  lineSize = width + 7 >> 3;\n                  break;\n\n                case _util.ImageKind.RGB_24BPP:\n                  colorType = 2;\n                  bitDepth = 8;\n                  lineSize = width * 3;\n                  break;\n\n                case _util.ImageKind.RGBA_32BPP:\n                  colorType = 6;\n                  bitDepth = 8;\n                  lineSize = width * 4;\n                  break;\n\n                default:\n                  throw new Error(\"invalid format\");\n              }\n\n              const literals = new Uint8Array((1 + lineSize) * height);\n              let offsetLiterals = 0,\n                  offsetBytes = 0;\n\n              for (let y = 0; y < height; ++y) {\n                literals[offsetLiterals++] = 0;\n                literals.set(bytes.subarray(offsetBytes, offsetBytes + lineSize), offsetLiterals);\n                offsetBytes += lineSize;\n                offsetLiterals += lineSize;\n              }\n\n              if (kind === _util.ImageKind.GRAYSCALE_1BPP && isMask) {\n                offsetLiterals = 0;\n\n                for (let y = 0; y < height; y++) {\n                  offsetLiterals++;\n\n                  for (let i = 0; i < lineSize; i++) {\n                    literals[offsetLiterals++] ^= 0xff;\n                  }\n                }\n              }\n\n              const ihdr = new Uint8Array([width >> 24 & 0xff, width >> 16 & 0xff, width >> 8 & 0xff, width & 0xff, height >> 24 & 0xff, height >> 16 & 0xff, height >> 8 & 0xff, height & 0xff, bitDepth, colorType, 0x00, 0x00, 0x00]);\n              const idat = deflateSync(literals);\n              const pngLength = PNG_HEADER.length + CHUNK_WRAPPER_SIZE * 3 + ihdr.length + idat.length;\n              const data = new Uint8Array(pngLength);\n              let offset = 0;\n              data.set(PNG_HEADER, offset);\n              offset += PNG_HEADER.length;\n              writePngChunk(\"IHDR\", ihdr, data, offset);\n              offset += CHUNK_WRAPPER_SIZE + ihdr.length;\n              writePngChunk(\"IDATA\", idat, data, offset);\n              offset += CHUNK_WRAPPER_SIZE + idat.length;\n              writePngChunk(\"IEND\", new Uint8Array(0), data, offset);\n              return (0, _util.createObjectURL)(data, \"image/png\", forceDataSchema);\n            }\n\n            return function convertImgDataToPng(imgData, forceDataSchema, isMask) {\n              const kind = imgData.kind === undefined ? _util.ImageKind.GRAYSCALE_1BPP : imgData.kind;\n              return encode(imgData, kind, forceDataSchema, isMask);\n            };\n          }();\n\n          class SVGExtraState {\n            constructor() {\n              this.fontSizeScale = 1;\n              this.fontWeight = SVG_DEFAULTS.fontWeight;\n              this.fontSize = 0;\n              this.textMatrix = _util.IDENTITY_MATRIX;\n              this.fontMatrix = _util.FONT_IDENTITY_MATRIX;\n              this.leading = 0;\n              this.textRenderingMode = _util.TextRenderingMode.FILL;\n              this.textMatrixScale = 1;\n              this.x = 0;\n              this.y = 0;\n              this.lineX = 0;\n              this.lineY = 0;\n              this.charSpacing = 0;\n              this.wordSpacing = 0;\n              this.textHScale = 1;\n              this.textRise = 0;\n              this.fillColor = SVG_DEFAULTS.fillColor;\n              this.strokeColor = \"#000000\";\n              this.fillAlpha = 1;\n              this.strokeAlpha = 1;\n              this.lineWidth = 1;\n              this.lineJoin = \"\";\n              this.lineCap = \"\";\n              this.miterLimit = 0;\n              this.dashArray = [];\n              this.dashPhase = 0;\n              this.dependencies = [];\n              this.activeClipUrl = null;\n              this.clipGroup = null;\n              this.maskId = \"\";\n            }\n\n            clone() {\n              return Object.create(this);\n            }\n\n            setCurrentPoint(x, y) {\n              this.x = x;\n              this.y = y;\n            }\n\n          }\n\n          function opListToTree(opList) {\n            let opTree = [];\n            const tmp = [];\n\n            for (const opListElement of opList) {\n              if (opListElement.fn === \"save\") {\n                opTree.push({\n                  fnId: 92,\n                  fn: \"group\",\n                  items: []\n                });\n                tmp.push(opTree);\n                opTree = opTree[opTree.length - 1].items;\n                continue;\n              }\n\n              if (opListElement.fn === \"restore\") {\n                opTree = tmp.pop();\n              } else {\n                opTree.push(opListElement);\n              }\n            }\n\n            return opTree;\n          }\n\n          function pf(value) {\n            if (Number.isInteger(value)) {\n              return value.toString();\n            }\n\n            const s = value.toFixed(10);\n            let i = s.length - 1;\n\n            if (s[i] !== \"0\") {\n              return s;\n            }\n\n            do {\n              i--;\n            } while (s[i] === \"0\");\n\n            return s.substring(0, s[i] === \".\" ? i : i + 1);\n          }\n\n          function pm(m) {\n            if (m[4] === 0 && m[5] === 0) {\n              if (m[1] === 0 && m[2] === 0) {\n                if (m[0] === 1 && m[3] === 1) {\n                  return \"\";\n                }\n\n                return `scale(${pf(m[0])} ${pf(m[3])})`;\n              }\n\n              if (m[0] === m[3] && m[1] === -m[2]) {\n                const a = Math.acos(m[0]) * 180 / Math.PI;\n                return `rotate(${pf(a)})`;\n              }\n            } else {\n              if (m[0] === 1 && m[1] === 0 && m[2] === 0 && m[3] === 1) {\n                return `translate(${pf(m[4])} ${pf(m[5])})`;\n              }\n            }\n\n            return `matrix(${pf(m[0])} ${pf(m[1])} ${pf(m[2])} ${pf(m[3])} ${pf(m[4])} ` + `${pf(m[5])})`;\n          }\n\n          let clipCount = 0;\n          let maskCount = 0;\n          let shadingCount = 0;\n          exports.SVGGraphics = SVGGraphics = class {\n            constructor(commonObjs, objs) {\n              let forceDataSchema = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n              this.svgFactory = new _display_utils.DOMSVGFactory();\n              this.current = new SVGExtraState();\n              this.transformMatrix = _util.IDENTITY_MATRIX;\n              this.transformStack = [];\n              this.extraStack = [];\n              this.commonObjs = commonObjs;\n              this.objs = objs;\n              this.pendingClip = null;\n              this.pendingEOFill = false;\n              this.embedFonts = false;\n              this.embeddedFonts = Object.create(null);\n              this.cssStyle = null;\n              this.forceDataSchema = !!forceDataSchema;\n              this._operatorIdMapping = [];\n\n              for (const op in _util.OPS) {\n                this._operatorIdMapping[_util.OPS[op]] = op;\n              }\n            }\n\n            save() {\n              this.transformStack.push(this.transformMatrix);\n              const old = this.current;\n              this.extraStack.push(old);\n              this.current = old.clone();\n            }\n\n            restore() {\n              this.transformMatrix = this.transformStack.pop();\n              this.current = this.extraStack.pop();\n              this.pendingClip = null;\n              this.tgrp = null;\n            }\n\n            group(items) {\n              this.save();\n              this.executeOpTree(items);\n              this.restore();\n            }\n\n            loadDependencies(operatorList) {\n              const fnArray = operatorList.fnArray;\n              const argsArray = operatorList.argsArray;\n\n              for (let i = 0, ii = fnArray.length; i < ii; i++) {\n                if (fnArray[i] !== _util.OPS.dependency) {\n                  continue;\n                }\n\n                for (const obj of argsArray[i]) {\n                  const objsPool = obj.startsWith(\"g_\") ? this.commonObjs : this.objs;\n                  const promise = new Promise(resolve => {\n                    objsPool.get(obj, resolve);\n                  });\n                  this.current.dependencies.push(promise);\n                }\n              }\n\n              return Promise.all(this.current.dependencies);\n            }\n\n            transform(a, b, c, d, e, f) {\n              const transformMatrix = [a, b, c, d, e, f];\n              this.transformMatrix = _util.Util.transform(this.transformMatrix, transformMatrix);\n              this.tgrp = null;\n            }\n\n            getSVG(operatorList, viewport) {\n              this.viewport = viewport;\n\n              const svgElement = this._initialize(viewport);\n\n              return this.loadDependencies(operatorList).then(() => {\n                this.transformMatrix = _util.IDENTITY_MATRIX;\n                this.executeOpTree(this.convertOpList(operatorList));\n                return svgElement;\n              });\n            }\n\n            convertOpList(operatorList) {\n              const operatorIdMapping = this._operatorIdMapping;\n              const argsArray = operatorList.argsArray;\n              const fnArray = operatorList.fnArray;\n              const opList = [];\n\n              for (let i = 0, ii = fnArray.length; i < ii; i++) {\n                const fnId = fnArray[i];\n                opList.push({\n                  fnId,\n                  fn: operatorIdMapping[fnId],\n                  args: argsArray[i]\n                });\n              }\n\n              return opListToTree(opList);\n            }\n\n            executeOpTree(opTree) {\n              for (const opTreeElement of opTree) {\n                const fn = opTreeElement.fn;\n                const fnId = opTreeElement.fnId;\n                const args = opTreeElement.args;\n\n                switch (fnId | 0) {\n                  case _util.OPS.beginText:\n                    this.beginText();\n                    break;\n\n                  case _util.OPS.dependency:\n                    break;\n\n                  case _util.OPS.setLeading:\n                    this.setLeading(args);\n                    break;\n\n                  case _util.OPS.setLeadingMoveText:\n                    this.setLeadingMoveText(args[0], args[1]);\n                    break;\n\n                  case _util.OPS.setFont:\n                    this.setFont(args);\n                    break;\n\n                  case _util.OPS.showText:\n                    this.showText(args[0]);\n                    break;\n\n                  case _util.OPS.showSpacedText:\n                    this.showText(args[0]);\n                    break;\n\n                  case _util.OPS.endText:\n                    this.endText();\n                    break;\n\n                  case _util.OPS.moveText:\n                    this.moveText(args[0], args[1]);\n                    break;\n\n                  case _util.OPS.setCharSpacing:\n                    this.setCharSpacing(args[0]);\n                    break;\n\n                  case _util.OPS.setWordSpacing:\n                    this.setWordSpacing(args[0]);\n                    break;\n\n                  case _util.OPS.setHScale:\n                    this.setHScale(args[0]);\n                    break;\n\n                  case _util.OPS.setTextMatrix:\n                    this.setTextMatrix(args[0], args[1], args[2], args[3], args[4], args[5]);\n                    break;\n\n                  case _util.OPS.setTextRise:\n                    this.setTextRise(args[0]);\n                    break;\n\n                  case _util.OPS.setTextRenderingMode:\n                    this.setTextRenderingMode(args[0]);\n                    break;\n\n                  case _util.OPS.setLineWidth:\n                    this.setLineWidth(args[0]);\n                    break;\n\n                  case _util.OPS.setLineJoin:\n                    this.setLineJoin(args[0]);\n                    break;\n\n                  case _util.OPS.setLineCap:\n                    this.setLineCap(args[0]);\n                    break;\n\n                  case _util.OPS.setMiterLimit:\n                    this.setMiterLimit(args[0]);\n                    break;\n\n                  case _util.OPS.setFillRGBColor:\n                    this.setFillRGBColor(args[0], args[1], args[2]);\n                    break;\n\n                  case _util.OPS.setStrokeRGBColor:\n                    this.setStrokeRGBColor(args[0], args[1], args[2]);\n                    break;\n\n                  case _util.OPS.setStrokeColorN:\n                    this.setStrokeColorN(args);\n                    break;\n\n                  case _util.OPS.setFillColorN:\n                    this.setFillColorN(args);\n                    break;\n\n                  case _util.OPS.shadingFill:\n                    this.shadingFill(args[0]);\n                    break;\n\n                  case _util.OPS.setDash:\n                    this.setDash(args[0], args[1]);\n                    break;\n\n                  case _util.OPS.setRenderingIntent:\n                    this.setRenderingIntent(args[0]);\n                    break;\n\n                  case _util.OPS.setFlatness:\n                    this.setFlatness(args[0]);\n                    break;\n\n                  case _util.OPS.setGState:\n                    this.setGState(args[0]);\n                    break;\n\n                  case _util.OPS.fill:\n                    this.fill();\n                    break;\n\n                  case _util.OPS.eoFill:\n                    this.eoFill();\n                    break;\n\n                  case _util.OPS.stroke:\n                    this.stroke();\n                    break;\n\n                  case _util.OPS.fillStroke:\n                    this.fillStroke();\n                    break;\n\n                  case _util.OPS.eoFillStroke:\n                    this.eoFillStroke();\n                    break;\n\n                  case _util.OPS.clip:\n                    this.clip(\"nonzero\");\n                    break;\n\n                  case _util.OPS.eoClip:\n                    this.clip(\"evenodd\");\n                    break;\n\n                  case _util.OPS.paintSolidColorImageMask:\n                    this.paintSolidColorImageMask();\n                    break;\n\n                  case _util.OPS.paintImageXObject:\n                    this.paintImageXObject(args[0]);\n                    break;\n\n                  case _util.OPS.paintInlineImageXObject:\n                    this.paintInlineImageXObject(args[0]);\n                    break;\n\n                  case _util.OPS.paintImageMaskXObject:\n                    this.paintImageMaskXObject(args[0]);\n                    break;\n\n                  case _util.OPS.paintFormXObjectBegin:\n                    this.paintFormXObjectBegin(args[0], args[1]);\n                    break;\n\n                  case _util.OPS.paintFormXObjectEnd:\n                    this.paintFormXObjectEnd();\n                    break;\n\n                  case _util.OPS.closePath:\n                    this.closePath();\n                    break;\n\n                  case _util.OPS.closeStroke:\n                    this.closeStroke();\n                    break;\n\n                  case _util.OPS.closeFillStroke:\n                    this.closeFillStroke();\n                    break;\n\n                  case _util.OPS.closeEOFillStroke:\n                    this.closeEOFillStroke();\n                    break;\n\n                  case _util.OPS.nextLine:\n                    this.nextLine();\n                    break;\n\n                  case _util.OPS.transform:\n                    this.transform(args[0], args[1], args[2], args[3], args[4], args[5]);\n                    break;\n\n                  case _util.OPS.constructPath:\n                    this.constructPath(args[0], args[1]);\n                    break;\n\n                  case _util.OPS.endPath:\n                    this.endPath();\n                    break;\n\n                  case 92:\n                    this.group(opTreeElement.items);\n                    break;\n\n                  default:\n                    (0, _util.warn)(`Unimplemented operator ${fn}`);\n                    break;\n                }\n              }\n            }\n\n            setWordSpacing(wordSpacing) {\n              this.current.wordSpacing = wordSpacing;\n            }\n\n            setCharSpacing(charSpacing) {\n              this.current.charSpacing = charSpacing;\n            }\n\n            nextLine() {\n              this.moveText(0, this.current.leading);\n            }\n\n            setTextMatrix(a, b, c, d, e, f) {\n              const current = this.current;\n              current.textMatrix = current.lineMatrix = [a, b, c, d, e, f];\n              current.textMatrixScale = Math.hypot(a, b);\n              current.x = current.lineX = 0;\n              current.y = current.lineY = 0;\n              current.xcoords = [];\n              current.ycoords = [];\n              current.tspan = this.svgFactory.createElement(\"svg:tspan\");\n              current.tspan.setAttributeNS(null, \"font-family\", current.fontFamily);\n              current.tspan.setAttributeNS(null, \"font-size\", `${pf(current.fontSize)}px`);\n              current.tspan.setAttributeNS(null, \"y\", pf(-current.y));\n              current.txtElement = this.svgFactory.createElement(\"svg:text\");\n              current.txtElement.appendChild(current.tspan);\n            }\n\n            beginText() {\n              const current = this.current;\n              current.x = current.lineX = 0;\n              current.y = current.lineY = 0;\n              current.textMatrix = _util.IDENTITY_MATRIX;\n              current.lineMatrix = _util.IDENTITY_MATRIX;\n              current.textMatrixScale = 1;\n              current.tspan = this.svgFactory.createElement(\"svg:tspan\");\n              current.txtElement = this.svgFactory.createElement(\"svg:text\");\n              current.txtgrp = this.svgFactory.createElement(\"svg:g\");\n              current.xcoords = [];\n              current.ycoords = [];\n            }\n\n            moveText(x, y) {\n              const current = this.current;\n              current.x = current.lineX += x;\n              current.y = current.lineY += y;\n              current.xcoords = [];\n              current.ycoords = [];\n              current.tspan = this.svgFactory.createElement(\"svg:tspan\");\n              current.tspan.setAttributeNS(null, \"font-family\", current.fontFamily);\n              current.tspan.setAttributeNS(null, \"font-size\", `${pf(current.fontSize)}px`);\n              current.tspan.setAttributeNS(null, \"y\", pf(-current.y));\n            }\n\n            showText(glyphs) {\n              const current = this.current;\n              const font = current.font;\n              const fontSize = current.fontSize;\n\n              if (fontSize === 0) {\n                return;\n              }\n\n              const fontSizeScale = current.fontSizeScale;\n              const charSpacing = current.charSpacing;\n              const wordSpacing = current.wordSpacing;\n              const fontDirection = current.fontDirection;\n              const textHScale = current.textHScale * fontDirection;\n              const vertical = font.vertical;\n              const spacingDir = vertical ? 1 : -1;\n              const defaultVMetrics = font.defaultVMetrics;\n              const widthAdvanceScale = fontSize * current.fontMatrix[0];\n              let x = 0;\n\n              for (const glyph of glyphs) {\n                if (glyph === null) {\n                  x += fontDirection * wordSpacing;\n                  continue;\n                } else if ((0, _util.isNum)(glyph)) {\n                  x += spacingDir * glyph * fontSize / 1000;\n                  continue;\n                }\n\n                const spacing = (glyph.isSpace ? wordSpacing : 0) + charSpacing;\n                const character = glyph.fontChar;\n                let scaledX, scaledY;\n                let width = glyph.width;\n\n                if (vertical) {\n                  let vx;\n                  const vmetric = glyph.vmetric || defaultVMetrics;\n                  vx = glyph.vmetric ? vmetric[1] : width * 0.5;\n                  vx = -vx * widthAdvanceScale;\n                  const vy = vmetric[2] * widthAdvanceScale;\n                  width = vmetric ? -vmetric[0] : width;\n                  scaledX = vx / fontSizeScale;\n                  scaledY = (x + vy) / fontSizeScale;\n                } else {\n                  scaledX = x / fontSizeScale;\n                  scaledY = 0;\n                }\n\n                if (glyph.isInFont || font.missingFile) {\n                  current.xcoords.push(current.x + scaledX);\n\n                  if (vertical) {\n                    current.ycoords.push(-current.y + scaledY);\n                  }\n\n                  current.tspan.textContent += character;\n                } else {}\n\n                let charWidth;\n\n                if (vertical) {\n                  charWidth = width * widthAdvanceScale - spacing * fontDirection;\n                } else {\n                  charWidth = width * widthAdvanceScale + spacing * fontDirection;\n                }\n\n                x += charWidth;\n              }\n\n              current.tspan.setAttributeNS(null, \"x\", current.xcoords.map(pf).join(\" \"));\n\n              if (vertical) {\n                current.tspan.setAttributeNS(null, \"y\", current.ycoords.map(pf).join(\" \"));\n              } else {\n                current.tspan.setAttributeNS(null, \"y\", pf(-current.y));\n              }\n\n              if (vertical) {\n                current.y -= x;\n              } else {\n                current.x += x * textHScale;\n              }\n\n              current.tspan.setAttributeNS(null, \"font-family\", current.fontFamily);\n              current.tspan.setAttributeNS(null, \"font-size\", `${pf(current.fontSize)}px`);\n\n              if (current.fontStyle !== SVG_DEFAULTS.fontStyle) {\n                current.tspan.setAttributeNS(null, \"font-style\", current.fontStyle);\n              }\n\n              if (current.fontWeight !== SVG_DEFAULTS.fontWeight) {\n                current.tspan.setAttributeNS(null, \"font-weight\", current.fontWeight);\n              }\n\n              const fillStrokeMode = current.textRenderingMode & _util.TextRenderingMode.FILL_STROKE_MASK;\n\n              if (fillStrokeMode === _util.TextRenderingMode.FILL || fillStrokeMode === _util.TextRenderingMode.FILL_STROKE) {\n                if (current.fillColor !== SVG_DEFAULTS.fillColor) {\n                  current.tspan.setAttributeNS(null, \"fill\", current.fillColor);\n                }\n\n                if (current.fillAlpha < 1) {\n                  current.tspan.setAttributeNS(null, \"fill-opacity\", current.fillAlpha);\n                }\n              } else if (current.textRenderingMode === _util.TextRenderingMode.ADD_TO_PATH) {\n                current.tspan.setAttributeNS(null, \"fill\", \"transparent\");\n              } else {\n                current.tspan.setAttributeNS(null, \"fill\", \"none\");\n              }\n\n              if (fillStrokeMode === _util.TextRenderingMode.STROKE || fillStrokeMode === _util.TextRenderingMode.FILL_STROKE) {\n                const lineWidthScale = 1 / (current.textMatrixScale || 1);\n\n                this._setStrokeAttributes(current.tspan, lineWidthScale);\n              }\n\n              let textMatrix = current.textMatrix;\n\n              if (current.textRise !== 0) {\n                textMatrix = textMatrix.slice();\n                textMatrix[5] += current.textRise;\n              }\n\n              current.txtElement.setAttributeNS(null, \"transform\", `${pm(textMatrix)} scale(${pf(textHScale)}, -1)`);\n              current.txtElement.setAttributeNS(XML_NS, \"xml:space\", \"preserve\");\n              current.txtElement.appendChild(current.tspan);\n              current.txtgrp.appendChild(current.txtElement);\n\n              this._ensureTransformGroup().appendChild(current.txtElement);\n            }\n\n            setLeadingMoveText(x, y) {\n              this.setLeading(-y);\n              this.moveText(x, y);\n            }\n\n            addFontStyle(fontObj) {\n              if (!fontObj.data) {\n                throw new Error(\"addFontStyle: No font data available, \" + 'ensure that the \"fontExtraProperties\" API parameter is set.');\n              }\n\n              if (!this.cssStyle) {\n                this.cssStyle = this.svgFactory.createElement(\"svg:style\");\n                this.cssStyle.setAttributeNS(null, \"type\", \"text/css\");\n                this.defs.appendChild(this.cssStyle);\n              }\n\n              const url = (0, _util.createObjectURL)(fontObj.data, fontObj.mimetype, this.forceDataSchema);\n              this.cssStyle.textContent += `@font-face { font-family: \"${fontObj.loadedName}\";` + ` src: url(${url}); }\\n`;\n            }\n\n            setFont(details) {\n              const current = this.current;\n              const fontObj = this.commonObjs.get(details[0]);\n              let size = details[1];\n              current.font = fontObj;\n\n              if (this.embedFonts && !fontObj.missingFile && !this.embeddedFonts[fontObj.loadedName]) {\n                this.addFontStyle(fontObj);\n                this.embeddedFonts[fontObj.loadedName] = fontObj;\n              }\n\n              current.fontMatrix = fontObj.fontMatrix || _util.FONT_IDENTITY_MATRIX;\n              let bold = \"normal\";\n\n              if (fontObj.black) {\n                bold = \"900\";\n              } else if (fontObj.bold) {\n                bold = \"bold\";\n              }\n\n              const italic = fontObj.italic ? \"italic\" : \"normal\";\n\n              if (size < 0) {\n                size = -size;\n                current.fontDirection = -1;\n              } else {\n                current.fontDirection = 1;\n              }\n\n              current.fontSize = size;\n              current.fontFamily = fontObj.loadedName;\n              current.fontWeight = bold;\n              current.fontStyle = italic;\n              current.tspan = this.svgFactory.createElement(\"svg:tspan\");\n              current.tspan.setAttributeNS(null, \"y\", pf(-current.y));\n              current.xcoords = [];\n              current.ycoords = [];\n            }\n\n            endText() {\n              const current = this.current;\n\n              if (current.textRenderingMode & _util.TextRenderingMode.ADD_TO_PATH_FLAG && current.txtElement?.hasChildNodes()) {\n                current.element = current.txtElement;\n                this.clip(\"nonzero\");\n                this.endPath();\n              }\n            }\n\n            setLineWidth(width) {\n              if (width > 0) {\n                this.current.lineWidth = width;\n              }\n            }\n\n            setLineCap(style) {\n              this.current.lineCap = LINE_CAP_STYLES[style];\n            }\n\n            setLineJoin(style) {\n              this.current.lineJoin = LINE_JOIN_STYLES[style];\n            }\n\n            setMiterLimit(limit) {\n              this.current.miterLimit = limit;\n            }\n\n            setStrokeAlpha(strokeAlpha) {\n              this.current.strokeAlpha = strokeAlpha;\n            }\n\n            setStrokeRGBColor(r, g, b) {\n              this.current.strokeColor = _util.Util.makeHexColor(r, g, b);\n            }\n\n            setFillAlpha(fillAlpha) {\n              this.current.fillAlpha = fillAlpha;\n            }\n\n            setFillRGBColor(r, g, b) {\n              this.current.fillColor = _util.Util.makeHexColor(r, g, b);\n              this.current.tspan = this.svgFactory.createElement(\"svg:tspan\");\n              this.current.xcoords = [];\n              this.current.ycoords = [];\n            }\n\n            setStrokeColorN(args) {\n              this.current.strokeColor = this._makeColorN_Pattern(args);\n            }\n\n            setFillColorN(args) {\n              this.current.fillColor = this._makeColorN_Pattern(args);\n            }\n\n            shadingFill(args) {\n              const width = this.viewport.width;\n              const height = this.viewport.height;\n\n              const inv = _util.Util.inverseTransform(this.transformMatrix);\n\n              const bl = _util.Util.applyTransform([0, 0], inv);\n\n              const br = _util.Util.applyTransform([0, height], inv);\n\n              const ul = _util.Util.applyTransform([width, 0], inv);\n\n              const ur = _util.Util.applyTransform([width, height], inv);\n\n              const x0 = Math.min(bl[0], br[0], ul[0], ur[0]);\n              const y0 = Math.min(bl[1], br[1], ul[1], ur[1]);\n              const x1 = Math.max(bl[0], br[0], ul[0], ur[0]);\n              const y1 = Math.max(bl[1], br[1], ul[1], ur[1]);\n              const rect = this.svgFactory.createElement(\"svg:rect\");\n              rect.setAttributeNS(null, \"x\", x0);\n              rect.setAttributeNS(null, \"y\", y0);\n              rect.setAttributeNS(null, \"width\", x1 - x0);\n              rect.setAttributeNS(null, \"height\", y1 - y0);\n              rect.setAttributeNS(null, \"fill\", this._makeShadingPattern(args));\n\n              if (this.current.fillAlpha < 1) {\n                rect.setAttributeNS(null, \"fill-opacity\", this.current.fillAlpha);\n              }\n\n              this._ensureTransformGroup().appendChild(rect);\n            }\n\n            _makeColorN_Pattern(args) {\n              if (args[0] === \"TilingPattern\") {\n                return this._makeTilingPattern(args);\n              }\n\n              return this._makeShadingPattern(args);\n            }\n\n            _makeTilingPattern(args) {\n              const color = args[1];\n              const operatorList = args[2];\n              const matrix = args[3] || _util.IDENTITY_MATRIX;\n              const [x0, y0, x1, y1] = args[4];\n              const xstep = args[5];\n              const ystep = args[6];\n              const paintType = args[7];\n              const tilingId = `shading${shadingCount++}`;\n\n              const [tx0, ty0, tx1, ty1] = _util.Util.normalizeRect([..._util.Util.applyTransform([x0, y0], matrix), ..._util.Util.applyTransform([x1, y1], matrix)]);\n\n              const [xscale, yscale] = _util.Util.singularValueDecompose2dScale(matrix);\n\n              const txstep = xstep * xscale;\n              const tystep = ystep * yscale;\n              const tiling = this.svgFactory.createElement(\"svg:pattern\");\n              tiling.setAttributeNS(null, \"id\", tilingId);\n              tiling.setAttributeNS(null, \"patternUnits\", \"userSpaceOnUse\");\n              tiling.setAttributeNS(null, \"width\", txstep);\n              tiling.setAttributeNS(null, \"height\", tystep);\n              tiling.setAttributeNS(null, \"x\", `${tx0}`);\n              tiling.setAttributeNS(null, \"y\", `${ty0}`);\n              const svg = this.svg;\n              const transformMatrix = this.transformMatrix;\n              const fillColor = this.current.fillColor;\n              const strokeColor = this.current.strokeColor;\n              const bbox = this.svgFactory.create(tx1 - tx0, ty1 - ty0);\n              this.svg = bbox;\n              this.transformMatrix = matrix;\n\n              if (paintType === 2) {\n                const cssColor = _util.Util.makeHexColor(...color);\n\n                this.current.fillColor = cssColor;\n                this.current.strokeColor = cssColor;\n              }\n\n              this.executeOpTree(this.convertOpList(operatorList));\n              this.svg = svg;\n              this.transformMatrix = transformMatrix;\n              this.current.fillColor = fillColor;\n              this.current.strokeColor = strokeColor;\n              tiling.appendChild(bbox.childNodes[0]);\n              this.defs.appendChild(tiling);\n              return `url(#${tilingId})`;\n            }\n\n            _makeShadingPattern(args) {\n              if (typeof args === \"string\") {\n                args = this.objs.get(args);\n              }\n\n              switch (args[0]) {\n                case \"RadialAxial\":\n                  const shadingId = `shading${shadingCount++}`;\n                  const colorStops = args[3];\n                  let gradient;\n\n                  switch (args[1]) {\n                    case \"axial\":\n                      const point0 = args[4];\n                      const point1 = args[5];\n                      gradient = this.svgFactory.createElement(\"svg:linearGradient\");\n                      gradient.setAttributeNS(null, \"id\", shadingId);\n                      gradient.setAttributeNS(null, \"gradientUnits\", \"userSpaceOnUse\");\n                      gradient.setAttributeNS(null, \"x1\", point0[0]);\n                      gradient.setAttributeNS(null, \"y1\", point0[1]);\n                      gradient.setAttributeNS(null, \"x2\", point1[0]);\n                      gradient.setAttributeNS(null, \"y2\", point1[1]);\n                      break;\n\n                    case \"radial\":\n                      const focalPoint = args[4];\n                      const circlePoint = args[5];\n                      const focalRadius = args[6];\n                      const circleRadius = args[7];\n                      gradient = this.svgFactory.createElement(\"svg:radialGradient\");\n                      gradient.setAttributeNS(null, \"id\", shadingId);\n                      gradient.setAttributeNS(null, \"gradientUnits\", \"userSpaceOnUse\");\n                      gradient.setAttributeNS(null, \"cx\", circlePoint[0]);\n                      gradient.setAttributeNS(null, \"cy\", circlePoint[1]);\n                      gradient.setAttributeNS(null, \"r\", circleRadius);\n                      gradient.setAttributeNS(null, \"fx\", focalPoint[0]);\n                      gradient.setAttributeNS(null, \"fy\", focalPoint[1]);\n                      gradient.setAttributeNS(null, \"fr\", focalRadius);\n                      break;\n\n                    default:\n                      throw new Error(`Unknown RadialAxial type: ${args[1]}`);\n                  }\n\n                  for (const colorStop of colorStops) {\n                    const stop = this.svgFactory.createElement(\"svg:stop\");\n                    stop.setAttributeNS(null, \"offset\", colorStop[0]);\n                    stop.setAttributeNS(null, \"stop-color\", colorStop[1]);\n                    gradient.appendChild(stop);\n                  }\n\n                  this.defs.appendChild(gradient);\n                  return `url(#${shadingId})`;\n\n                case \"Mesh\":\n                  (0, _util.warn)(\"Unimplemented pattern Mesh\");\n                  return null;\n\n                case \"Dummy\":\n                  return \"hotpink\";\n\n                default:\n                  throw new Error(`Unknown IR type: ${args[0]}`);\n              }\n            }\n\n            setDash(dashArray, dashPhase) {\n              this.current.dashArray = dashArray;\n              this.current.dashPhase = dashPhase;\n            }\n\n            constructPath(ops, args) {\n              const current = this.current;\n              let x = current.x,\n                  y = current.y;\n              let d = [];\n              let j = 0;\n\n              for (const op of ops) {\n                switch (op | 0) {\n                  case _util.OPS.rectangle:\n                    x = args[j++];\n                    y = args[j++];\n                    const width = args[j++];\n                    const height = args[j++];\n                    const xw = x + width;\n                    const yh = y + height;\n                    d.push(\"M\", pf(x), pf(y), \"L\", pf(xw), pf(y), \"L\", pf(xw), pf(yh), \"L\", pf(x), pf(yh), \"Z\");\n                    break;\n\n                  case _util.OPS.moveTo:\n                    x = args[j++];\n                    y = args[j++];\n                    d.push(\"M\", pf(x), pf(y));\n                    break;\n\n                  case _util.OPS.lineTo:\n                    x = args[j++];\n                    y = args[j++];\n                    d.push(\"L\", pf(x), pf(y));\n                    break;\n\n                  case _util.OPS.curveTo:\n                    x = args[j + 4];\n                    y = args[j + 5];\n                    d.push(\"C\", pf(args[j]), pf(args[j + 1]), pf(args[j + 2]), pf(args[j + 3]), pf(x), pf(y));\n                    j += 6;\n                    break;\n\n                  case _util.OPS.curveTo2:\n                    d.push(\"C\", pf(x), pf(y), pf(args[j]), pf(args[j + 1]), pf(args[j + 2]), pf(args[j + 3]));\n                    x = args[j + 2];\n                    y = args[j + 3];\n                    j += 4;\n                    break;\n\n                  case _util.OPS.curveTo3:\n                    x = args[j + 2];\n                    y = args[j + 3];\n                    d.push(\"C\", pf(args[j]), pf(args[j + 1]), pf(x), pf(y), pf(x), pf(y));\n                    j += 4;\n                    break;\n\n                  case _util.OPS.closePath:\n                    d.push(\"Z\");\n                    break;\n                }\n              }\n\n              d = d.join(\" \");\n\n              if (current.path && ops.length > 0 && ops[0] !== _util.OPS.rectangle && ops[0] !== _util.OPS.moveTo) {\n                d = current.path.getAttributeNS(null, \"d\") + d;\n              } else {\n                current.path = this.svgFactory.createElement(\"svg:path\");\n\n                this._ensureTransformGroup().appendChild(current.path);\n              }\n\n              current.path.setAttributeNS(null, \"d\", d);\n              current.path.setAttributeNS(null, \"fill\", \"none\");\n              current.element = current.path;\n              current.setCurrentPoint(x, y);\n            }\n\n            endPath() {\n              const current = this.current;\n              current.path = null;\n\n              if (!this.pendingClip) {\n                return;\n              }\n\n              if (!current.element) {\n                this.pendingClip = null;\n                return;\n              }\n\n              const clipId = `clippath${clipCount++}`;\n              const clipPath = this.svgFactory.createElement(\"svg:clipPath\");\n              clipPath.setAttributeNS(null, \"id\", clipId);\n              clipPath.setAttributeNS(null, \"transform\", pm(this.transformMatrix));\n              const clipElement = current.element.cloneNode(true);\n\n              if (this.pendingClip === \"evenodd\") {\n                clipElement.setAttributeNS(null, \"clip-rule\", \"evenodd\");\n              } else {\n                clipElement.setAttributeNS(null, \"clip-rule\", \"nonzero\");\n              }\n\n              this.pendingClip = null;\n              clipPath.appendChild(clipElement);\n              this.defs.appendChild(clipPath);\n\n              if (current.activeClipUrl) {\n                current.clipGroup = null;\n\n                for (const prev of this.extraStack) {\n                  prev.clipGroup = null;\n                }\n\n                clipPath.setAttributeNS(null, \"clip-path\", current.activeClipUrl);\n              }\n\n              current.activeClipUrl = `url(#${clipId})`;\n              this.tgrp = null;\n            }\n\n            clip(type) {\n              this.pendingClip = type;\n            }\n\n            closePath() {\n              const current = this.current;\n\n              if (current.path) {\n                const d = `${current.path.getAttributeNS(null, \"d\")}Z`;\n                current.path.setAttributeNS(null, \"d\", d);\n              }\n            }\n\n            setLeading(leading) {\n              this.current.leading = -leading;\n            }\n\n            setTextRise(textRise) {\n              this.current.textRise = textRise;\n            }\n\n            setTextRenderingMode(textRenderingMode) {\n              this.current.textRenderingMode = textRenderingMode;\n            }\n\n            setHScale(scale) {\n              this.current.textHScale = scale / 100;\n            }\n\n            setRenderingIntent(intent) {}\n\n            setFlatness(flatness) {}\n\n            setGState(states) {\n              for (const [key, value] of states) {\n                switch (key) {\n                  case \"LW\":\n                    this.setLineWidth(value);\n                    break;\n\n                  case \"LC\":\n                    this.setLineCap(value);\n                    break;\n\n                  case \"LJ\":\n                    this.setLineJoin(value);\n                    break;\n\n                  case \"ML\":\n                    this.setMiterLimit(value);\n                    break;\n\n                  case \"D\":\n                    this.setDash(value[0], value[1]);\n                    break;\n\n                  case \"RI\":\n                    this.setRenderingIntent(value);\n                    break;\n\n                  case \"FL\":\n                    this.setFlatness(value);\n                    break;\n\n                  case \"Font\":\n                    this.setFont(value);\n                    break;\n\n                  case \"CA\":\n                    this.setStrokeAlpha(value);\n                    break;\n\n                  case \"ca\":\n                    this.setFillAlpha(value);\n                    break;\n\n                  default:\n                    (0, _util.warn)(`Unimplemented graphic state operator ${key}`);\n                    break;\n                }\n              }\n            }\n\n            fill() {\n              const current = this.current;\n\n              if (current.element) {\n                current.element.setAttributeNS(null, \"fill\", current.fillColor);\n                current.element.setAttributeNS(null, \"fill-opacity\", current.fillAlpha);\n                this.endPath();\n              }\n            }\n\n            stroke() {\n              const current = this.current;\n\n              if (current.element) {\n                this._setStrokeAttributes(current.element);\n\n                current.element.setAttributeNS(null, \"fill\", \"none\");\n                this.endPath();\n              }\n            }\n\n            _setStrokeAttributes(element) {\n              let lineWidthScale = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n              const current = this.current;\n              let dashArray = current.dashArray;\n\n              if (lineWidthScale !== 1 && dashArray.length > 0) {\n                dashArray = dashArray.map(function (value) {\n                  return lineWidthScale * value;\n                });\n              }\n\n              element.setAttributeNS(null, \"stroke\", current.strokeColor);\n              element.setAttributeNS(null, \"stroke-opacity\", current.strokeAlpha);\n              element.setAttributeNS(null, \"stroke-miterlimit\", pf(current.miterLimit));\n              element.setAttributeNS(null, \"stroke-linecap\", current.lineCap);\n              element.setAttributeNS(null, \"stroke-linejoin\", current.lineJoin);\n              element.setAttributeNS(null, \"stroke-width\", pf(lineWidthScale * current.lineWidth) + \"px\");\n              element.setAttributeNS(null, \"stroke-dasharray\", dashArray.map(pf).join(\" \"));\n              element.setAttributeNS(null, \"stroke-dashoffset\", pf(lineWidthScale * current.dashPhase) + \"px\");\n            }\n\n            eoFill() {\n              if (this.current.element) {\n                this.current.element.setAttributeNS(null, \"fill-rule\", \"evenodd\");\n              }\n\n              this.fill();\n            }\n\n            fillStroke() {\n              this.stroke();\n              this.fill();\n            }\n\n            eoFillStroke() {\n              if (this.current.element) {\n                this.current.element.setAttributeNS(null, \"fill-rule\", \"evenodd\");\n              }\n\n              this.fillStroke();\n            }\n\n            closeStroke() {\n              this.closePath();\n              this.stroke();\n            }\n\n            closeFillStroke() {\n              this.closePath();\n              this.fillStroke();\n            }\n\n            closeEOFillStroke() {\n              this.closePath();\n              this.eoFillStroke();\n            }\n\n            paintSolidColorImageMask() {\n              const rect = this.svgFactory.createElement(\"svg:rect\");\n              rect.setAttributeNS(null, \"x\", \"0\");\n              rect.setAttributeNS(null, \"y\", \"0\");\n              rect.setAttributeNS(null, \"width\", \"1px\");\n              rect.setAttributeNS(null, \"height\", \"1px\");\n              rect.setAttributeNS(null, \"fill\", this.current.fillColor);\n\n              this._ensureTransformGroup().appendChild(rect);\n            }\n\n            paintImageXObject(objId) {\n              const imgData = objId.startsWith(\"g_\") ? this.commonObjs.get(objId) : this.objs.get(objId);\n\n              if (!imgData) {\n                (0, _util.warn)(`Dependent image with object ID ${objId} is not ready yet`);\n                return;\n              }\n\n              this.paintInlineImageXObject(imgData);\n            }\n\n            paintInlineImageXObject(imgData, mask) {\n              const width = imgData.width;\n              const height = imgData.height;\n              const imgSrc = convertImgDataToPng(imgData, this.forceDataSchema, !!mask);\n              const cliprect = this.svgFactory.createElement(\"svg:rect\");\n              cliprect.setAttributeNS(null, \"x\", \"0\");\n              cliprect.setAttributeNS(null, \"y\", \"0\");\n              cliprect.setAttributeNS(null, \"width\", pf(width));\n              cliprect.setAttributeNS(null, \"height\", pf(height));\n              this.current.element = cliprect;\n              this.clip(\"nonzero\");\n              const imgEl = this.svgFactory.createElement(\"svg:image\");\n              imgEl.setAttributeNS(XLINK_NS, \"xlink:href\", imgSrc);\n              imgEl.setAttributeNS(null, \"x\", \"0\");\n              imgEl.setAttributeNS(null, \"y\", pf(-height));\n              imgEl.setAttributeNS(null, \"width\", pf(width) + \"px\");\n              imgEl.setAttributeNS(null, \"height\", pf(height) + \"px\");\n              imgEl.setAttributeNS(null, \"transform\", `scale(${pf(1 / width)} ${pf(-1 / height)})`);\n\n              if (mask) {\n                mask.appendChild(imgEl);\n              } else {\n                this._ensureTransformGroup().appendChild(imgEl);\n              }\n            }\n\n            paintImageMaskXObject(imgData) {\n              const current = this.current;\n              const width = imgData.width;\n              const height = imgData.height;\n              const fillColor = current.fillColor;\n              current.maskId = `mask${maskCount++}`;\n              const mask = this.svgFactory.createElement(\"svg:mask\");\n              mask.setAttributeNS(null, \"id\", current.maskId);\n              const rect = this.svgFactory.createElement(\"svg:rect\");\n              rect.setAttributeNS(null, \"x\", \"0\");\n              rect.setAttributeNS(null, \"y\", \"0\");\n              rect.setAttributeNS(null, \"width\", pf(width));\n              rect.setAttributeNS(null, \"height\", pf(height));\n              rect.setAttributeNS(null, \"fill\", fillColor);\n              rect.setAttributeNS(null, \"mask\", `url(#${current.maskId})`);\n              this.defs.appendChild(mask);\n\n              this._ensureTransformGroup().appendChild(rect);\n\n              this.paintInlineImageXObject(imgData, mask);\n            }\n\n            paintFormXObjectBegin(matrix, bbox) {\n              if (Array.isArray(matrix) && matrix.length === 6) {\n                this.transform(matrix[0], matrix[1], matrix[2], matrix[3], matrix[4], matrix[5]);\n              }\n\n              if (bbox) {\n                const width = bbox[2] - bbox[0];\n                const height = bbox[3] - bbox[1];\n                const cliprect = this.svgFactory.createElement(\"svg:rect\");\n                cliprect.setAttributeNS(null, \"x\", bbox[0]);\n                cliprect.setAttributeNS(null, \"y\", bbox[1]);\n                cliprect.setAttributeNS(null, \"width\", pf(width));\n                cliprect.setAttributeNS(null, \"height\", pf(height));\n                this.current.element = cliprect;\n                this.clip(\"nonzero\");\n                this.endPath();\n              }\n            }\n\n            paintFormXObjectEnd() {}\n\n            _initialize(viewport) {\n              const svg = this.svgFactory.create(viewport.width, viewport.height);\n              const definitions = this.svgFactory.createElement(\"svg:defs\");\n              svg.appendChild(definitions);\n              this.defs = definitions;\n              const rootGroup = this.svgFactory.createElement(\"svg:g\");\n              rootGroup.setAttributeNS(null, \"transform\", pm(viewport.transform));\n              svg.appendChild(rootGroup);\n              this.svg = rootGroup;\n              return svg;\n            }\n\n            _ensureClipGroup() {\n              if (!this.current.clipGroup) {\n                const clipGroup = this.svgFactory.createElement(\"svg:g\");\n                clipGroup.setAttributeNS(null, \"clip-path\", this.current.activeClipUrl);\n                this.svg.appendChild(clipGroup);\n                this.current.clipGroup = clipGroup;\n              }\n\n              return this.current.clipGroup;\n            }\n\n            _ensureTransformGroup() {\n              if (!this.tgrp) {\n                this.tgrp = this.svgFactory.createElement(\"svg:g\");\n                this.tgrp.setAttributeNS(null, \"transform\", pm(this.transformMatrix));\n\n                if (this.current.activeClipUrl) {\n                  this._ensureClipGroup().appendChild(this.tgrp);\n                } else {\n                  this.svg.appendChild(this.tgrp);\n                }\n              }\n\n              return this.tgrp;\n            }\n\n          };\n        }\n        /***/\n      },\n      /* 23 */\n\n      /***/\n      (__unused_webpack_module, exports, __w_pdfjs_require__) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.PDFNodeStream = void 0;\n\n        var _util = __w_pdfjs_require__(2);\n\n        var _network_utils = __w_pdfjs_require__(24);\n\n        ;\n\n        const fs = require(\"fs\");\n\n        const http = require(\"http\");\n\n        const https = require(\"https\");\n\n        const url = require(\"url\");\n\n        const fileUriRegex = /^file:\\/\\/\\/[a-zA-Z]:\\//;\n\n        function parseUrl(sourceUrl) {\n          const parsedUrl = url.parse(sourceUrl);\n\n          if (parsedUrl.protocol === \"file:\" || parsedUrl.host) {\n            return parsedUrl;\n          }\n\n          if (/^[a-z]:[/\\\\]/i.test(sourceUrl)) {\n            return url.parse(`file:///${sourceUrl}`);\n          }\n\n          if (!parsedUrl.host) {\n            parsedUrl.protocol = \"file:\";\n          }\n\n          return parsedUrl;\n        }\n\n        class PDFNodeStream {\n          constructor(source) {\n            this.source = source;\n            this.url = parseUrl(source.url);\n            this.isHttp = this.url.protocol === \"http:\" || this.url.protocol === \"https:\";\n            this.isFsUrl = this.url.protocol === \"file:\";\n            this.httpHeaders = this.isHttp && source.httpHeaders || {};\n            this._fullRequestReader = null;\n            this._rangeRequestReaders = [];\n          }\n\n          get _progressiveDataLength() {\n            return this._fullRequestReader?._loaded ?? 0;\n          }\n\n          getFullReader() {\n            (0, _util.assert)(!this._fullRequestReader, \"PDFNodeStream.getFullReader can only be called once.\");\n            this._fullRequestReader = this.isFsUrl ? new PDFNodeStreamFsFullReader(this) : new PDFNodeStreamFullReader(this);\n            return this._fullRequestReader;\n          }\n\n          getRangeReader(start, end) {\n            if (end <= this._progressiveDataLength) {\n              return null;\n            }\n\n            const rangeReader = this.isFsUrl ? new PDFNodeStreamFsRangeReader(this, start, end) : new PDFNodeStreamRangeReader(this, start, end);\n\n            this._rangeRequestReaders.push(rangeReader);\n\n            return rangeReader;\n          }\n\n          cancelAllRequests(reason) {\n            if (this._fullRequestReader) {\n              this._fullRequestReader.cancel(reason);\n            }\n\n            for (const reader of this._rangeRequestReaders.slice(0)) {\n              reader.cancel(reason);\n            }\n          }\n\n        }\n\n        exports.PDFNodeStream = PDFNodeStream;\n\n        class BaseFullReader {\n          constructor(stream) {\n            this._url = stream.url;\n            this._done = false;\n            this._storedError = null;\n            this.onProgress = null;\n            const source = stream.source;\n            this._contentLength = source.length;\n            this._loaded = 0;\n            this._filename = null;\n            this._disableRange = source.disableRange || false;\n            this._rangeChunkSize = source.rangeChunkSize;\n\n            if (!this._rangeChunkSize && !this._disableRange) {\n              this._disableRange = true;\n            }\n\n            this._isStreamingSupported = !source.disableStream;\n            this._isRangeSupported = !source.disableRange;\n            this._readableStream = null;\n            this._readCapability = (0, _util.createPromiseCapability)();\n            this._headersCapability = (0, _util.createPromiseCapability)();\n          }\n\n          get headersReady() {\n            return this._headersCapability.promise;\n          }\n\n          get filename() {\n            return this._filename;\n          }\n\n          get contentLength() {\n            return this._contentLength;\n          }\n\n          get isRangeSupported() {\n            return this._isRangeSupported;\n          }\n\n          get isStreamingSupported() {\n            return this._isStreamingSupported;\n          }\n\n          async read() {\n            await this._readCapability.promise;\n\n            if (this._done) {\n              return {\n                value: undefined,\n                done: true\n              };\n            }\n\n            if (this._storedError) {\n              throw this._storedError;\n            }\n\n            const chunk = this._readableStream.read();\n\n            if (chunk === null) {\n              this._readCapability = (0, _util.createPromiseCapability)();\n              return this.read();\n            }\n\n            this._loaded += chunk.length;\n\n            if (this.onProgress) {\n              this.onProgress({\n                loaded: this._loaded,\n                total: this._contentLength\n              });\n            }\n\n            const buffer = new Uint8Array(chunk).buffer;\n            return {\n              value: buffer,\n              done: false\n            };\n          }\n\n          cancel(reason) {\n            if (!this._readableStream) {\n              this._error(reason);\n\n              return;\n            }\n\n            this._readableStream.destroy(reason);\n          }\n\n          _error(reason) {\n            this._storedError = reason;\n\n            this._readCapability.resolve();\n          }\n\n          _setReadableStream(readableStream) {\n            this._readableStream = readableStream;\n            readableStream.on(\"readable\", () => {\n              this._readCapability.resolve();\n            });\n            readableStream.on(\"end\", () => {\n              readableStream.destroy();\n              this._done = true;\n\n              this._readCapability.resolve();\n            });\n            readableStream.on(\"error\", reason => {\n              this._error(reason);\n            });\n\n            if (!this._isStreamingSupported && this._isRangeSupported) {\n              this._error(new _util.AbortException(\"streaming is disabled\"));\n            }\n\n            if (this._storedError) {\n              this._readableStream.destroy(this._storedError);\n            }\n          }\n\n        }\n\n        class BaseRangeReader {\n          constructor(stream) {\n            this._url = stream.url;\n            this._done = false;\n            this._storedError = null;\n            this.onProgress = null;\n            this._loaded = 0;\n            this._readableStream = null;\n            this._readCapability = (0, _util.createPromiseCapability)();\n            const source = stream.source;\n            this._isStreamingSupported = !source.disableStream;\n          }\n\n          get isStreamingSupported() {\n            return this._isStreamingSupported;\n          }\n\n          async read() {\n            await this._readCapability.promise;\n\n            if (this._done) {\n              return {\n                value: undefined,\n                done: true\n              };\n            }\n\n            if (this._storedError) {\n              throw this._storedError;\n            }\n\n            const chunk = this._readableStream.read();\n\n            if (chunk === null) {\n              this._readCapability = (0, _util.createPromiseCapability)();\n              return this.read();\n            }\n\n            this._loaded += chunk.length;\n\n            if (this.onProgress) {\n              this.onProgress({\n                loaded: this._loaded\n              });\n            }\n\n            const buffer = new Uint8Array(chunk).buffer;\n            return {\n              value: buffer,\n              done: false\n            };\n          }\n\n          cancel(reason) {\n            if (!this._readableStream) {\n              this._error(reason);\n\n              return;\n            }\n\n            this._readableStream.destroy(reason);\n          }\n\n          _error(reason) {\n            this._storedError = reason;\n\n            this._readCapability.resolve();\n          }\n\n          _setReadableStream(readableStream) {\n            this._readableStream = readableStream;\n            readableStream.on(\"readable\", () => {\n              this._readCapability.resolve();\n            });\n            readableStream.on(\"end\", () => {\n              readableStream.destroy();\n              this._done = true;\n\n              this._readCapability.resolve();\n            });\n            readableStream.on(\"error\", reason => {\n              this._error(reason);\n            });\n\n            if (this._storedError) {\n              this._readableStream.destroy(this._storedError);\n            }\n          }\n\n        }\n\n        function createRequestOptions(parsedUrl, headers) {\n          return {\n            protocol: parsedUrl.protocol,\n            auth: parsedUrl.auth,\n            host: parsedUrl.hostname,\n            port: parsedUrl.port,\n            path: parsedUrl.path,\n            method: \"GET\",\n            headers\n          };\n        }\n\n        class PDFNodeStreamFullReader extends BaseFullReader {\n          constructor(stream) {\n            super(stream);\n\n            const handleResponse = response => {\n              if (response.statusCode === 404) {\n                const error = new _util.MissingPDFException(`Missing PDF \"${this._url}\".`);\n                this._storedError = error;\n\n                this._headersCapability.reject(error);\n\n                return;\n              }\n\n              this._headersCapability.resolve();\n\n              this._setReadableStream(response);\n\n              const getResponseHeader = name => {\n                return this._readableStream.headers[name.toLowerCase()];\n              };\n\n              const {\n                allowRangeRequests,\n                suggestedLength\n              } = (0, _network_utils.validateRangeRequestCapabilities)({\n                getResponseHeader,\n                isHttp: stream.isHttp,\n                rangeChunkSize: this._rangeChunkSize,\n                disableRange: this._disableRange\n              });\n              this._isRangeSupported = allowRangeRequests;\n              this._contentLength = suggestedLength || this._contentLength;\n              this._filename = (0, _network_utils.extractFilenameFromHeader)(getResponseHeader);\n            };\n\n            this._request = null;\n\n            if (this._url.protocol === \"http:\") {\n              this._request = http.request(createRequestOptions(this._url, stream.httpHeaders), handleResponse);\n            } else {\n              this._request = https.request(createRequestOptions(this._url, stream.httpHeaders), handleResponse);\n            }\n\n            this._request.on(\"error\", reason => {\n              this._storedError = reason;\n\n              this._headersCapability.reject(reason);\n            });\n\n            this._request.end();\n          }\n\n        }\n\n        class PDFNodeStreamRangeReader extends BaseRangeReader {\n          constructor(stream, start, end) {\n            super(stream);\n            this._httpHeaders = {};\n\n            for (const property in stream.httpHeaders) {\n              const value = stream.httpHeaders[property];\n\n              if (typeof value === \"undefined\") {\n                continue;\n              }\n\n              this._httpHeaders[property] = value;\n            }\n\n            this._httpHeaders.Range = `bytes=${start}-${end - 1}`;\n\n            const handleResponse = response => {\n              if (response.statusCode === 404) {\n                const error = new _util.MissingPDFException(`Missing PDF \"${this._url}\".`);\n                this._storedError = error;\n                return;\n              }\n\n              this._setReadableStream(response);\n            };\n\n            this._request = null;\n\n            if (this._url.protocol === \"http:\") {\n              this._request = http.request(createRequestOptions(this._url, this._httpHeaders), handleResponse);\n            } else {\n              this._request = https.request(createRequestOptions(this._url, this._httpHeaders), handleResponse);\n            }\n\n            this._request.on(\"error\", reason => {\n              this._storedError = reason;\n            });\n\n            this._request.end();\n          }\n\n        }\n\n        class PDFNodeStreamFsFullReader extends BaseFullReader {\n          constructor(stream) {\n            super(stream);\n            let path = decodeURIComponent(this._url.path);\n\n            if (fileUriRegex.test(this._url.href)) {\n              path = path.replace(/^\\//, \"\");\n            }\n\n            fs.lstat(path, (error, stat) => {\n              if (error) {\n                if (error.code === \"ENOENT\") {\n                  error = new _util.MissingPDFException(`Missing PDF \"${path}\".`);\n                }\n\n                this._storedError = error;\n\n                this._headersCapability.reject(error);\n\n                return;\n              }\n\n              this._contentLength = stat.size;\n\n              this._setReadableStream(fs.createReadStream(path));\n\n              this._headersCapability.resolve();\n            });\n          }\n\n        }\n\n        class PDFNodeStreamFsRangeReader extends BaseRangeReader {\n          constructor(stream, start, end) {\n            super(stream);\n            let path = decodeURIComponent(this._url.path);\n\n            if (fileUriRegex.test(this._url.href)) {\n              path = path.replace(/^\\//, \"\");\n            }\n\n            this._setReadableStream(fs.createReadStream(path, {\n              start,\n              end: end - 1\n            }));\n          }\n\n        }\n        /***/\n\n      },\n      /* 24 */\n\n      /***/\n      (__unused_webpack_module, exports, __w_pdfjs_require__) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.createResponseStatusError = createResponseStatusError;\n        exports.extractFilenameFromHeader = extractFilenameFromHeader;\n        exports.validateRangeRequestCapabilities = validateRangeRequestCapabilities;\n        exports.validateResponseStatus = validateResponseStatus;\n\n        var _util = __w_pdfjs_require__(2);\n\n        var _content_disposition = __w_pdfjs_require__(25);\n\n        var _display_utils = __w_pdfjs_require__(1);\n\n        function validateRangeRequestCapabilities(_ref38) {\n          let {\n            getResponseHeader,\n            isHttp,\n            rangeChunkSize,\n            disableRange\n          } = _ref38;\n          (0, _util.assert)(rangeChunkSize > 0, \"Range chunk size must be larger than zero\");\n          const returnValues = {\n            allowRangeRequests: false,\n            suggestedLength: undefined\n          };\n          const length = parseInt(getResponseHeader(\"Content-Length\"), 10);\n\n          if (!Number.isInteger(length)) {\n            return returnValues;\n          }\n\n          returnValues.suggestedLength = length;\n\n          if (length <= 2 * rangeChunkSize) {\n            return returnValues;\n          }\n\n          if (disableRange || !isHttp) {\n            return returnValues;\n          }\n\n          if (getResponseHeader(\"Accept-Ranges\") !== \"bytes\") {\n            return returnValues;\n          }\n\n          const contentEncoding = getResponseHeader(\"Content-Encoding\") || \"identity\";\n\n          if (contentEncoding !== \"identity\") {\n            return returnValues;\n          }\n\n          returnValues.allowRangeRequests = true;\n          return returnValues;\n        }\n\n        function extractFilenameFromHeader(getResponseHeader) {\n          const contentDisposition = getResponseHeader(\"Content-Disposition\");\n\n          if (contentDisposition) {\n            let filename = (0, _content_disposition.getFilenameFromContentDispositionHeader)(contentDisposition);\n\n            if (filename.includes(\"%\")) {\n              try {\n                filename = decodeURIComponent(filename);\n              } catch (ex) {}\n            }\n\n            if ((0, _display_utils.isPdfFile)(filename)) {\n              return filename;\n            }\n          }\n\n          return null;\n        }\n\n        function createResponseStatusError(status, url) {\n          if (status === 404 || status === 0 && url.startsWith(\"file:\")) {\n            return new _util.MissingPDFException('Missing PDF \"' + url + '\".');\n          }\n\n          return new _util.UnexpectedResponseException(`Unexpected server response (${status}) while retrieving PDF \"${url}\".`, status);\n        }\n\n        function validateResponseStatus(status) {\n          return status === 200 || status === 206;\n        }\n        /***/\n\n      },\n      /* 25 */\n\n      /***/\n      (__unused_webpack_module, exports, __w_pdfjs_require__) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.getFilenameFromContentDispositionHeader = getFilenameFromContentDispositionHeader;\n\n        var _util = __w_pdfjs_require__(2);\n\n        function getFilenameFromContentDispositionHeader(contentDisposition) {\n          let needsEncodingFixup = true;\n          let tmp = toParamRegExp(\"filename\\\\*\", \"i\").exec(contentDisposition);\n\n          if (tmp) {\n            tmp = tmp[1];\n            let filename = rfc2616unquote(tmp);\n            filename = unescape(filename);\n            filename = rfc5987decode(filename);\n            filename = rfc2047decode(filename);\n            return fixupEncoding(filename);\n          }\n\n          tmp = rfc2231getparam(contentDisposition);\n\n          if (tmp) {\n            const filename = rfc2047decode(tmp);\n            return fixupEncoding(filename);\n          }\n\n          tmp = toParamRegExp(\"filename\", \"i\").exec(contentDisposition);\n\n          if (tmp) {\n            tmp = tmp[1];\n            let filename = rfc2616unquote(tmp);\n            filename = rfc2047decode(filename);\n            return fixupEncoding(filename);\n          }\n\n          function toParamRegExp(attributePattern, flags) {\n            return new RegExp(\"(?:^|;)\\\\s*\" + attributePattern + \"\\\\s*=\\\\s*\" + \"(\" + '[^\";\\\\s][^;\\\\s]*' + \"|\" + '\"(?:[^\"\\\\\\\\]|\\\\\\\\\"?)+\"?' + \")\", flags);\n          }\n\n          function textdecode(encoding, value) {\n            if (encoding) {\n              if (!/^[\\x00-\\xFF]+$/.test(value)) {\n                return value;\n              }\n\n              try {\n                const decoder = new TextDecoder(encoding, {\n                  fatal: true\n                });\n                const buffer = (0, _util.stringToBytes)(value);\n                value = decoder.decode(buffer);\n                needsEncodingFixup = false;\n              } catch (e) {\n                if (/^utf-?8$/i.test(encoding)) {\n                  try {\n                    value = decodeURIComponent(escape(value));\n                    needsEncodingFixup = false;\n                  } catch (err) {}\n                }\n              }\n            }\n\n            return value;\n          }\n\n          function fixupEncoding(value) {\n            if (needsEncodingFixup && /[\\x80-\\xff]/.test(value)) {\n              value = textdecode(\"utf-8\", value);\n\n              if (needsEncodingFixup) {\n                value = textdecode(\"iso-8859-1\", value);\n              }\n            }\n\n            return value;\n          }\n\n          function rfc2231getparam(contentDispositionStr) {\n            const matches = [];\n            let match;\n            const iter = toParamRegExp(\"filename\\\\*((?!0\\\\d)\\\\d+)(\\\\*?)\", \"ig\");\n\n            while ((match = iter.exec(contentDispositionStr)) !== null) {\n              let [, n, quot, part] = match;\n              n = parseInt(n, 10);\n\n              if (n in matches) {\n                if (n === 0) {\n                  break;\n                }\n\n                continue;\n              }\n\n              matches[n] = [quot, part];\n            }\n\n            const parts = [];\n\n            for (let n = 0; n < matches.length; ++n) {\n              if (!(n in matches)) {\n                break;\n              }\n\n              let [quot, part] = matches[n];\n              part = rfc2616unquote(part);\n\n              if (quot) {\n                part = unescape(part);\n\n                if (n === 0) {\n                  part = rfc5987decode(part);\n                }\n              }\n\n              parts.push(part);\n            }\n\n            return parts.join(\"\");\n          }\n\n          function rfc2616unquote(value) {\n            if (value.startsWith('\"')) {\n              const parts = value.slice(1).split('\\\\\"');\n\n              for (let i = 0; i < parts.length; ++i) {\n                const quotindex = parts[i].indexOf('\"');\n\n                if (quotindex !== -1) {\n                  parts[i] = parts[i].slice(0, quotindex);\n                  parts.length = i + 1;\n                }\n\n                parts[i] = parts[i].replace(/\\\\(.)/g, \"$1\");\n              }\n\n              value = parts.join('\"');\n            }\n\n            return value;\n          }\n\n          function rfc5987decode(extvalue) {\n            const encodingend = extvalue.indexOf(\"'\");\n\n            if (encodingend === -1) {\n              return extvalue;\n            }\n\n            const encoding = extvalue.slice(0, encodingend);\n            const langvalue = extvalue.slice(encodingend + 1);\n            const value = langvalue.replace(/^[^']*'/, \"\");\n            return textdecode(encoding, value);\n          }\n\n          function rfc2047decode(value) {\n            if (!value.startsWith(\"=?\") || /[\\x00-\\x19\\x80-\\xff]/.test(value)) {\n              return value;\n            }\n\n            return value.replace(/=\\?([\\w-]*)\\?([QqBb])\\?((?:[^?]|\\?(?!=))*)\\?=/g, function (matches, charset, encoding, text) {\n              if (encoding === \"q\" || encoding === \"Q\") {\n                text = text.replace(/_/g, \" \");\n                text = text.replace(/=([0-9a-fA-F]{2})/g, function (match, hex) {\n                  return String.fromCharCode(parseInt(hex, 16));\n                });\n                return textdecode(charset, text);\n              }\n\n              try {\n                text = atob(text);\n              } catch (e) {}\n\n              return textdecode(charset, text);\n            });\n          }\n\n          return \"\";\n        }\n        /***/\n\n      },\n      /* 26 */\n\n      /***/\n      (__unused_webpack_module, exports, __w_pdfjs_require__) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.PDFNetworkStream = void 0;\n\n        var _util = __w_pdfjs_require__(2);\n\n        var _network_utils = __w_pdfjs_require__(24);\n\n        ;\n        const OK_RESPONSE = 200;\n        const PARTIAL_CONTENT_RESPONSE = 206;\n\n        function getArrayBuffer(xhr) {\n          const data = xhr.response;\n\n          if (typeof data !== \"string\") {\n            return data;\n          }\n\n          const array = (0, _util.stringToBytes)(data);\n          return array.buffer;\n        }\n\n        class NetworkManager {\n          constructor(url) {\n            let args = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n            this.url = url;\n            this.isHttp = /^https?:/i.test(url);\n            this.httpHeaders = this.isHttp && args.httpHeaders || Object.create(null);\n            this.withCredentials = args.withCredentials || false;\n\n            this.getXhr = args.getXhr || function NetworkManager_getXhr() {\n              return new XMLHttpRequest();\n            };\n\n            this.currXhrId = 0;\n            this.pendingRequests = Object.create(null);\n          }\n\n          requestRange(begin, end, listeners) {\n            const args = {\n              begin,\n              end\n            };\n\n            for (const prop in listeners) {\n              args[prop] = listeners[prop];\n            }\n\n            return this.request(args);\n          }\n\n          requestFull(listeners) {\n            return this.request(listeners);\n          }\n\n          request(args) {\n            const xhr = this.getXhr();\n            const xhrId = this.currXhrId++;\n            const pendingRequest = this.pendingRequests[xhrId] = {\n              xhr\n            };\n            xhr.open(\"GET\", this.url);\n            xhr.withCredentials = this.withCredentials;\n\n            for (const property in this.httpHeaders) {\n              const value = this.httpHeaders[property];\n\n              if (typeof value === \"undefined\") {\n                continue;\n              }\n\n              xhr.setRequestHeader(property, value);\n            }\n\n            if (this.isHttp && \"begin\" in args && \"end\" in args) {\n              xhr.setRequestHeader(\"Range\", `bytes=${args.begin}-${args.end - 1}`);\n              pendingRequest.expectedStatus = PARTIAL_CONTENT_RESPONSE;\n            } else {\n              pendingRequest.expectedStatus = OK_RESPONSE;\n            }\n\n            xhr.responseType = \"arraybuffer\";\n\n            if (args.onError) {\n              xhr.onerror = function (evt) {\n                args.onError(xhr.status);\n              };\n            }\n\n            xhr.onreadystatechange = this.onStateChange.bind(this, xhrId);\n            xhr.onprogress = this.onProgress.bind(this, xhrId);\n            pendingRequest.onHeadersReceived = args.onHeadersReceived;\n            pendingRequest.onDone = args.onDone;\n            pendingRequest.onError = args.onError;\n            pendingRequest.onProgress = args.onProgress;\n            xhr.send(null);\n            return xhrId;\n          }\n\n          onProgress(xhrId, evt) {\n            const pendingRequest = this.pendingRequests[xhrId];\n\n            if (!pendingRequest) {\n              return;\n            }\n\n            pendingRequest.onProgress?.(evt);\n          }\n\n          onStateChange(xhrId, evt) {\n            const pendingRequest = this.pendingRequests[xhrId];\n\n            if (!pendingRequest) {\n              return;\n            }\n\n            const xhr = pendingRequest.xhr;\n\n            if (xhr.readyState >= 2 && pendingRequest.onHeadersReceived) {\n              pendingRequest.onHeadersReceived();\n              delete pendingRequest.onHeadersReceived;\n            }\n\n            if (xhr.readyState !== 4) {\n              return;\n            }\n\n            if (!(xhrId in this.pendingRequests)) {\n              return;\n            }\n\n            delete this.pendingRequests[xhrId];\n\n            if (xhr.status === 0 && this.isHttp) {\n              pendingRequest.onError?.(xhr.status);\n              return;\n            }\n\n            const xhrStatus = xhr.status || OK_RESPONSE;\n            const ok_response_on_range_request = xhrStatus === OK_RESPONSE && pendingRequest.expectedStatus === PARTIAL_CONTENT_RESPONSE;\n\n            if (!ok_response_on_range_request && xhrStatus !== pendingRequest.expectedStatus) {\n              pendingRequest.onError?.(xhr.status);\n              return;\n            }\n\n            const chunk = getArrayBuffer(xhr);\n\n            if (xhrStatus === PARTIAL_CONTENT_RESPONSE) {\n              const rangeHeader = xhr.getResponseHeader(\"Content-Range\");\n              const matches = /bytes (\\d+)-(\\d+)\\/(\\d+)/.exec(rangeHeader);\n              pendingRequest.onDone({\n                begin: parseInt(matches[1], 10),\n                chunk\n              });\n            } else if (chunk) {\n              pendingRequest.onDone({\n                begin: 0,\n                chunk\n              });\n            } else {\n              pendingRequest.onError?.(xhr.status);\n            }\n          }\n\n          getRequestXhr(xhrId) {\n            return this.pendingRequests[xhrId].xhr;\n          }\n\n          isPendingRequest(xhrId) {\n            return xhrId in this.pendingRequests;\n          }\n\n          abortRequest(xhrId) {\n            const xhr = this.pendingRequests[xhrId].xhr;\n            delete this.pendingRequests[xhrId];\n            xhr.abort();\n          }\n\n        }\n\n        class PDFNetworkStream {\n          constructor(source) {\n            this._source = source;\n            this._manager = new NetworkManager(source.url, {\n              httpHeaders: source.httpHeaders,\n              withCredentials: source.withCredentials\n            });\n            this._rangeChunkSize = source.rangeChunkSize;\n            this._fullRequestReader = null;\n            this._rangeRequestReaders = [];\n          }\n\n          _onRangeRequestReaderClosed(reader) {\n            const i = this._rangeRequestReaders.indexOf(reader);\n\n            if (i >= 0) {\n              this._rangeRequestReaders.splice(i, 1);\n            }\n          }\n\n          getFullReader() {\n            (0, _util.assert)(!this._fullRequestReader, \"PDFNetworkStream.getFullReader can only be called once.\");\n            this._fullRequestReader = new PDFNetworkStreamFullRequestReader(this._manager, this._source);\n            return this._fullRequestReader;\n          }\n\n          getRangeReader(begin, end) {\n            const reader = new PDFNetworkStreamRangeRequestReader(this._manager, begin, end);\n            reader.onClosed = this._onRangeRequestReaderClosed.bind(this);\n\n            this._rangeRequestReaders.push(reader);\n\n            return reader;\n          }\n\n          cancelAllRequests(reason) {\n            this._fullRequestReader?.cancel(reason);\n\n            for (const reader of this._rangeRequestReaders.slice(0)) {\n              reader.cancel(reason);\n            }\n          }\n\n        }\n\n        exports.PDFNetworkStream = PDFNetworkStream;\n\n        class PDFNetworkStreamFullRequestReader {\n          constructor(manager, source) {\n            this._manager = manager;\n            const args = {\n              onHeadersReceived: this._onHeadersReceived.bind(this),\n              onDone: this._onDone.bind(this),\n              onError: this._onError.bind(this),\n              onProgress: this._onProgress.bind(this)\n            };\n            this._url = source.url;\n            this._fullRequestId = manager.requestFull(args);\n            this._headersReceivedCapability = (0, _util.createPromiseCapability)();\n            this._disableRange = source.disableRange || false;\n            this._contentLength = source.length;\n            this._rangeChunkSize = source.rangeChunkSize;\n\n            if (!this._rangeChunkSize && !this._disableRange) {\n              this._disableRange = true;\n            }\n\n            this._isStreamingSupported = false;\n            this._isRangeSupported = false;\n            this._cachedChunks = [];\n            this._requests = [];\n            this._done = false;\n            this._storedError = undefined;\n            this._filename = null;\n            this.onProgress = null;\n          }\n\n          _onHeadersReceived() {\n            const fullRequestXhrId = this._fullRequestId;\n\n            const fullRequestXhr = this._manager.getRequestXhr(fullRequestXhrId);\n\n            const getResponseHeader = name => {\n              return fullRequestXhr.getResponseHeader(name);\n            };\n\n            const {\n              allowRangeRequests,\n              suggestedLength\n            } = (0, _network_utils.validateRangeRequestCapabilities)({\n              getResponseHeader,\n              isHttp: this._manager.isHttp,\n              rangeChunkSize: this._rangeChunkSize,\n              disableRange: this._disableRange\n            });\n\n            if (allowRangeRequests) {\n              this._isRangeSupported = true;\n            }\n\n            this._contentLength = suggestedLength || this._contentLength;\n            this._filename = (0, _network_utils.extractFilenameFromHeader)(getResponseHeader);\n\n            if (this._isRangeSupported) {\n              this._manager.abortRequest(fullRequestXhrId);\n            }\n\n            this._headersReceivedCapability.resolve();\n          }\n\n          _onDone(data) {\n            if (data) {\n              if (this._requests.length > 0) {\n                const requestCapability = this._requests.shift();\n\n                requestCapability.resolve({\n                  value: data.chunk,\n                  done: false\n                });\n              } else {\n                this._cachedChunks.push(data.chunk);\n              }\n            }\n\n            this._done = true;\n\n            if (this._cachedChunks.length > 0) {\n              return;\n            }\n\n            for (const requestCapability of this._requests) {\n              requestCapability.resolve({\n                value: undefined,\n                done: true\n              });\n            }\n\n            this._requests.length = 0;\n          }\n\n          _onError(status) {\n            this._storedError = (0, _network_utils.createResponseStatusError)(status, this._url);\n\n            this._headersReceivedCapability.reject(this._storedError);\n\n            for (const requestCapability of this._requests) {\n              requestCapability.reject(this._storedError);\n            }\n\n            this._requests.length = 0;\n            this._cachedChunks.length = 0;\n          }\n\n          _onProgress(evt) {\n            this.onProgress?.({\n              loaded: evt.loaded,\n              total: evt.lengthComputable ? evt.total : this._contentLength\n            });\n          }\n\n          get filename() {\n            return this._filename;\n          }\n\n          get isRangeSupported() {\n            return this._isRangeSupported;\n          }\n\n          get isStreamingSupported() {\n            return this._isStreamingSupported;\n          }\n\n          get contentLength() {\n            return this._contentLength;\n          }\n\n          get headersReady() {\n            return this._headersReceivedCapability.promise;\n          }\n\n          async read() {\n            if (this._storedError) {\n              throw this._storedError;\n            }\n\n            if (this._cachedChunks.length > 0) {\n              const chunk = this._cachedChunks.shift();\n\n              return {\n                value: chunk,\n                done: false\n              };\n            }\n\n            if (this._done) {\n              return {\n                value: undefined,\n                done: true\n              };\n            }\n\n            const requestCapability = (0, _util.createPromiseCapability)();\n\n            this._requests.push(requestCapability);\n\n            return requestCapability.promise;\n          }\n\n          cancel(reason) {\n            this._done = true;\n\n            this._headersReceivedCapability.reject(reason);\n\n            for (const requestCapability of this._requests) {\n              requestCapability.resolve({\n                value: undefined,\n                done: true\n              });\n            }\n\n            this._requests.length = 0;\n\n            if (this._manager.isPendingRequest(this._fullRequestId)) {\n              this._manager.abortRequest(this._fullRequestId);\n            }\n\n            this._fullRequestReader = null;\n          }\n\n        }\n\n        class PDFNetworkStreamRangeRequestReader {\n          constructor(manager, begin, end) {\n            this._manager = manager;\n            const args = {\n              onDone: this._onDone.bind(this),\n              onError: this._onError.bind(this),\n              onProgress: this._onProgress.bind(this)\n            };\n            this._url = manager.url;\n            this._requestId = manager.requestRange(begin, end, args);\n            this._requests = [];\n            this._queuedChunk = null;\n            this._done = false;\n            this._storedError = undefined;\n            this.onProgress = null;\n            this.onClosed = null;\n          }\n\n          _close() {\n            this.onClosed?.(this);\n          }\n\n          _onDone(data) {\n            const chunk = data.chunk;\n\n            if (this._requests.length > 0) {\n              const requestCapability = this._requests.shift();\n\n              requestCapability.resolve({\n                value: chunk,\n                done: false\n              });\n            } else {\n              this._queuedChunk = chunk;\n            }\n\n            this._done = true;\n\n            for (const requestCapability of this._requests) {\n              requestCapability.resolve({\n                value: undefined,\n                done: true\n              });\n            }\n\n            this._requests.length = 0;\n\n            this._close();\n          }\n\n          _onError(status) {\n            this._storedError = (0, _network_utils.createResponseStatusError)(status, this._url);\n\n            for (const requestCapability of this._requests) {\n              requestCapability.reject(this._storedError);\n            }\n\n            this._requests.length = 0;\n            this._queuedChunk = null;\n          }\n\n          _onProgress(evt) {\n            if (!this.isStreamingSupported) {\n              this.onProgress?.({\n                loaded: evt.loaded\n              });\n            }\n          }\n\n          get isStreamingSupported() {\n            return false;\n          }\n\n          async read() {\n            if (this._storedError) {\n              throw this._storedError;\n            }\n\n            if (this._queuedChunk !== null) {\n              const chunk = this._queuedChunk;\n              this._queuedChunk = null;\n              return {\n                value: chunk,\n                done: false\n              };\n            }\n\n            if (this._done) {\n              return {\n                value: undefined,\n                done: true\n              };\n            }\n\n            const requestCapability = (0, _util.createPromiseCapability)();\n\n            this._requests.push(requestCapability);\n\n            return requestCapability.promise;\n          }\n\n          cancel(reason) {\n            this._done = true;\n\n            for (const requestCapability of this._requests) {\n              requestCapability.resolve({\n                value: undefined,\n                done: true\n              });\n            }\n\n            this._requests.length = 0;\n\n            if (this._manager.isPendingRequest(this._requestId)) {\n              this._manager.abortRequest(this._requestId);\n            }\n\n            this._close();\n          }\n\n        }\n        /***/\n\n      },\n      /* 27 */\n\n      /***/\n      (__unused_webpack_module, exports, __w_pdfjs_require__) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.PDFFetchStream = void 0;\n\n        var _util = __w_pdfjs_require__(2);\n\n        var _network_utils = __w_pdfjs_require__(24);\n\n        ;\n\n        function createFetchOptions(headers, withCredentials, abortController) {\n          return {\n            method: \"GET\",\n            headers,\n            signal: abortController?.signal,\n            mode: \"cors\",\n            credentials: withCredentials ? \"include\" : \"same-origin\",\n            redirect: \"follow\"\n          };\n        }\n\n        function createHeaders(httpHeaders) {\n          const headers = new Headers();\n\n          for (const property in httpHeaders) {\n            const value = httpHeaders[property];\n\n            if (typeof value === \"undefined\") {\n              continue;\n            }\n\n            headers.append(property, value);\n          }\n\n          return headers;\n        }\n\n        class PDFFetchStream {\n          constructor(source) {\n            this.source = source;\n            this.isHttp = /^https?:/i.test(source.url);\n            this.httpHeaders = this.isHttp && source.httpHeaders || {};\n            this._fullRequestReader = null;\n            this._rangeRequestReaders = [];\n          }\n\n          get _progressiveDataLength() {\n            return this._fullRequestReader?._loaded ?? 0;\n          }\n\n          getFullReader() {\n            (0, _util.assert)(!this._fullRequestReader, \"PDFFetchStream.getFullReader can only be called once.\");\n            this._fullRequestReader = new PDFFetchStreamReader(this);\n            return this._fullRequestReader;\n          }\n\n          getRangeReader(begin, end) {\n            if (end <= this._progressiveDataLength) {\n              return null;\n            }\n\n            const reader = new PDFFetchStreamRangeReader(this, begin, end);\n\n            this._rangeRequestReaders.push(reader);\n\n            return reader;\n          }\n\n          cancelAllRequests(reason) {\n            if (this._fullRequestReader) {\n              this._fullRequestReader.cancel(reason);\n            }\n\n            for (const reader of this._rangeRequestReaders.slice(0)) {\n              reader.cancel(reason);\n            }\n          }\n\n        }\n\n        exports.PDFFetchStream = PDFFetchStream;\n\n        class PDFFetchStreamReader {\n          constructor(stream) {\n            this._stream = stream;\n            this._reader = null;\n            this._loaded = 0;\n            this._filename = null;\n            const source = stream.source;\n            this._withCredentials = source.withCredentials || false;\n            this._contentLength = source.length;\n            this._headersCapability = (0, _util.createPromiseCapability)();\n            this._disableRange = source.disableRange || false;\n            this._rangeChunkSize = source.rangeChunkSize;\n\n            if (!this._rangeChunkSize && !this._disableRange) {\n              this._disableRange = true;\n            }\n\n            if (typeof AbortController !== \"undefined\") {\n              this._abortController = new AbortController();\n            }\n\n            this._isStreamingSupported = !source.disableStream;\n            this._isRangeSupported = !source.disableRange;\n            this._headers = createHeaders(this._stream.httpHeaders);\n            const url = source.url;\n            fetch(url, createFetchOptions(this._headers, this._withCredentials, this._abortController)).then(response => {\n              if (!(0, _network_utils.validateResponseStatus)(response.status)) {\n                throw (0, _network_utils.createResponseStatusError)(response.status, url);\n              }\n\n              this._reader = response.body.getReader();\n\n              this._headersCapability.resolve();\n\n              const getResponseHeader = name => {\n                return response.headers.get(name);\n              };\n\n              const {\n                allowRangeRequests,\n                suggestedLength\n              } = (0, _network_utils.validateRangeRequestCapabilities)({\n                getResponseHeader,\n                isHttp: this._stream.isHttp,\n                rangeChunkSize: this._rangeChunkSize,\n                disableRange: this._disableRange\n              });\n              this._isRangeSupported = allowRangeRequests;\n              this._contentLength = suggestedLength || this._contentLength;\n              this._filename = (0, _network_utils.extractFilenameFromHeader)(getResponseHeader);\n\n              if (!this._isStreamingSupported && this._isRangeSupported) {\n                this.cancel(new _util.AbortException(\"Streaming is disabled.\"));\n              }\n            }).catch(this._headersCapability.reject);\n            this.onProgress = null;\n          }\n\n          get headersReady() {\n            return this._headersCapability.promise;\n          }\n\n          get filename() {\n            return this._filename;\n          }\n\n          get contentLength() {\n            return this._contentLength;\n          }\n\n          get isRangeSupported() {\n            return this._isRangeSupported;\n          }\n\n          get isStreamingSupported() {\n            return this._isStreamingSupported;\n          }\n\n          async read() {\n            await this._headersCapability.promise;\n            const {\n              value,\n              done\n            } = await this._reader.read();\n\n            if (done) {\n              return {\n                value,\n                done\n              };\n            }\n\n            this._loaded += value.byteLength;\n\n            if (this.onProgress) {\n              this.onProgress({\n                loaded: this._loaded,\n                total: this._contentLength\n              });\n            }\n\n            const buffer = new Uint8Array(value).buffer;\n            return {\n              value: buffer,\n              done: false\n            };\n          }\n\n          cancel(reason) {\n            if (this._reader) {\n              this._reader.cancel(reason);\n            }\n\n            if (this._abortController) {\n              this._abortController.abort();\n            }\n          }\n\n        }\n\n        class PDFFetchStreamRangeReader {\n          constructor(stream, begin, end) {\n            this._stream = stream;\n            this._reader = null;\n            this._loaded = 0;\n            const source = stream.source;\n            this._withCredentials = source.withCredentials || false;\n            this._readCapability = (0, _util.createPromiseCapability)();\n            this._isStreamingSupported = !source.disableStream;\n\n            if (typeof AbortController !== \"undefined\") {\n              this._abortController = new AbortController();\n            }\n\n            this._headers = createHeaders(this._stream.httpHeaders);\n\n            this._headers.append(\"Range\", `bytes=${begin}-${end - 1}`);\n\n            const url = source.url;\n            fetch(url, createFetchOptions(this._headers, this._withCredentials, this._abortController)).then(response => {\n              if (!(0, _network_utils.validateResponseStatus)(response.status)) {\n                throw (0, _network_utils.createResponseStatusError)(response.status, url);\n              }\n\n              this._readCapability.resolve();\n\n              this._reader = response.body.getReader();\n            }).catch(this._readCapability.reject);\n            this.onProgress = null;\n          }\n\n          get isStreamingSupported() {\n            return this._isStreamingSupported;\n          }\n\n          async read() {\n            await this._readCapability.promise;\n            const {\n              value,\n              done\n            } = await this._reader.read();\n\n            if (done) {\n              return {\n                value,\n                done\n              };\n            }\n\n            this._loaded += value.byteLength;\n\n            if (this.onProgress) {\n              this.onProgress({\n                loaded: this._loaded\n              });\n            }\n\n            const buffer = new Uint8Array(value).buffer;\n            return {\n              value: buffer,\n              done: false\n            };\n          }\n\n          cancel(reason) {\n            if (this._reader) {\n              this._reader.cancel(reason);\n            }\n\n            if (this._abortController) {\n              this._abortController.abort();\n            }\n          }\n\n        }\n        /***/\n\n      }\n      /******/\n      ];\n      /************************************************************************/\n\n      /******/\n      // The module cache\n\n      /******/\n\n      var __webpack_module_cache__ = {};\n      /******/\n\n      /******/\n      // The require function\n\n      /******/\n\n      function __w_pdfjs_require__(moduleId) {\n        /******/\n        // Check if module is in cache\n\n        /******/\n        var cachedModule = __webpack_module_cache__[moduleId];\n        /******/\n\n        if (cachedModule !== undefined) {\n          /******/\n          return cachedModule.exports;\n          /******/\n        }\n        /******/\n        // Create a new module (and put it into the cache)\n\n        /******/\n\n\n        var module = __webpack_module_cache__[moduleId] = {\n          /******/\n          // no module.id needed\n\n          /******/\n          // no module.loaded needed\n\n          /******/\n          exports: {}\n          /******/\n\n        };\n        /******/\n\n        /******/\n        // Execute the module function\n\n        /******/\n\n        __webpack_modules__[moduleId](module, module.exports, __w_pdfjs_require__);\n        /******/\n\n        /******/\n        // Return the exports of the module\n\n        /******/\n\n\n        return module.exports;\n        /******/\n      }\n      /******/\n\n      /************************************************************************/\n\n\n      var __webpack_exports__ = {}; // This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.\n\n      (() => {\n        var exports = __webpack_exports__;\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        Object.defineProperty(exports, \"AnnotationLayer\", {\n          enumerable: true,\n          get: function () {\n            return _annotation_layer.AnnotationLayer;\n          }\n        });\n        Object.defineProperty(exports, \"AnnotationMode\", {\n          enumerable: true,\n          get: function () {\n            return _util.AnnotationMode;\n          }\n        });\n        Object.defineProperty(exports, \"CMapCompressionType\", {\n          enumerable: true,\n          get: function () {\n            return _util.CMapCompressionType;\n          }\n        });\n        Object.defineProperty(exports, \"GlobalWorkerOptions\", {\n          enumerable: true,\n          get: function () {\n            return _worker_options.GlobalWorkerOptions;\n          }\n        });\n        Object.defineProperty(exports, \"InvalidPDFException\", {\n          enumerable: true,\n          get: function () {\n            return _util.InvalidPDFException;\n          }\n        });\n        Object.defineProperty(exports, \"LinkTarget\", {\n          enumerable: true,\n          get: function () {\n            return _display_utils.LinkTarget;\n          }\n        });\n        Object.defineProperty(exports, \"LoopbackPort\", {\n          enumerable: true,\n          get: function () {\n            return _api.LoopbackPort;\n          }\n        });\n        Object.defineProperty(exports, \"MissingPDFException\", {\n          enumerable: true,\n          get: function () {\n            return _util.MissingPDFException;\n          }\n        });\n        Object.defineProperty(exports, \"OPS\", {\n          enumerable: true,\n          get: function () {\n            return _util.OPS;\n          }\n        });\n        Object.defineProperty(exports, \"PDFDataRangeTransport\", {\n          enumerable: true,\n          get: function () {\n            return _api.PDFDataRangeTransport;\n          }\n        });\n        Object.defineProperty(exports, \"PDFDateString\", {\n          enumerable: true,\n          get: function () {\n            return _display_utils.PDFDateString;\n          }\n        });\n        Object.defineProperty(exports, \"PDFWorker\", {\n          enumerable: true,\n          get: function () {\n            return _api.PDFWorker;\n          }\n        });\n        Object.defineProperty(exports, \"PasswordResponses\", {\n          enumerable: true,\n          get: function () {\n            return _util.PasswordResponses;\n          }\n        });\n        Object.defineProperty(exports, \"PermissionFlag\", {\n          enumerable: true,\n          get: function () {\n            return _util.PermissionFlag;\n          }\n        });\n        Object.defineProperty(exports, \"PixelsPerInch\", {\n          enumerable: true,\n          get: function () {\n            return _display_utils.PixelsPerInch;\n          }\n        });\n        Object.defineProperty(exports, \"RenderingCancelledException\", {\n          enumerable: true,\n          get: function () {\n            return _display_utils.RenderingCancelledException;\n          }\n        });\n        Object.defineProperty(exports, \"SVGGraphics\", {\n          enumerable: true,\n          get: function () {\n            return _svg.SVGGraphics;\n          }\n        });\n        Object.defineProperty(exports, \"UNSUPPORTED_FEATURES\", {\n          enumerable: true,\n          get: function () {\n            return _util.UNSUPPORTED_FEATURES;\n          }\n        });\n        Object.defineProperty(exports, \"UnexpectedResponseException\", {\n          enumerable: true,\n          get: function () {\n            return _util.UnexpectedResponseException;\n          }\n        });\n        Object.defineProperty(exports, \"Util\", {\n          enumerable: true,\n          get: function () {\n            return _util.Util;\n          }\n        });\n        Object.defineProperty(exports, \"VerbosityLevel\", {\n          enumerable: true,\n          get: function () {\n            return _util.VerbosityLevel;\n          }\n        });\n        Object.defineProperty(exports, \"XfaLayer\", {\n          enumerable: true,\n          get: function () {\n            return _xfa_layer.XfaLayer;\n          }\n        });\n        Object.defineProperty(exports, \"addLinkAttributes\", {\n          enumerable: true,\n          get: function () {\n            return _display_utils.addLinkAttributes;\n          }\n        });\n        Object.defineProperty(exports, \"build\", {\n          enumerable: true,\n          get: function () {\n            return _api.build;\n          }\n        });\n        Object.defineProperty(exports, \"createObjectURL\", {\n          enumerable: true,\n          get: function () {\n            return _util.createObjectURL;\n          }\n        });\n        Object.defineProperty(exports, \"createPromiseCapability\", {\n          enumerable: true,\n          get: function () {\n            return _util.createPromiseCapability;\n          }\n        });\n        Object.defineProperty(exports, \"createValidAbsoluteUrl\", {\n          enumerable: true,\n          get: function () {\n            return _util.createValidAbsoluteUrl;\n          }\n        });\n        Object.defineProperty(exports, \"getDocument\", {\n          enumerable: true,\n          get: function () {\n            return _api.getDocument;\n          }\n        });\n        Object.defineProperty(exports, \"getFilenameFromUrl\", {\n          enumerable: true,\n          get: function () {\n            return _display_utils.getFilenameFromUrl;\n          }\n        });\n        Object.defineProperty(exports, \"getPdfFilenameFromUrl\", {\n          enumerable: true,\n          get: function () {\n            return _display_utils.getPdfFilenameFromUrl;\n          }\n        });\n        Object.defineProperty(exports, \"getXfaPageViewport\", {\n          enumerable: true,\n          get: function () {\n            return _display_utils.getXfaPageViewport;\n          }\n        });\n        Object.defineProperty(exports, \"isPdfFile\", {\n          enumerable: true,\n          get: function () {\n            return _display_utils.isPdfFile;\n          }\n        });\n        Object.defineProperty(exports, \"loadScript\", {\n          enumerable: true,\n          get: function () {\n            return _display_utils.loadScript;\n          }\n        });\n        Object.defineProperty(exports, \"removeNullCharacters\", {\n          enumerable: true,\n          get: function () {\n            return _util.removeNullCharacters;\n          }\n        });\n        Object.defineProperty(exports, \"renderTextLayer\", {\n          enumerable: true,\n          get: function () {\n            return _text_layer.renderTextLayer;\n          }\n        });\n        Object.defineProperty(exports, \"shadow\", {\n          enumerable: true,\n          get: function () {\n            return _util.shadow;\n          }\n        });\n        Object.defineProperty(exports, \"version\", {\n          enumerable: true,\n          get: function () {\n            return _api.version;\n          }\n        });\n\n        var _display_utils = __w_pdfjs_require__(1);\n\n        var _util = __w_pdfjs_require__(2);\n\n        var _api = __w_pdfjs_require__(6);\n\n        var _annotation_layer = __w_pdfjs_require__(18);\n\n        var _worker_options = __w_pdfjs_require__(12);\n\n        var _is_node = __w_pdfjs_require__(4);\n\n        var _text_layer = __w_pdfjs_require__(21);\n\n        var _svg = __w_pdfjs_require__(22);\n\n        var _xfa_layer = __w_pdfjs_require__(20);\n\n        const pdfjsVersion = '2.12.313';\n        const pdfjsBuild = 'a2ae56f39';\n        {\n          if (_is_node.isNodeJS) {\n            const {\n              PDFNodeStream\n            } = __w_pdfjs_require__(23);\n\n            (0, _api.setPDFNetworkStreamFactory)(params => {\n              return new PDFNodeStream(params);\n            });\n          } else {\n            const {\n              PDFNetworkStream\n            } = __w_pdfjs_require__(26);\n\n            const {\n              PDFFetchStream\n            } = __w_pdfjs_require__(27);\n\n            (0, _api.setPDFNetworkStreamFactory)(params => {\n              if ((0, _display_utils.isValidFetchUrl)(params.url)) {\n                return new PDFFetchStream(params);\n              }\n\n              return new PDFNetworkStream(params);\n            });\n          }\n        }\n      })();\n      /******/\n\n\n      return __webpack_exports__;\n      /******/\n    })()\n  );\n});","map":{"version":3,"mappings":"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","names":["module","define","exports","root","DEFAULT_LINK_REL","SVG_NS","PixelsPerInch","CSS","PDF","shadow","constructor","ownerDocument","globalThis","document","_createCanvas","canvas","width","height","asTypedArray","isValidFetchUrl","baseURI","response","fetch","url","ok","statusText","stringToBytes","text","request","XMLHttpRequest","DONE","data","responseText","resolve","reject","_fetchData","fetchData","isCompressed","cMapData","compressionType","_createSVG","type","viewBox","scale","rotation","offsetX","offsetY","dontFlip","centerX","centerY","rotateD","rotateA","rotateB","rotateC","offsetCanvasY","offsetCanvasX","Math","clone","slice","convertToViewportPoint","_util","transform","convertToViewportRectangle","topLeft","rect","bottomRight","convertToPdfPoint","LinkTarget","NONE","SELF","BLANK","PARENT","TOP","target","rel","enabled","assert","urlNullRemoved","removeNullCharacters","link","targetStr","ii","length","i","filename","anchor","query","end","defaultFilename","isDataScheme","warn","reURI","reFilename","splitURI","suggestedFilename","decodeURIComponent","Object","time","name","started","Date","now","timeEnd","start","toString","outBuf","longest","times","duration","protocol","baseUrl","removeScriptElement","script","src","remove","evt","documentElement","appendChild","console","details","pdfDateStringRegex","toDateObject","isString","input","matches","year","parseInt","month","day","hour","minute","second","universalTimeRelation","offsetHour","offsetMinute","xfaPage","style","__w_pdfjs_require__","IDENTITY_MATRIX","FONT_IDENTITY_MATRIX","RenderingIntentFlag","ANY","DISPLAY","PRINT","ANNOTATIONS_FORMS","ANNOTATIONS_STORAGE","ANNOTATIONS_DISABLE","OPLIST","AnnotationMode","DISABLE","ENABLE","ENABLE_FORMS","ENABLE_STORAGE","PermissionFlag","MODIFY_CONTENTS","COPY","MODIFY_ANNOTATIONS","FILL_INTERACTIVE_FORMS","COPY_FOR_ACCESSIBILITY","ASSEMBLE","PRINT_HIGH_QUALITY","TextRenderingMode","FILL","STROKE","FILL_STROKE","INVISIBLE","FILL_ADD_TO_PATH","STROKE_ADD_TO_PATH","FILL_STROKE_ADD_TO_PATH","ADD_TO_PATH","FILL_STROKE_MASK","ADD_TO_PATH_FLAG","ImageKind","GRAYSCALE_1BPP","RGB_24BPP","RGBA_32BPP","AnnotationType","TEXT","LINK","FREETEXT","LINE","SQUARE","CIRCLE","POLYGON","POLYLINE","HIGHLIGHT","UNDERLINE","SQUIGGLY","STRIKEOUT","STAMP","CARET","INK","POPUP","FILEATTACHMENT","SOUND","MOVIE","WIDGET","SCREEN","PRINTERMARK","TRAPNET","WATERMARK","THREED","REDACT","AnnotationStateModelType","MARKED","REVIEW","AnnotationMarkedState","UNMARKED","AnnotationReviewState","ACCEPTED","REJECTED","CANCELLED","COMPLETED","AnnotationReplyType","GROUP","REPLY","AnnotationFlag","HIDDEN","NOZOOM","NOROTATE","NOVIEW","READONLY","LOCKED","TOGGLENOVIEW","LOCKEDCONTENTS","AnnotationFieldFlag","REQUIRED","NOEXPORT","MULTILINE","PASSWORD","NOTOGGLETOOFF","RADIO","PUSHBUTTON","COMBO","EDIT","SORT","FILESELECT","MULTISELECT","DONOTSPELLCHECK","DONOTSCROLL","COMB","RICHTEXT","RADIOSINUNISON","COMMITONSELCHANGE","AnnotationBorderStyleType","SOLID","DASHED","BEVELED","INSET","AnnotationActionEventType","E","X","D","U","Fo","Bl","PO","PC","PV","PI","K","F","V","C","DocumentActionEventType","WC","WS","DS","WP","DP","PageActionEventType","O","StreamType","UNKNOWN","FLATE","LZW","DCT","JPX","JBIG","A85","AHX","CCF","RLX","FontType","TYPE1","TYPE1STANDARD","TYPE1C","CIDFONTTYPE0","CIDFONTTYPE0C","TRUETYPE","CIDFONTTYPE2","TYPE3","OPENTYPE","TYPE0","MMTYPE1","VerbosityLevel","ERRORS","WARNINGS","INFOS","CMapCompressionType","BINARY","STREAM","OPS","dependency","setLineWidth","setLineCap","setLineJoin","setMiterLimit","setDash","setRenderingIntent","setFlatness","setGState","save","restore","moveTo","lineTo","curveTo","curveTo2","curveTo3","closePath","rectangle","stroke","closeStroke","fill","eoFill","fillStroke","eoFillStroke","closeFillStroke","closeEOFillStroke","endPath","clip","eoClip","beginText","endText","setCharSpacing","setWordSpacing","setHScale","setLeading","setFont","setTextRenderingMode","setTextRise","moveText","setLeadingMoveText","setTextMatrix","nextLine","showText","showSpacedText","nextLineShowText","nextLineSetSpacingShowText","setCharWidth","setCharWidthAndBounds","setStrokeColorSpace","setFillColorSpace","setStrokeColor","setStrokeColorN","setFillColor","setFillColorN","setStrokeGray","setFillGray","setStrokeRGBColor","setFillRGBColor","setStrokeCMYKColor","setFillCMYKColor","shadingFill","beginInlineImage","beginImageData","endInlineImage","paintXObject","markPoint","markPointProps","beginMarkedContent","beginMarkedContentProps","endMarkedContent","beginCompat","endCompat","paintFormXObjectBegin","paintFormXObjectEnd","beginGroup","endGroup","beginAnnotations","endAnnotations","beginAnnotation","endAnnotation","paintJpegXObject","paintImageMaskXObject","paintImageMaskXObjectGroup","paintImageXObject","paintInlineImageXObject","paintInlineImageXObjectGroup","paintImageXObjectRepeat","paintImageMaskXObjectRepeat","paintSolidColorImageMask","constructPath","UNSUPPORTED_FEATURES","unknown","forms","javaScript","signatures","smask","shadingPattern","font","errorTilingPattern","errorExtGState","errorXObject","errorFontLoadType3","errorFontState","errorFontMissing","errorFontTranslate","errorColorSpace","errorOperatorList","errorFontToUnicode","errorFontLoadNative","errorFontBuildPath","errorFontGetPath","errorMarkedContent","errorContentSubStream","PasswordResponses","NEED_PASSWORD","INCORRECT_PASSWORD","verbosity","Number","level","msg","cond","unreachable","base","origin","other","options","dots","tryConvertEncoding","stringToUTF8String","absoluteUrl","_isValidProtocol","value","enumerable","configurable","writable","BaseException","message","Error","code","status","NullCharactersRegExp","InvisibleCharactersRegExp","replaceInvisible","str","bytes","MAX_ARGUMENT_COUNT","String","strBuf","chunkEnd","chunk","arr","undefined","byteLength","Uint8Array","resultLength","arrayByteLength","pos","item","itemLength","obj","buffer8","view32","buffer","IsLittleEndianCached","isLittleEndian","IsEvalSupportedCached","isEvalSupported","hexNumbers","Array","keys","n","makeHexColor","r","g","b","m1","m2","applyTransform","xt","p","m","yt","applyInverseTransform","d","getAxialAlignedBoundingBox","p1","Util","p2","p3","p4","inverseTransform","apply3dTransform","v","singularValueDecompose2dScale","transpose","a","c","first","sx","sy","normalizeRect","intersect","orderedX","rect1","rect2","compare","orderedY","result","bezierBoundingBox","tvalues","bounds","sqrtb2ac","x1","x2","x3","x0","y1","y2","y3","y0","t","b2ac","t1","t2","j","mt","jlen","PDFStringTranslateTable","match","buf","char","escape","unescape","encodeURIComponent","arr1","arr2","date","padStart","capability","isSettled","get","reason","contentType","forceDataSchema","URL","digits","b1","b2","b3","d1","d2","d3","d4","isNodeJS","process","nw","BaseCanvasFactory","create","context","reset","canvasAndContext","destroy","BaseCMapReaderFactory","BaseStandardFontDataFactory","BaseSVGFactory","svg","createElement","DEFAULT_RANGE_CHUNK_SIZE","RENDERING_CANCELLED_TIMEOUT","DefaultCanvasFactory","_is_node","_display_utils","DefaultCMapReaderFactory","DefaultStandardFontDataFactory","createPDFNetworkStream","pdfNetworkStreamFactory","task","PDFDocumentLoadingTask","source","isArrayBuffer","PDFDataRangeTransport","range","params","rangeTransport","worker","key","window","location","href","Buffer","isNaN","docBaseUrl","maxImageSize","useWorkerFetch","disableFontFace","useSystemFonts","disableRange","disableStream","disableAutoFetch","setVerbosityLevel","workerParams","port","GlobalWorkerOptions","workerPort","PDFWorker","docId","destroyed","workerIdPromise","_fetchDocument","networkStreamPromise","networkStream","initialData","progressiveDone","contentDispositionFilename","httpHeaders","withCredentials","rangeChunkSize","Promise","messageHandler","transport","pdfDataRangeTransport","workerId","apiVersion","password","ignoreErrors","fontExtraProperties","enableXfa","cMapUrl","standardFontDataUrl","idCounters","doc","promise","_worker","addRangeListener","listener","addProgressListener","addProgressiveReadListener","addProgressiveDoneListener","onDataRange","_rangeListeners","onDataProgress","_progressListeners","total","onDataProgressiveRead","_progressiveReadListeners","onDataProgressiveDone","_progressiveDoneListeners","transportReady","requestDataRange","abort","pdfInfo","deprecated","streamTypes","fontTypes","annotationStorage","numPages","fingerprints","stats","isPureXfa","_htmlForXfa","allXfaHtml","getPage","pageNumber","getPageIndex","ref","getDestinations","getDestination","id","getPageLabels","getPageLayout","getPageMode","getViewerPreferences","getOpenAction","getAttachments","getJavaScript","getJSActions","getDocJSActions","getOutline","getOptionalContentConfig","getPermissions","getMetadata","getMarkInfo","getData","getDownloadInfo","cleanup","keepLoadedFonts","loadingParams","loadingTask","saveDocument","getFieldObjects","hasJSActions","getCalculationOrderIds","pdfBug","pageIndex","pageInfo","commonObjs","PDFObjects","Map","rotate","userUnit","view","getViewport","getAnnotations","intent","intentArgs","cacheKey","_pageIndex","renderingIntent","annotations","annotation","getXfa","render","canvasContext","viewport","annotationMode","imageLayer","canvasFactory","background","optionalContentConfigPromise","annotationCanvasMap","arguments","_stats","intentState","streamReaderCancelTimeout","clearTimeout","canvasFactoryInstance","_ownerDocument","intentPrint","displayReadyCapability","fnArray","argsArray","lastChunk","complete","error","internalRenderTask","_tryCleanup","callback","objs","operatorList","useRequestAnimationFrame","_pdfBug","Set","add","renderTask","optionalContentConfig","pendingCleanup","transparency","operatorListChanged","getOperatorList","opListTask","opListReadCapability","streamTextContent","normalizeWhitespace","disableCombineTextItems","includeMarkedContent","TEXT_CONTENT_CHUNK_SIZE","combineTextItems","highWaterMark","size","textContent","getTextContent","xfa","XfaText","readableStream","reader","done","styles","items","pump","getReader","getStructTree","_destroy","waitOn","values","force","renderTasks","completed","cancel","clear","resetStats","_startRenderPage","_renderPageChunk","operatorListChunk","_pumpOperatorList","_abortOperatorList","streamReader","setTimeout","curIntentState","_intentStates","curCacheKey","postMessage","structuredClone","transfers","cloned","byteOffset","val","fallbackCloneValue","desc","WeakMap","object","event","cloneValue","_listeners","addEventListener","removeEventListener","terminate","PDFWorkerUtil","isWorkerDisabled","fallbackWorkerSrc","fakeWorkerId","pdfjsFilePath","wrapper","_workerPorts","_initialize","_port","_messageHandler","_initializeFromPort","_mainThreadWorkerMessageHandler","workerSrc","isSameOrigin","terminateEarly","onWorkerError","_setupFakeWorker","_webWorker","sendTest","testObj","info","WorkerMessageHandler","LoopbackPort","workerHandler","fromPort","_setupFakeWorkerGlobal","loader","mainWorkerMessageHandler","eval","loadScript","docStats","pageCache","pagePromises","metadataPromise","onUnsupportedFeature","styleElement","CMapReaderFactory","cMapPacked","StandardFontDataFactory","setupMessageHandler","_annotation_storage","getRenderingIntent","isOpList","lastModified","destroyCapability","_passwordCapability","page","resetModified","terminated","_networkStream","getFullReader","loaded","sink","close","readyReason","headersCapability","fullReader","_fullReader","isStreamingSupported","isRangeSupported","_lastProgress","contentLength","rangeReader","begin","htmlForXfa","ex","exception","onPassword","updatePassword","exportedData","_params","exportedError","fontRegistry","registerFont","imageData","pageProxy","MAX_IMAGE_SIZE_TO_STORE","_onUnsupportedFeature","featureId","_numPages","cachedPromise","serializable","getPageJSActions","results","metadata","startCleanup","cleanupSuccessful","_ensureObj","objId","resolved","has","canvasInUse","WeakSet","initializeGraphics","cancelled","_canvas","InternalRenderTask","getNextBreakPoint","graphicsReadyCallback","gfx","endDrawing","graphicsReady","_continueBound","stepper","running","_continue","onContinue","_scheduleNextBound","_scheduleNext","_useRequestAnimationFrame","_cancelBound","_next","operatorListIdx","version","build","BaseFontLoader","addNativeFontFace","nativeFontFace","insertRule","styleSheet","sheet","nativeFontFaces","bind","missingFile","isFontLoadingAPISupported","createNativeFontFace","family","rule","createFontFaceRule","isSyncFontLoadingSupported","_queueLoadingCallback","hasFonts","fonts","_loadTestFont","_prepareFontLoadEvent","FontLoader","requests","nextRequestId","supported","navigator","userAgent","otherRequest","shift","loadingContext","completeRequest","getLoadTestFont","atob","offset","chunk1","s","chunk2","ctx","called","isFontReady","loadTestFontId","COMMENT_OFFSET","spliceString","CFF_CHECKSUM_OFFSET","XXXX_VALUE","checksum","int32","string32","btoa","names","loadedName","div","span","translatedData","cssFontInfo","css","weight","fontWeight","italicAngle","fontFamily","bytesToString","mimetype","getPathGenerator","character","cmds","jsBuf","args","current","NodeCanvasFactory","NodeCMapReaderFactory","NodeStandardFontDataFactory","fs","__non_webpack_require__","Canvas","getValue","defaultValue","setValue","modified","_setModified","getAll","objectFromMap","_storage","_modified","onSetModified","onResetModified","MIN_FONT_SIZE","MAX_FONT_SIZE","MAX_GROUP_SIZE","EXECUTION_TIME","EXECUTION_STEPS","COMPILE_TYPE3_GLYPHS","MAX_SIZE_TO_COMPILE","FULL_CHUNK_HEIGHT","LINEWIDTH_SCALE_FACTOR","_removeMirroring","translate","setTransform","resetTransform","bezierCurveTo","beginPath","__originalSave","__originalRestore","__originalRotate","__originalScale","__originalTranslate","__originalTransform","__originalSetTransform","__originalResetTransform","__originalClip","__originalMoveTo","__originalLineTo","__originalBezierCurveTo","__originalRect","__originalClosePath","__originalBeginPath","destCtx","y","f","angle","mozCurrentTransform","set","_getLineWidth","_transformMatrix","ad_bc","bc_ad","old","_originalSave","prev","pop","_originalRestore","x","_originalResetTransform","cosValue","sinValue","getCanvas","canvasEntry","addContextCurrentTransform","cache","POINT_TO_PROCESS_LIMIT","POINT_TYPES","imgData","width1","j0","points","lineSize","data0","elem","mask","count","sum","steps","outlines","coords","p0","step","pp","drawOutline","k","kk","o","l","ll","setCurrentPoint","updatePathMinMax","updateCurvePathMinMax","box","getPathBoundingBox","pathType","PathType","minX","minY","maxX","maxY","xStrokePad","lineWidth","yStrokePad","updateClipFromPath","startNewPathAndClipBox","Infinity","getClippedPathBoundingBox","transferMaps","ImageData","partialChunkHeight","fullChunks","totalChunks","chunkImgData","srcPos","destPos","dest","elemsInThisChunk","transferMapGray","transferMapRed","transferMapGreen","transferMapBlue","srcLength","dest32","dest32DataLength","fullSrcDiff","white","black","thisChunkHeight","srcDiff","kEnd","kEndUnrolled","srcByte","hasTransferMaps","kind","properties","property","sourceCtx","getLineDash","lineDashOffset","alpha","r0","g0","b0","alpha_","maskData","transferMap","layerData","hasBackdrop","backdrop","composeFn","subtype","composeSMaskLuminosity","composeSMaskAlpha","PIXELS_TO_PROCESS","chunkSize","row","chunkHeight","maskCtx","layerOffsetX","layerOffsetY","layerCtx","composeSMaskBackdrop","layerBox","layerWidth","layerHeight","genericComposeSMask","actualScale","PDF_TO_CSS_UNITS","interpolate","LINE_CAP_STYLES","LINE_JOIN_STYLES","NORMAL_CLIP","EO_CLIP","canvasCtx","beginDrawing","transparentCanvas","resetCtxToDefault","beginLayout","executeOperatorList","executionStartIdx","argsArrayLen","chunkOperations","endTime","fnId","nextBreakPoint","continueCallback","objsPool","depObjId","compositeCtx","endLayout","_scaleImage","img","widthScale","heightScale","paintWidth","paintHeight","tmpCanvasId","tmpCtx","newWidth","newHeight","tmpCanvas","_createMaskCanvas","fillColor","isPatternFill","patternFill","maskCanvas","putBinaryImageMask","objToCanvas","maskToCanvas","cord1","cord2","drawnWidth","drawnHeight","fillCanvas","fillCtx","scaled","mozCurrentTransformInverse","getImageSmoothingEnabled","inverse","limit","dashArray","dashPhase","states","state","checkSMaskState","inSMaskMode","suspendedCtx","beginSMaskMode","activeSMask","endSMaskMode","cacheId","groupLevel","scratchCanvas","copyCtxState","mirrorContextOperations","compose","dirtyBox","composeSMask","startY","ops","xw","yh","startX","consumePath","strokeColor","strokeAlpha","contentVisible","getPattern","getSinglePixelWidth","_combinedScaleFactor","fillAlpha","needRestore","pendingEOFill","paths","pendingTextPaths","path","fontSize","spacing","leading","fontObj","fontRefName","isType3Font","bold","italic","typeface","fallbackName","browserFontSize","mode","rise","paintChar","textRenderingMode","fontSizeScale","fillStrokeMode","isAddToPathSet","addToPath","patternTransform","isFontSubpixelAAEnabled","glyphs","charSpacing","wordSpacing","fontDirection","textHScale","glyphsLength","vertical","spacingDir","defaultVMetrics","widthAdvanceScale","simpleFillText","textMatrix","textRise","pattern","resetLineWidthToOne","textMatrixScale","glyph","isNum","restoreNeeded","fontChar","accent","scaledY","vmetric","vx","vy","scaledX","measuredWidth","characterScaleX","scaledAccentX","scaledAccentY","charWidth","showType3Text","fontMatrix","isTextInvisible","spacingLength","operatorListId","transformed","urx","llx","ury","lly","getColorN_Pattern","IR","color","baseTransform","canvasGraphicsFactory","createCanvasGraphics","_getPattern","matrix","getShadingPattern","SHADING","inv","bl","br","ul","ur","bbox","currentCtx","group","isolated","knockout","currentTransform","canvasBounds","scaleX","scaleY","groupCtx","startTransformInverse","currentMtx","hasOwnCanvas","viewportScale","canvasWidth","canvasHeight","annotationCanvas","savedCtx","processingType3","compileType3Glyph","compiled","skewX","skewY","positions","trans","images","image","map","w","h","imgToPaint","HTMLElement","putBinaryImageData","position","left","top","entry","visible","tag","isContentVisible","pendingClip","clipBox","absDet","sqNorm1","sqNorm2","pixelHeight","EPSILON","_cachedGetSinglePixelWidth","getCanvasPosition","CanvasGraphics","op","region","Path2D","BaseShadingPattern","_createGradient","grad","_r1","_colorStops","colorStop","ownerBBox","owner","applyBoundingBox","_bbox","domMatrix","colors","rowSize","tmp","c1","c2","c3","c1r","c1g","c1b","c2r","c2g","c2b","c3r","c3g","c3b","cab","cbb","xa","car","cag","xb","cbr","cbg","x1_","x2_","ps","figure","cs","verticesPerRow","rows","cols","q","drawTriangle","_createMeshCanvas","EXPECTED_SCALE","MAX_PATTERN_SIZE","BORDER_SIZE","boundsWidth","boundsHeight","combinedScale","_coords","_colors","paddedWidth","paddedHeight","cachedCanvases","backgroundColor","_figures","drawFigure","matrixScale","temporaryPatternCanvas","_background","DummyShadingPattern","PaintType","COLORED","UNCOLORED","createPatternCanvas","xstep","ystep","paintType","tilingType","curMatrixScale","dimx","dimy","graphics","adjustedX0","adjustedY0","adjustedX1","adjustedY1","getSizeAndScale","maxSize","TilingPattern","realOutputSize","clipBbox","bboxWidth","bboxHeight","setFillAndStrokeStyleToContext","fillStyle","strokeStyle","cssColor","CallbackKind","DATA","ERROR","StreamKind","CANCEL","CANCEL_COMPLETE","CLOSE","ENQUEUE","PULL","PULL_COMPLETE","START_COMPLETE","sourceName","targetName","comObj","stream","callbackId","wrapReason","action","cbSourceName","cbTargetName","streamId","_onComObjOnMessage","on","ah","actionHandler","actionName","handler","send","sendWithPromise","sendWithStream","controller","startCapability","startCall","pullCall","cancelCall","isClosed","desiredSize","pull","pullCapability","cancelCapability","queueingStrategy","_createStreamSink","self","streamSink","enqueue","isCancelled","lastDesiredSize","sinkCapability","onPull","onCancel","ready","success","_processStreamMessage","streamController","_deleteStreamController","metadataMap","parsedData","rawData","getRaw","creator","order","groups","_groups","off","_evaluateVisibilityExpression","array","operator","element","isVisible","expression","policy","ids","setVisibility","getOrder","_order","getGroups","getGroup","_onProgressiveDone","_onReceiveData","_fullRequestReader","found","_progressiveDataLength","_onProgress","firstReader","onProgress","_removeRangeReader","queuedChunks","_queuedChunks","_progressiveDone","_contentDispositionFilename","getRangeReader","cancelAllRequests","isPdfFile","_enqueue","_done","requestCapability","headersReady","_headersReady","_filename","_isRangeSupported","_isStreamingSupported","_contentLength","read","_requests","requestsCapability","_queuedChunk","output","node","children","walk","child","shouldBuildText","DEFAULT_TAB_INDEX","GetElementsByNameSet","parameters","annotationType","fieldType","radioButton","checkBox","isRenderable","ignoreBorder","createQuadrilaterals","layer","linkService","downloadManager","imageResourcesPath","renderForms","svgFactory","enableScripting","fieldObjects","mouseState","_createContainer","container","horizontalRadius","horizontalCornerRadius","verticalRadius","verticalCornerRadius","radius","borderColor","_createQuadrilaterals","quadPoints","quadrilaterals","savedRect","quadPoint","_createPopup","trigger","popupElement","titleObj","modificationDate","contentsObj","richText","hideWrapper","popup","_renderQuadrilaterals","quadrilateral","className","_getElementsByName","skipId","fields","_fieldObjects","fieldObj","exportValues","exportValue","domElement","platform","isWin","isMac","isTooltipOnly","resetForm","addLinkAttributes","newWindow","hasClickAction","linkElement","index","cloneNode","_bindLink","destination","_bindNamedAction","_bindJSAction","actions","jsName","detail","onclick","_bindResetFormAction","otherClickAction","resetFormFields","refs","resetFormRefs","include","allFields","fieldIds","field","storage","allIds","valueAsString","toLowerCase","JSON","hasPopup","alternativeText","_getKeyModifier","AnnotationElement","ctrlKey","metaKey","_setEventListener","baseName","eventName","valueGetter","shiftKey","modifier","checked","_setEventListeners","getter","_setBackgroundColor","_dispatchEventFromSandbox","setColor","ColorConverters","commonActions","display","hidden","print","focus","preventScroll","userName","readonly","required","bgColor","fgColor","textColor","jsEvent","hasAppearance","fieldValue","setPropertyOnSiblings","storedData","elementData","userValue","formattedValue","beforeInputSelectionRange","beforeInputValue","multiLine","readOnly","fieldName","blurListener","activeElement","selRange","selStart","selEnd","commitKey","willCommit","selectionStart","selectionEnd","_blurListener","isDown","Keystroke","change","maxLen","comb","fieldWidth","combWidth","_setTextStyle","TEXT_ALIGNMENT","fontColor","defaultAppearanceData","textAlignment","curChecked","checkbox","buttonValue","radio","defaultFieldValue","pdfButtonValue","fontSizeStyle","selectElement","combo","multiSelect","option","optionElement","displayValue","isExport","multiple","getItems","multipleSelection","selected","insert","indices","editable","changeEx","keyDown","IGNORE_TYPES","parentType","selector","parentId","parentElements","popupLeft","popupTop","BACKGROUND_ENLIGHT","title","dir","dateObject","PDFDateString","toLocaleDateString","toLocaleTimeString","XfaLayer","xfaHtml","html","contents","_formatContents","lines","line","_toggle","pinned","_show","pin","_hide","unpin","borderWidth","square","circle","containerClassName","vertices","coordinate","polyline","svgElementName","inkLists","content","file","getFilenameFromUrl","stringToPDFString","_download","sortedAnnotations","popupAnnotations","AnnotationElementFactory","rendered","renderedElement","PopupAnnotationElement","setAnnotationCanvasMap","update","ownMatrix","elements","ownTransform","firstChild","CMYK_G","G_CMYK","G_RGB","G_HTML","G","makeColorComp","RGB_G","RGB_HTML","R","B","T_HTML","CMYK_RGB","CMYK_HTML","components","RGB_CMYK","setupStorage","xfaOn","xfaOff","setAttributes","attributes","isHTMLAnchorElement","HTMLAnchorElement","dataId","rootHtml","stack","rootDiv","textDivs","parent","childHtml","xmlns","el","MAX_TEXT_DIVS_TO_RENDER","DEFAULT_FONT_SIZE","DEFAULT_FONT_ASCENT","ascentCache","AllWhitespaceRegexp","cachedAscent","metrics","ascent","fontBoundingBoxAscent","descent","fontBoundingBoxDescent","ratio","pixels","textDiv","textDivProperties","hasText","geom","hasEOL","originalTransform","paddingBottom","paddingLeft","paddingRight","paddingTop","tx","fontName","fontHeight","fontAscent","getAscent","_fontInspectorEnabled","shouldScaleText","absScaleX","absScaleY","_textContentStream","angleCos","angleSin","divWidth","divHeight","right","bottom","_canceled","_textDivs","_capability","textDivsLength","ts","_bounds","_viewport","expanded","expandBounds","divProperties","e","jj","boxScale","findPositiveMin","boxes","x1New","x2New","expandBoundsLTR","fakeBoundary","horizon","boundary","affectedBoundary","maxXNew","horizonPart","xNew","changedHorizon","lastBoundary","useBoundary","used","textContentStream","textContentItemsStr","enhanceTextSelection","_enhanceTextSelection","_layoutTextCtx","_reader","_renderTimer","_processItems","len","_container","parentNode","appendText","_layoutText","_layoutTextLastFontFamily","_render","timeout","styleCache","_textContent","textItems","textStyles","expandTextDivs","expandDivs","_renderingDone","expand","transformBuf","paddingBuf","divProps","renderParameters","SVGGraphics","SVG_DEFAULTS","fontStyle","XML_NS","XLINK_NS","convertImgDataToPng","PNG_HEADER","CHUNK_WRAPPER_SIZE","crcTable","crc","body","crc32","deflateSyncUncompressed","literals","maxBlockLength","deflateBlocks","idat","pi","adler","adler32","colorType","bitDepth","offsetLiterals","offsetBytes","isMask","ihdr","deflateSync","pngLength","writePngChunk","createObjectURL","encode","opTree","opListElement","fn","pf","clipCount","maskCount","shadingCount","SVGExtraState","transformMatrix","loadDependencies","dependencies","getSVG","svgElement","convertOpList","operatorIdMapping","_operatorIdMapping","opList","opListToTree","executeOpTree","opTreeElement","tspan","lineWidthScale","pm","txtElement","addFontStyle","cssStyle","hasChildNodes","setStrokeAlpha","setFillAlpha","_makeColorN_Pattern","_makeTilingPattern","tilingId","txstep","xscale","tystep","yscale","tiling","tx1","tx0","ty1","ty0","_makeShadingPattern","shadingId","colorStops","gradient","point0","point1","focalPoint","circlePoint","focalRadius","circleRadius","stop","clipId","clipPath","clipElement","activeClipUrl","extraStack","_setStrokeAttributes","miterLimit","lineCap","lineJoin","imgSrc","cliprect","imgEl","maskId","definitions","rootGroup","_ensureClipGroup","clipGroup","_ensureTransformGroup","tgrp","http","https","fileUriRegex","parsedUrl","sourceUrl","host","parseUrl","_rangeChunkSize","_disableRange","_storedError","_loaded","_readableStream","_error","_setReadableStream","auth","hostname","method","headers","handleResponse","_url","getResponseHeader","allowRangeRequests","suggestedLength","isHttp","extractFilenameFromHeader","createRequestOptions","stat","returnValues","contentEncoding","contentDisposition","getFilenameFromContentDispositionHeader","needsEncodingFixup","toParamRegExp","rfc2616unquote","rfc5987decode","rfc2047decode","fixupEncoding","rfc2231getparam","flags","decoder","fatal","encoding","textdecode","iter","contentDispositionStr","parts","part","quotindex","encodingend","extvalue","langvalue","OK_RESPONSE","PARTIAL_CONTENT_RESPONSE","xhr","requestRange","listeners","prop","requestFull","getXhr","xhrId","currXhrId","pendingRequest","onError","onHeadersReceived","onDone","onStateChange","pendingRequests","xhrStatus","ok_response_on_range_request","expectedStatus","getArrayBuffer","rangeHeader","getRequestXhr","isPendingRequest","abortRequest","_onRangeRequestReaderClosed","_manager","_source","manager","_onHeadersReceived","fullRequestXhrId","_fullRequestId","fullRequestXhr","_onDone","_onError","createResponseStatusError","_close","_requestId","signal","abortController","credentials","redirect","Headers","AbortController","createHeaders","createFetchOptions","validateResponseStatus","_abortController","__webpack_modules__","pdfjsVersion","pdfjsBuild","PDFNodeStream","require","setPDFNetworkStreamFactory","PDFNetworkStream","PDFFetchStream"],"sources":["webpack://pdfjs-dist/build/pdf/webpack/universalModuleDefinition","webpack://pdfjs-dist/build/pdf/src/display/display_utils.js","webpack://pdfjs-dist/build/pdf/src/shared/util.js","webpack://pdfjs-dist/build/pdf/src/shared/compatibility.js","webpack://pdfjs-dist/build/pdf/src/shared/is_node.js","webpack://pdfjs-dist/build/pdf/src/display/base_factory.js","webpack://pdfjs-dist/build/pdf/src/display/api.js","webpack://pdfjs-dist/build/pdf/src/display/font_loader.js","webpack://pdfjs-dist/build/pdf/src/display/node_utils.js","webpack://pdfjs-dist/build/pdf/src/display/annotation_storage.js","webpack://pdfjs-dist/build/pdf/src/display/canvas.js","webpack://pdfjs-dist/build/pdf/src/display/pattern_helper.js","webpack://pdfjs-dist/build/pdf/src/display/worker_options.js","webpack://pdfjs-dist/build/pdf/src/shared/message_handler.js","webpack://pdfjs-dist/build/pdf/src/display/metadata.js","webpack://pdfjs-dist/build/pdf/src/display/optional_content_config.js","webpack://pdfjs-dist/build/pdf/src/display/transport_stream.js","webpack://pdfjs-dist/build/pdf/src/display/xfa_text.js","webpack://pdfjs-dist/build/pdf/src/display/annotation_layer.js","webpack://pdfjs-dist/build/pdf/src/shared/scripting_utils.js","webpack://pdfjs-dist/build/pdf/src/display/xfa_layer.js","webpack://pdfjs-dist/build/pdf/src/display/text_layer.js","webpack://pdfjs-dist/build/pdf/src/display/svg.js","webpack://pdfjs-dist/build/pdf/src/display/node_stream.js","webpack://pdfjs-dist/build/pdf/src/display/network_utils.js","webpack://pdfjs-dist/build/pdf/src/display/content_disposition.js","webpack://pdfjs-dist/build/pdf/src/display/network.js","webpack://pdfjs-dist/build/pdf/src/display/fetch_stream.js","webpack://pdfjs-dist/build/pdf/webpack/bootstrap","webpack://pdfjs-dist/build/pdf/src/pdf.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"pdfjs-dist/build/pdf\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"pdfjs-dist/build/pdf\"] = factory();\n\telse\n\t\troot[\"pdfjs-dist/build/pdf\"] = factory();\n})(this, function() {\nreturn ","/* Copyright 2015 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  assert,\n  BaseException,\n  isString,\n  removeNullCharacters,\n  shadow,\n  stringToBytes,\n  Util,\n  warn,\n} from \"../shared/util.js\";\nimport {\n  BaseCanvasFactory,\n  BaseCMapReaderFactory,\n  BaseStandardFontDataFactory,\n  BaseSVGFactory,\n} from \"./base_factory.js\";\n\nconst DEFAULT_LINK_REL = \"noopener noreferrer nofollow\";\nconst SVG_NS = \"http://www.w3.org/2000/svg\";\n\nconst PixelsPerInch = {\n  CSS: 96.0,\n  PDF: 72.0,\n\n  /** @type {number} */\n  get PDF_TO_CSS_UNITS() {\n    return shadow(this, \"PDF_TO_CSS_UNITS\", this.CSS / this.PDF);\n  },\n};\n\nclass DOMCanvasFactory extends BaseCanvasFactory {\n  constructor({ ownerDocument = globalThis.document } = {}) {\n    super();\n    this._document = ownerDocument;\n  }\n\n  _createCanvas(width, height) {\n    const canvas = this._document.createElement(\"canvas\");\n    canvas.width = width;\n    canvas.height = height;\n    return canvas;\n  }\n}\n\nasync function fetchData(url, asTypedArray = false) {\n  if (\n    (typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"MOZCENTRAL\")) ||\n    isValidFetchUrl(url, document.baseURI)\n  ) {\n    const response = await fetch(url);\n    if (!response.ok) {\n      throw new Error(response.statusText);\n    }\n    return asTypedArray\n      ? new Uint8Array(await response.arrayBuffer())\n      : stringToBytes(await response.text());\n  }\n\n  // The Fetch API is not supported.\n  return new Promise((resolve, reject) => {\n    const request = new XMLHttpRequest();\n    request.open(\"GET\", url, /* asTypedArray = */ true);\n\n    if (asTypedArray) {\n      request.responseType = \"arraybuffer\";\n    }\n    request.onreadystatechange = () => {\n      if (request.readyState !== XMLHttpRequest.DONE) {\n        return;\n      }\n      if (request.status === 200 || request.status === 0) {\n        let data;\n        if (asTypedArray && request.response) {\n          data = new Uint8Array(request.response);\n        } else if (!asTypedArray && request.responseText) {\n          data = stringToBytes(request.responseText);\n        }\n        if (data) {\n          resolve(data);\n          return;\n        }\n      }\n      reject(new Error(request.statusText));\n    };\n\n    request.send(null);\n  });\n}\n\nclass DOMCMapReaderFactory extends BaseCMapReaderFactory {\n  _fetchData(url, compressionType) {\n    return fetchData(url, /* asTypedArray = */ this.isCompressed).then(data => {\n      return { cMapData: data, compressionType };\n    });\n  }\n}\n\nclass DOMStandardFontDataFactory extends BaseStandardFontDataFactory {\n  _fetchData(url) {\n    return fetchData(url, /* asTypedArray = */ true);\n  }\n}\n\nclass DOMSVGFactory extends BaseSVGFactory {\n  _createSVG(type) {\n    return document.createElementNS(SVG_NS, type);\n  }\n}\n\n/**\n * @typedef {Object} PageViewportParameters\n * @property {Array<number>} viewBox - The xMin, yMin, xMax and\n *   yMax coordinates.\n * @property {number} scale - The scale of the viewport.\n * @property {number} rotation - The rotation, in degrees, of the viewport.\n * @property {number} [offsetX] - The horizontal, i.e. x-axis, offset. The\n *   default value is `0`.\n * @property {number} [offsetY] - The vertical, i.e. y-axis, offset. The\n *   default value is `0`.\n * @property {boolean} [dontFlip] - If true, the y-axis will not be flipped.\n *   The default value is `false`.\n */\n\n/**\n * @typedef {Object} PageViewportCloneParameters\n * @property {number} [scale] - The scale, overriding the one in the cloned\n *   viewport. The default value is `this.scale`.\n * @property {number} [rotation] - The rotation, in degrees, overriding the one\n *   in the cloned viewport. The default value is `this.rotation`.\n * @property {number} [offsetX] - The horizontal, i.e. x-axis, offset.\n *   The default value is `this.offsetX`.\n * @property {number} [offsetY] - The vertical, i.e. y-axis, offset.\n *   The default value is `this.offsetY`.\n * @property {boolean} [dontFlip] - If true, the x-axis will not be flipped.\n *   The default value is `false`.\n */\n\n/**\n * PDF page viewport created based on scale, rotation and offset.\n */\nclass PageViewport {\n  /**\n   * @param {PageViewportParameters}\n   */\n  constructor({\n    viewBox,\n    scale,\n    rotation,\n    offsetX = 0,\n    offsetY = 0,\n    dontFlip = false,\n  }) {\n    this.viewBox = viewBox;\n    this.scale = scale;\n    this.rotation = rotation;\n    this.offsetX = offsetX;\n    this.offsetY = offsetY;\n\n    // creating transform to convert pdf coordinate system to the normal\n    // canvas like coordinates taking in account scale and rotation\n    const centerX = (viewBox[2] + viewBox[0]) / 2;\n    const centerY = (viewBox[3] + viewBox[1]) / 2;\n    let rotateA, rotateB, rotateC, rotateD;\n    // Normalize the rotation, by clamping it to the [0, 360) range.\n    rotation %= 360;\n    if (rotation < 0) {\n      rotation += 360;\n    }\n    switch (rotation) {\n      case 180:\n        rotateA = -1;\n        rotateB = 0;\n        rotateC = 0;\n        rotateD = 1;\n        break;\n      case 90:\n        rotateA = 0;\n        rotateB = 1;\n        rotateC = 1;\n        rotateD = 0;\n        break;\n      case 270:\n        rotateA = 0;\n        rotateB = -1;\n        rotateC = -1;\n        rotateD = 0;\n        break;\n      case 0:\n        rotateA = 1;\n        rotateB = 0;\n        rotateC = 0;\n        rotateD = -1;\n        break;\n      default:\n        throw new Error(\n          \"PageViewport: Invalid rotation, must be a multiple of 90 degrees.\"\n        );\n    }\n\n    if (dontFlip) {\n      rotateC = -rotateC;\n      rotateD = -rotateD;\n    }\n\n    let offsetCanvasX, offsetCanvasY;\n    let width, height;\n    if (rotateA === 0) {\n      offsetCanvasX = Math.abs(centerY - viewBox[1]) * scale + offsetX;\n      offsetCanvasY = Math.abs(centerX - viewBox[0]) * scale + offsetY;\n      width = Math.abs(viewBox[3] - viewBox[1]) * scale;\n      height = Math.abs(viewBox[2] - viewBox[0]) * scale;\n    } else {\n      offsetCanvasX = Math.abs(centerX - viewBox[0]) * scale + offsetX;\n      offsetCanvasY = Math.abs(centerY - viewBox[1]) * scale + offsetY;\n      width = Math.abs(viewBox[2] - viewBox[0]) * scale;\n      height = Math.abs(viewBox[3] - viewBox[1]) * scale;\n    }\n    // creating transform for the following operations:\n    // translate(-centerX, -centerY), rotate and flip vertically,\n    // scale, and translate(offsetCanvasX, offsetCanvasY)\n    this.transform = [\n      rotateA * scale,\n      rotateB * scale,\n      rotateC * scale,\n      rotateD * scale,\n      offsetCanvasX - rotateA * scale * centerX - rotateC * scale * centerY,\n      offsetCanvasY - rotateB * scale * centerX - rotateD * scale * centerY,\n    ];\n\n    this.width = width;\n    this.height = height;\n  }\n\n  /**\n   * Clones viewport, with optional additional properties.\n   * @param {PageViewportCloneParameters} [params]\n   * @returns {PageViewport} Cloned viewport.\n   */\n  clone({\n    scale = this.scale,\n    rotation = this.rotation,\n    offsetX = this.offsetX,\n    offsetY = this.offsetY,\n    dontFlip = false,\n  } = {}) {\n    return new PageViewport({\n      viewBox: this.viewBox.slice(),\n      scale,\n      rotation,\n      offsetX,\n      offsetY,\n      dontFlip,\n    });\n  }\n\n  /**\n   * Converts PDF point to the viewport coordinates. For examples, useful for\n   * converting PDF location into canvas pixel coordinates.\n   * @param {number} x - The x-coordinate.\n   * @param {number} y - The y-coordinate.\n   * @returns {Object} Object containing `x` and `y` properties of the\n   *   point in the viewport coordinate space.\n   * @see {@link convertToPdfPoint}\n   * @see {@link convertToViewportRectangle}\n   */\n  convertToViewportPoint(x, y) {\n    return Util.applyTransform([x, y], this.transform);\n  }\n\n  /**\n   * Converts PDF rectangle to the viewport coordinates.\n   * @param {Array} rect - The xMin, yMin, xMax and yMax coordinates.\n   * @returns {Array} Array containing corresponding coordinates of the\n   *   rectangle in the viewport coordinate space.\n   * @see {@link convertToViewportPoint}\n   */\n  convertToViewportRectangle(rect) {\n    const topLeft = Util.applyTransform([rect[0], rect[1]], this.transform);\n    const bottomRight = Util.applyTransform([rect[2], rect[3]], this.transform);\n    return [topLeft[0], topLeft[1], bottomRight[0], bottomRight[1]];\n  }\n\n  /**\n   * Converts viewport coordinates to the PDF location. For examples, useful\n   * for converting canvas pixel location into PDF one.\n   * @param {number} x - The x-coordinate.\n   * @param {number} y - The y-coordinate.\n   * @returns {Object} Object containing `x` and `y` properties of the\n   *   point in the PDF coordinate space.\n   * @see {@link convertToViewportPoint}\n   */\n  convertToPdfPoint(x, y) {\n    return Util.applyInverseTransform([x, y], this.transform);\n  }\n}\n\nclass RenderingCancelledException extends BaseException {\n  constructor(msg, type) {\n    super(msg, \"RenderingCancelledException\");\n    this.type = type;\n  }\n}\n\nconst LinkTarget = {\n  NONE: 0, // Default value.\n  SELF: 1,\n  BLANK: 2,\n  PARENT: 3,\n  TOP: 4,\n};\n\n/**\n * @typedef ExternalLinkParameters\n * @typedef {Object} ExternalLinkParameters\n * @property {string} url - An absolute URL.\n * @property {LinkTarget} [target] - The link target. The default value is\n *   `LinkTarget.NONE`.\n * @property {string} [rel] - The link relationship. The default value is\n *   `DEFAULT_LINK_REL`.\n * @property {boolean} [enabled] - Whether the link should be enabled. The\n *   default value is true.\n */\n\n/**\n * Adds various attributes (href, title, target, rel) to hyperlinks.\n * @param {HTMLAnchorElement} link - The link element.\n * @param {ExternalLinkParameters} params\n */\nfunction addLinkAttributes(link, { url, target, rel, enabled = true } = {}) {\n  assert(\n    url && typeof url === \"string\",\n    'addLinkAttributes: A valid \"url\" parameter must provided.'\n  );\n\n  const urlNullRemoved = removeNullCharacters(url);\n  if (enabled) {\n    link.href = link.title = urlNullRemoved;\n  } else {\n    link.href = \"\";\n    link.title = `Disabled: ${urlNullRemoved}`;\n    link.onclick = () => {\n      return false;\n    };\n  }\n\n  let targetStr = \"\"; // LinkTarget.NONE\n  switch (target) {\n    case LinkTarget.NONE:\n      break;\n    case LinkTarget.SELF:\n      targetStr = \"_self\";\n      break;\n    case LinkTarget.BLANK:\n      targetStr = \"_blank\";\n      break;\n    case LinkTarget.PARENT:\n      targetStr = \"_parent\";\n      break;\n    case LinkTarget.TOP:\n      targetStr = \"_top\";\n      break;\n  }\n  link.target = targetStr;\n\n  link.rel = typeof rel === \"string\" ? rel : DEFAULT_LINK_REL;\n}\n\nfunction isDataScheme(url) {\n  const ii = url.length;\n  let i = 0;\n  while (i < ii && url[i].trim() === \"\") {\n    i++;\n  }\n  return url.substring(i, i + 5).toLowerCase() === \"data:\";\n}\n\nfunction isPdfFile(filename) {\n  return typeof filename === \"string\" && /\\.pdf$/i.test(filename);\n}\n\n/**\n * Gets the filename from a given URL.\n * @param {string} url\n * @returns {string}\n */\nfunction getFilenameFromUrl(url) {\n  const anchor = url.indexOf(\"#\");\n  const query = url.indexOf(\"?\");\n  const end = Math.min(\n    anchor > 0 ? anchor : url.length,\n    query > 0 ? query : url.length\n  );\n  return url.substring(url.lastIndexOf(\"/\", end) + 1, end);\n}\n\n/**\n * Returns the filename or guessed filename from the url (see issue 3455).\n * @param {string} url - The original PDF location.\n * @param {string} defaultFilename - The value returned if the filename is\n *   unknown, or the protocol is unsupported.\n * @returns {string} Guessed PDF filename.\n */\nfunction getPdfFilenameFromUrl(url, defaultFilename = \"document.pdf\") {\n  if (typeof url !== \"string\") {\n    return defaultFilename;\n  }\n  if (isDataScheme(url)) {\n    warn('getPdfFilenameFromUrl: ignore \"data:\"-URL for performance reasons.');\n    return defaultFilename;\n  }\n  const reURI = /^(?:(?:[^:]+:)?\\/\\/[^/]+)?([^?#]*)(\\?[^#]*)?(#.*)?$/;\n  //              SCHEME        HOST        1.PATH  2.QUERY   3.REF\n  // Pattern to get last matching NAME.pdf\n  const reFilename = /[^/?#=]+\\.pdf\\b(?!.*\\.pdf\\b)/i;\n  const splitURI = reURI.exec(url);\n  let suggestedFilename =\n    reFilename.exec(splitURI[1]) ||\n    reFilename.exec(splitURI[2]) ||\n    reFilename.exec(splitURI[3]);\n  if (suggestedFilename) {\n    suggestedFilename = suggestedFilename[0];\n    if (suggestedFilename.includes(\"%\")) {\n      // URL-encoded %2Fpath%2Fto%2Ffile.pdf should be file.pdf\n      try {\n        suggestedFilename = reFilename.exec(\n          decodeURIComponent(suggestedFilename)\n        )[0];\n      } catch (ex) {\n        // Possible (extremely rare) errors:\n        // URIError \"Malformed URI\", e.g. for \"%AA.pdf\"\n        // TypeError \"null has no properties\", e.g. for \"%2F.pdf\"\n      }\n    }\n  }\n  return suggestedFilename || defaultFilename;\n}\n\nclass StatTimer {\n  constructor() {\n    this.started = Object.create(null);\n    this.times = [];\n  }\n\n  time(name) {\n    if (name in this.started) {\n      warn(`Timer is already running for ${name}`);\n    }\n    this.started[name] = Date.now();\n  }\n\n  timeEnd(name) {\n    if (!(name in this.started)) {\n      warn(`Timer has not been started for ${name}`);\n    }\n    this.times.push({\n      name,\n      start: this.started[name],\n      end: Date.now(),\n    });\n    // Remove timer from started so it can be called again.\n    delete this.started[name];\n  }\n\n  toString() {\n    // Find the longest name for padding purposes.\n    const outBuf = [];\n    let longest = 0;\n    for (const time of this.times) {\n      const name = time.name;\n      if (name.length > longest) {\n        longest = name.length;\n      }\n    }\n    for (const time of this.times) {\n      const duration = time.end - time.start;\n      outBuf.push(`${time.name.padEnd(longest)} ${duration}ms\\n`);\n    }\n    return outBuf.join(\"\");\n  }\n}\n\nfunction isValidFetchUrl(url, baseUrl) {\n  try {\n    const { protocol } = baseUrl ? new URL(url, baseUrl) : new URL(url);\n    // The Fetch API only supports the http/https protocols, and not file/ftp.\n    return protocol === \"http:\" || protocol === \"https:\";\n  } catch (ex) {\n    return false; // `new URL()` will throw on incorrect data.\n  }\n}\n\n/**\n * @param {string} src\n * @param {boolean} [removeScriptElement]\n * @returns {Promise<void>}\n */\nfunction loadScript(src, removeScriptElement = false) {\n  return new Promise((resolve, reject) => {\n    const script = document.createElement(\"script\");\n    script.src = src;\n\n    script.onload = function (evt) {\n      if (removeScriptElement) {\n        script.remove();\n      }\n      resolve(evt);\n    };\n    script.onerror = function () {\n      reject(new Error(`Cannot load script at: ${script.src}`));\n    };\n    (document.head || document.documentElement).appendChild(script);\n  });\n}\n\n// Deprecated API function -- display regardless of the `verbosity` setting.\nfunction deprecated(details) {\n  console.log(\"Deprecated API usage: \" + details);\n}\n\nlet pdfDateStringRegex;\n\nclass PDFDateString {\n  /**\n   * Convert a PDF date string to a JavaScript `Date` object.\n   *\n   * The PDF date string format is described in section 7.9.4 of the official\n   * PDF 32000-1:2008 specification. However, in the PDF 1.7 reference (sixth\n   * edition) Adobe describes the same format including a trailing apostrophe.\n   * This syntax in incorrect, but Adobe Acrobat creates PDF files that contain\n   * them. We ignore all apostrophes as they are not necessary for date parsing.\n   *\n   * Moreover, Adobe Acrobat doesn't handle changing the date to universal time\n   * and doesn't use the user's time zone (effectively ignoring the HH' and mm'\n   * parts of the date string).\n   *\n   * @param {string} input\n   * @returns {Date|null}\n   */\n  static toDateObject(input) {\n    if (!input || !isString(input)) {\n      return null;\n    }\n\n    // Lazily initialize the regular expression.\n    if (!pdfDateStringRegex) {\n      pdfDateStringRegex = new RegExp(\n        \"^D:\" + // Prefix (required)\n          \"(\\\\d{4})\" + // Year (required)\n          \"(\\\\d{2})?\" + // Month (optional)\n          \"(\\\\d{2})?\" + // Day (optional)\n          \"(\\\\d{2})?\" + // Hour (optional)\n          \"(\\\\d{2})?\" + // Minute (optional)\n          \"(\\\\d{2})?\" + // Second (optional)\n          \"([Z|+|-])?\" + // Universal time relation (optional)\n          \"(\\\\d{2})?\" + // Offset hour (optional)\n          \"'?\" + // Splitting apostrophe (optional)\n          \"(\\\\d{2})?\" + // Offset minute (optional)\n          \"'?\" // Trailing apostrophe (optional)\n      );\n    }\n\n    // Optional fields that don't satisfy the requirements from the regular\n    // expression (such as incorrect digit counts or numbers that are out of\n    // range) will fall back the defaults from the specification.\n    const matches = pdfDateStringRegex.exec(input);\n    if (!matches) {\n      return null;\n    }\n\n    // JavaScript's `Date` object expects the month to be between 0 and 11\n    // instead of 1 and 12, so we have to correct for that.\n    const year = parseInt(matches[1], 10);\n    let month = parseInt(matches[2], 10);\n    month = month >= 1 && month <= 12 ? month - 1 : 0;\n    let day = parseInt(matches[3], 10);\n    day = day >= 1 && day <= 31 ? day : 1;\n    let hour = parseInt(matches[4], 10);\n    hour = hour >= 0 && hour <= 23 ? hour : 0;\n    let minute = parseInt(matches[5], 10);\n    minute = minute >= 0 && minute <= 59 ? minute : 0;\n    let second = parseInt(matches[6], 10);\n    second = second >= 0 && second <= 59 ? second : 0;\n    const universalTimeRelation = matches[7] || \"Z\";\n    let offsetHour = parseInt(matches[8], 10);\n    offsetHour = offsetHour >= 0 && offsetHour <= 23 ? offsetHour : 0;\n    let offsetMinute = parseInt(matches[9], 10) || 0;\n    offsetMinute = offsetMinute >= 0 && offsetMinute <= 59 ? offsetMinute : 0;\n\n    // Universal time relation 'Z' means that the local time is equal to the\n    // universal time, whereas the relations '+'/'-' indicate that the local\n    // time is later respectively earlier than the universal time. Every date\n    // is normalized to universal time.\n    if (universalTimeRelation === \"-\") {\n      hour += offsetHour;\n      minute += offsetMinute;\n    } else if (universalTimeRelation === \"+\") {\n      hour -= offsetHour;\n      minute -= offsetMinute;\n    }\n\n    return new Date(Date.UTC(year, month, day, hour, minute, second));\n  }\n}\n\n/**\n * NOTE: This is (mostly) intended to support printing of XFA forms.\n */\nfunction getXfaPageViewport(xfaPage, { scale = 1, rotation = 0 }) {\n  const { width, height } = xfaPage.attributes.style;\n  const viewBox = [0, 0, parseInt(width), parseInt(height)];\n\n  return new PageViewport({\n    viewBox,\n    scale,\n    rotation,\n  });\n}\n\nexport {\n  addLinkAttributes,\n  deprecated,\n  DOMCanvasFactory,\n  DOMCMapReaderFactory,\n  DOMStandardFontDataFactory,\n  DOMSVGFactory,\n  getFilenameFromUrl,\n  getPdfFilenameFromUrl,\n  getXfaPageViewport,\n  isDataScheme,\n  isPdfFile,\n  isValidFetchUrl,\n  LinkTarget,\n  loadScript,\n  PageViewport,\n  PDFDateString,\n  PixelsPerInch,\n  RenderingCancelledException,\n  StatTimer,\n};\n","/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport \"./compatibility.js\";\n\nconst IDENTITY_MATRIX = [1, 0, 0, 1, 0, 0];\nconst FONT_IDENTITY_MATRIX = [0.001, 0, 0, 0.001, 0, 0];\n\n/**\n * Refer to the `WorkerTransport.getRenderingIntent`-method in the API, to see\n * how these flags are being used:\n *  - ANY, DISPLAY, and PRINT are the normal rendering intents, note the\n *    `PDFPageProxy.{render, getOperatorList, getAnnotations}`-methods.\n *  - ANNOTATIONS_FORMS, ANNOTATIONS_STORAGE, ANNOTATIONS_DISABLE control which\n *    annotations are rendered onto the canvas (i.e. by being included in the\n *    operatorList), note the `PDFPageProxy.{render, getOperatorList}`-methods\n *    and their `annotationMode`-option.\n *  - OPLIST is used with the `PDFPageProxy.getOperatorList`-method, note the\n *    `OperatorList`-constructor (on the worker-thread).\n */\nconst RenderingIntentFlag = {\n  ANY: 0x01,\n  DISPLAY: 0x02,\n  PRINT: 0x04,\n  ANNOTATIONS_FORMS: 0x10,\n  ANNOTATIONS_STORAGE: 0x20,\n  ANNOTATIONS_DISABLE: 0x40,\n  OPLIST: 0x100,\n};\n\nconst AnnotationMode = {\n  DISABLE: 0,\n  ENABLE: 1,\n  ENABLE_FORMS: 2,\n  ENABLE_STORAGE: 3,\n};\n\n// Permission flags from Table 22, Section 7.6.3.2 of the PDF specification.\nconst PermissionFlag = {\n  PRINT: 0x04,\n  MODIFY_CONTENTS: 0x08,\n  COPY: 0x10,\n  MODIFY_ANNOTATIONS: 0x20,\n  FILL_INTERACTIVE_FORMS: 0x100,\n  COPY_FOR_ACCESSIBILITY: 0x200,\n  ASSEMBLE: 0x400,\n  PRINT_HIGH_QUALITY: 0x800,\n};\n\nconst TextRenderingMode = {\n  FILL: 0,\n  STROKE: 1,\n  FILL_STROKE: 2,\n  INVISIBLE: 3,\n  FILL_ADD_TO_PATH: 4,\n  STROKE_ADD_TO_PATH: 5,\n  FILL_STROKE_ADD_TO_PATH: 6,\n  ADD_TO_PATH: 7,\n  FILL_STROKE_MASK: 3,\n  ADD_TO_PATH_FLAG: 4,\n};\n\nconst ImageKind = {\n  GRAYSCALE_1BPP: 1,\n  RGB_24BPP: 2,\n  RGBA_32BPP: 3,\n};\n\nconst AnnotationType = {\n  TEXT: 1,\n  LINK: 2,\n  FREETEXT: 3,\n  LINE: 4,\n  SQUARE: 5,\n  CIRCLE: 6,\n  POLYGON: 7,\n  POLYLINE: 8,\n  HIGHLIGHT: 9,\n  UNDERLINE: 10,\n  SQUIGGLY: 11,\n  STRIKEOUT: 12,\n  STAMP: 13,\n  CARET: 14,\n  INK: 15,\n  POPUP: 16,\n  FILEATTACHMENT: 17,\n  SOUND: 18,\n  MOVIE: 19,\n  WIDGET: 20,\n  SCREEN: 21,\n  PRINTERMARK: 22,\n  TRAPNET: 23,\n  WATERMARK: 24,\n  THREED: 25,\n  REDACT: 26,\n};\n\nconst AnnotationStateModelType = {\n  MARKED: \"Marked\",\n  REVIEW: \"Review\",\n};\n\nconst AnnotationMarkedState = {\n  MARKED: \"Marked\",\n  UNMARKED: \"Unmarked\",\n};\n\nconst AnnotationReviewState = {\n  ACCEPTED: \"Accepted\",\n  REJECTED: \"Rejected\",\n  CANCELLED: \"Cancelled\",\n  COMPLETED: \"Completed\",\n  NONE: \"None\",\n};\n\nconst AnnotationReplyType = {\n  GROUP: \"Group\",\n  REPLY: \"R\",\n};\n\nconst AnnotationFlag = {\n  INVISIBLE: 0x01,\n  HIDDEN: 0x02,\n  PRINT: 0x04,\n  NOZOOM: 0x08,\n  NOROTATE: 0x10,\n  NOVIEW: 0x20,\n  READONLY: 0x40,\n  LOCKED: 0x80,\n  TOGGLENOVIEW: 0x100,\n  LOCKEDCONTENTS: 0x200,\n};\n\nconst AnnotationFieldFlag = {\n  READONLY: 0x0000001,\n  REQUIRED: 0x0000002,\n  NOEXPORT: 0x0000004,\n  MULTILINE: 0x0001000,\n  PASSWORD: 0x0002000,\n  NOTOGGLETOOFF: 0x0004000,\n  RADIO: 0x0008000,\n  PUSHBUTTON: 0x0010000,\n  COMBO: 0x0020000,\n  EDIT: 0x0040000,\n  SORT: 0x0080000,\n  FILESELECT: 0x0100000,\n  MULTISELECT: 0x0200000,\n  DONOTSPELLCHECK: 0x0400000,\n  DONOTSCROLL: 0x0800000,\n  COMB: 0x1000000,\n  RICHTEXT: 0x2000000,\n  RADIOSINUNISON: 0x2000000,\n  COMMITONSELCHANGE: 0x4000000,\n};\n\nconst AnnotationBorderStyleType = {\n  SOLID: 1,\n  DASHED: 2,\n  BEVELED: 3,\n  INSET: 4,\n  UNDERLINE: 5,\n};\n\nconst AnnotationActionEventType = {\n  E: \"Mouse Enter\",\n  X: \"Mouse Exit\",\n  D: \"Mouse Down\",\n  U: \"Mouse Up\",\n  Fo: \"Focus\",\n  Bl: \"Blur\",\n  PO: \"PageOpen\",\n  PC: \"PageClose\",\n  PV: \"PageVisible\",\n  PI: \"PageInvisible\",\n  K: \"Keystroke\",\n  F: \"Format\",\n  V: \"Validate\",\n  C: \"Calculate\",\n};\n\nconst DocumentActionEventType = {\n  WC: \"WillClose\",\n  WS: \"WillSave\",\n  DS: \"DidSave\",\n  WP: \"WillPrint\",\n  DP: \"DidPrint\",\n};\n\nconst PageActionEventType = {\n  O: \"PageOpen\",\n  C: \"PageClose\",\n};\n\nconst StreamType = {\n  UNKNOWN: \"UNKNOWN\",\n  FLATE: \"FLATE\",\n  LZW: \"LZW\",\n  DCT: \"DCT\",\n  JPX: \"JPX\",\n  JBIG: \"JBIG\",\n  A85: \"A85\",\n  AHX: \"AHX\",\n  CCF: \"CCF\",\n  RLX: \"RLX\", // PDF short name is 'RL', but telemetry requires three chars.\n};\n\nconst FontType = {\n  UNKNOWN: \"UNKNOWN\",\n  TYPE1: \"TYPE1\",\n  TYPE1STANDARD: \"TYPE1STANDARD\",\n  TYPE1C: \"TYPE1C\",\n  CIDFONTTYPE0: \"CIDFONTTYPE0\",\n  CIDFONTTYPE0C: \"CIDFONTTYPE0C\",\n  TRUETYPE: \"TRUETYPE\",\n  CIDFONTTYPE2: \"CIDFONTTYPE2\",\n  TYPE3: \"TYPE3\",\n  OPENTYPE: \"OPENTYPE\",\n  TYPE0: \"TYPE0\",\n  MMTYPE1: \"MMTYPE1\",\n};\n\nconst VerbosityLevel = {\n  ERRORS: 0,\n  WARNINGS: 1,\n  INFOS: 5,\n};\n\nconst CMapCompressionType = {\n  NONE: 0,\n  BINARY: 1,\n  STREAM: 2,\n};\n\n// All the possible operations for an operator list.\nconst OPS = {\n  // Intentionally start from 1 so it is easy to spot bad operators that will be\n  // 0's.\n  dependency: 1,\n  setLineWidth: 2,\n  setLineCap: 3,\n  setLineJoin: 4,\n  setMiterLimit: 5,\n  setDash: 6,\n  setRenderingIntent: 7,\n  setFlatness: 8,\n  setGState: 9,\n  save: 10,\n  restore: 11,\n  transform: 12,\n  moveTo: 13,\n  lineTo: 14,\n  curveTo: 15,\n  curveTo2: 16,\n  curveTo3: 17,\n  closePath: 18,\n  rectangle: 19,\n  stroke: 20,\n  closeStroke: 21,\n  fill: 22,\n  eoFill: 23,\n  fillStroke: 24,\n  eoFillStroke: 25,\n  closeFillStroke: 26,\n  closeEOFillStroke: 27,\n  endPath: 28,\n  clip: 29,\n  eoClip: 30,\n  beginText: 31,\n  endText: 32,\n  setCharSpacing: 33,\n  setWordSpacing: 34,\n  setHScale: 35,\n  setLeading: 36,\n  setFont: 37,\n  setTextRenderingMode: 38,\n  setTextRise: 39,\n  moveText: 40,\n  setLeadingMoveText: 41,\n  setTextMatrix: 42,\n  nextLine: 43,\n  showText: 44,\n  showSpacedText: 45,\n  nextLineShowText: 46,\n  nextLineSetSpacingShowText: 47,\n  setCharWidth: 48,\n  setCharWidthAndBounds: 49,\n  setStrokeColorSpace: 50,\n  setFillColorSpace: 51,\n  setStrokeColor: 52,\n  setStrokeColorN: 53,\n  setFillColor: 54,\n  setFillColorN: 55,\n  setStrokeGray: 56,\n  setFillGray: 57,\n  setStrokeRGBColor: 58,\n  setFillRGBColor: 59,\n  setStrokeCMYKColor: 60,\n  setFillCMYKColor: 61,\n  shadingFill: 62,\n  beginInlineImage: 63,\n  beginImageData: 64,\n  endInlineImage: 65,\n  paintXObject: 66,\n  markPoint: 67,\n  markPointProps: 68,\n  beginMarkedContent: 69,\n  beginMarkedContentProps: 70,\n  endMarkedContent: 71,\n  beginCompat: 72,\n  endCompat: 73,\n  paintFormXObjectBegin: 74,\n  paintFormXObjectEnd: 75,\n  beginGroup: 76,\n  endGroup: 77,\n  beginAnnotations: 78,\n  endAnnotations: 79,\n  beginAnnotation: 80,\n  endAnnotation: 81,\n  /** @deprecated unused */\n  paintJpegXObject: 82,\n  paintImageMaskXObject: 83,\n  paintImageMaskXObjectGroup: 84,\n  paintImageXObject: 85,\n  paintInlineImageXObject: 86,\n  paintInlineImageXObjectGroup: 87,\n  paintImageXObjectRepeat: 88,\n  paintImageMaskXObjectRepeat: 89,\n  paintSolidColorImageMask: 90,\n  constructPath: 91,\n};\n\nconst UNSUPPORTED_FEATURES = {\n  /** @deprecated unused */\n  unknown: \"unknown\",\n  forms: \"forms\",\n  javaScript: \"javaScript\",\n  signatures: \"signatures\",\n  smask: \"smask\",\n  shadingPattern: \"shadingPattern\",\n  /** @deprecated unused */\n  font: \"font\",\n  errorTilingPattern: \"errorTilingPattern\",\n  errorExtGState: \"errorExtGState\",\n  errorXObject: \"errorXObject\",\n  errorFontLoadType3: \"errorFontLoadType3\",\n  errorFontState: \"errorFontState\",\n  errorFontMissing: \"errorFontMissing\",\n  errorFontTranslate: \"errorFontTranslate\",\n  errorColorSpace: \"errorColorSpace\",\n  errorOperatorList: \"errorOperatorList\",\n  errorFontToUnicode: \"errorFontToUnicode\",\n  errorFontLoadNative: \"errorFontLoadNative\",\n  errorFontBuildPath: \"errorFontBuildPath\",\n  errorFontGetPath: \"errorFontGetPath\",\n  errorMarkedContent: \"errorMarkedContent\",\n  errorContentSubStream: \"errorContentSubStream\",\n};\n\nconst PasswordResponses = {\n  NEED_PASSWORD: 1,\n  INCORRECT_PASSWORD: 2,\n};\n\nlet verbosity = VerbosityLevel.WARNINGS;\n\nfunction setVerbosityLevel(level) {\n  if (Number.isInteger(level)) {\n    verbosity = level;\n  }\n}\n\nfunction getVerbosityLevel() {\n  return verbosity;\n}\n\n// A notice for devs. These are good for things that are helpful to devs, such\n// as warning that Workers were disabled, which is important to devs but not\n// end users.\nfunction info(msg) {\n  if (verbosity >= VerbosityLevel.INFOS) {\n    console.log(`Info: ${msg}`);\n  }\n}\n\n// Non-fatal warnings.\nfunction warn(msg) {\n  if (verbosity >= VerbosityLevel.WARNINGS) {\n    console.log(`Warning: ${msg}`);\n  }\n}\n\nfunction unreachable(msg) {\n  throw new Error(msg);\n}\n\nfunction assert(cond, msg) {\n  if (!cond) {\n    unreachable(msg);\n  }\n}\n\n// Checks if URLs have the same origin. For non-HTTP based URLs, returns false.\nfunction isSameOrigin(baseUrl, otherUrl) {\n  let base;\n  try {\n    base = new URL(baseUrl);\n    if (!base.origin || base.origin === \"null\") {\n      return false; // non-HTTP url\n    }\n  } catch (e) {\n    return false;\n  }\n\n  const other = new URL(otherUrl, base);\n  return base.origin === other.origin;\n}\n\n// Checks if URLs use one of the allowed protocols, e.g. to avoid XSS.\nfunction _isValidProtocol(url) {\n  if (!url) {\n    return false;\n  }\n  switch (url.protocol) {\n    case \"http:\":\n    case \"https:\":\n    case \"ftp:\":\n    case \"mailto:\":\n    case \"tel:\":\n      return true;\n    default:\n      return false;\n  }\n}\n\n/**\n * Attempts to create a valid absolute URL.\n *\n * @param {URL|string} url - An absolute, or relative, URL.\n * @param {URL|string} [baseUrl] - An absolute URL.\n * @param {Object} [options]\n * @returns Either a valid {URL}, or `null` otherwise.\n */\nfunction createValidAbsoluteUrl(url, baseUrl = null, options = null) {\n  if (!url) {\n    return null;\n  }\n  try {\n    if (options && typeof url === \"string\") {\n      // Let URLs beginning with \"www.\" default to using the \"http://\" protocol.\n      if (options.addDefaultProtocol && url.startsWith(\"www.\")) {\n        const dots = url.match(/\\./g);\n        // Avoid accidentally matching a *relative* URL pointing to a file named\n        // e.g. \"www.pdf\" or similar.\n        if (dots && dots.length >= 2) {\n          url = `http://${url}`;\n        }\n      }\n\n      // According to ISO 32000-1:2008, section 12.6.4.7, URIs should be encoded\n      // in 7-bit ASCII. Some bad PDFs use UTF-8 encoding; see bug 1122280.\n      if (options.tryConvertEncoding) {\n        try {\n          url = stringToUTF8String(url);\n        } catch (ex) {}\n      }\n    }\n\n    const absoluteUrl = baseUrl ? new URL(url, baseUrl) : new URL(url);\n    if (_isValidProtocol(absoluteUrl)) {\n      return absoluteUrl;\n    }\n  } catch (ex) {\n    /* `new URL()` will throw on incorrect data. */\n  }\n  return null;\n}\n\nfunction shadow(obj, prop, value) {\n  if (\n    typeof PDFJSDev === \"undefined\" ||\n    PDFJSDev.test(\"!PRODUCTION || TESTING\")\n  ) {\n    assert(\n      prop in obj,\n      `shadow: Property \"${prop && prop.toString()}\" not found in object.`\n    );\n  }\n  Object.defineProperty(obj, prop, {\n    value,\n    enumerable: true,\n    configurable: true,\n    writable: false,\n  });\n  return value;\n}\n\n/**\n * @type {any}\n */\nconst BaseException = (function BaseExceptionClosure() {\n  // eslint-disable-next-line no-shadow\n  function BaseException(message, name) {\n    if (this.constructor === BaseException) {\n      unreachable(\"Cannot initialize BaseException.\");\n    }\n    this.message = message;\n    this.name = name;\n  }\n  BaseException.prototype = new Error();\n  BaseException.constructor = BaseException;\n\n  return BaseException;\n})();\n\nclass PasswordException extends BaseException {\n  constructor(msg, code) {\n    super(msg, \"PasswordException\");\n    this.code = code;\n  }\n}\n\nclass UnknownErrorException extends BaseException {\n  constructor(msg, details) {\n    super(msg, \"UnknownErrorException\");\n    this.details = details;\n  }\n}\n\nclass InvalidPDFException extends BaseException {\n  constructor(msg) {\n    super(msg, \"InvalidPDFException\");\n  }\n}\n\nclass MissingPDFException extends BaseException {\n  constructor(msg) {\n    super(msg, \"MissingPDFException\");\n  }\n}\n\nclass UnexpectedResponseException extends BaseException {\n  constructor(msg, status) {\n    super(msg, \"UnexpectedResponseException\");\n    this.status = status;\n  }\n}\n\n/**\n * Error caused during parsing PDF data.\n */\nclass FormatError extends BaseException {\n  constructor(msg) {\n    super(msg, \"FormatError\");\n  }\n}\n\n/**\n * Error used to indicate task cancellation.\n */\nclass AbortException extends BaseException {\n  constructor(msg) {\n    super(msg, \"AbortException\");\n  }\n}\n\nconst NullCharactersRegExp = /\\x00+/g;\nconst InvisibleCharactersRegExp = /[\\x01-\\x1F]/g;\n\n/**\n * @param {string} str\n */\nfunction removeNullCharacters(str, replaceInvisible = false) {\n  if (typeof str !== \"string\") {\n    warn(\"The argument for removeNullCharacters must be a string.\");\n    return str;\n  }\n  if (replaceInvisible) {\n    str = str.replace(InvisibleCharactersRegExp, \" \");\n  }\n  return str.replace(NullCharactersRegExp, \"\");\n}\n\nfunction bytesToString(bytes) {\n  assert(\n    bytes !== null && typeof bytes === \"object\" && bytes.length !== undefined,\n    \"Invalid argument for bytesToString\"\n  );\n  const length = bytes.length;\n  const MAX_ARGUMENT_COUNT = 8192;\n  if (length < MAX_ARGUMENT_COUNT) {\n    return String.fromCharCode.apply(null, bytes);\n  }\n  const strBuf = [];\n  for (let i = 0; i < length; i += MAX_ARGUMENT_COUNT) {\n    const chunkEnd = Math.min(i + MAX_ARGUMENT_COUNT, length);\n    const chunk = bytes.subarray(i, chunkEnd);\n    strBuf.push(String.fromCharCode.apply(null, chunk));\n  }\n  return strBuf.join(\"\");\n}\n\nfunction stringToBytes(str) {\n  assert(typeof str === \"string\", \"Invalid argument for stringToBytes\");\n  const length = str.length;\n  const bytes = new Uint8Array(length);\n  for (let i = 0; i < length; ++i) {\n    bytes[i] = str.charCodeAt(i) & 0xff;\n  }\n  return bytes;\n}\n\n/**\n * Gets length of the array (Array, Uint8Array, or string) in bytes.\n * @param {Array<any>|Uint8Array|string} arr\n * @returns {number}\n */\nfunction arrayByteLength(arr) {\n  if (arr.length !== undefined) {\n    return arr.length;\n  }\n  assert(arr.byteLength !== undefined, \"arrayByteLength - invalid argument.\");\n  return arr.byteLength;\n}\n\n/**\n * Combines array items (arrays) into single Uint8Array object.\n * @param {Array<Array<any>|Uint8Array|string>} arr - the array of the arrays\n *   (Array, Uint8Array, or string).\n * @returns {Uint8Array}\n */\nfunction arraysToBytes(arr) {\n  const length = arr.length;\n  // Shortcut: if first and only item is Uint8Array, return it.\n  if (length === 1 && arr[0] instanceof Uint8Array) {\n    return arr[0];\n  }\n  let resultLength = 0;\n  for (let i = 0; i < length; i++) {\n    resultLength += arrayByteLength(arr[i]);\n  }\n  let pos = 0;\n  const data = new Uint8Array(resultLength);\n  for (let i = 0; i < length; i++) {\n    let item = arr[i];\n    if (!(item instanceof Uint8Array)) {\n      if (typeof item === \"string\") {\n        item = stringToBytes(item);\n      } else {\n        item = new Uint8Array(item);\n      }\n    }\n    const itemLength = item.byteLength;\n    data.set(item, pos);\n    pos += itemLength;\n  }\n  return data;\n}\n\nfunction string32(value) {\n  if (\n    typeof PDFJSDev === \"undefined\" ||\n    PDFJSDev.test(\"!PRODUCTION || TESTING\")\n  ) {\n    assert(\n      typeof value === \"number\" && Math.abs(value) < 2 ** 32,\n      `string32: Unexpected input \"${value}\".`\n    );\n  }\n  return String.fromCharCode(\n    (value >> 24) & 0xff,\n    (value >> 16) & 0xff,\n    (value >> 8) & 0xff,\n    value & 0xff\n  );\n}\n\nfunction objectSize(obj) {\n  return Object.keys(obj).length;\n}\n\n// Ensure that the returned Object has a `null` prototype; hence why\n// `Object.fromEntries(...)` is not used.\nfunction objectFromMap(map) {\n  const obj = Object.create(null);\n  for (const [key, value] of map) {\n    obj[key] = value;\n  }\n  return obj;\n}\n\n// Checks the endianness of the platform.\nfunction isLittleEndian() {\n  const buffer8 = new Uint8Array(4);\n  buffer8[0] = 1;\n  const view32 = new Uint32Array(buffer8.buffer, 0, 1);\n  return view32[0] === 1;\n}\nconst IsLittleEndianCached = {\n  get value() {\n    return shadow(this, \"value\", isLittleEndian());\n  },\n};\n\n// Checks if it's possible to eval JS expressions.\nfunction isEvalSupported() {\n  try {\n    new Function(\"\"); // eslint-disable-line no-new, no-new-func\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\nconst IsEvalSupportedCached = {\n  get value() {\n    return shadow(this, \"value\", isEvalSupported());\n  },\n};\n\nconst hexNumbers = [...Array(256).keys()].map(n =>\n  n.toString(16).padStart(2, \"0\")\n);\n\nclass Util {\n  static makeHexColor(r, g, b) {\n    return `#${hexNumbers[r]}${hexNumbers[g]}${hexNumbers[b]}`;\n  }\n\n  // Concatenates two transformation matrices together and returns the result.\n  static transform(m1, m2) {\n    return [\n      m1[0] * m2[0] + m1[2] * m2[1],\n      m1[1] * m2[0] + m1[3] * m2[1],\n      m1[0] * m2[2] + m1[2] * m2[3],\n      m1[1] * m2[2] + m1[3] * m2[3],\n      m1[0] * m2[4] + m1[2] * m2[5] + m1[4],\n      m1[1] * m2[4] + m1[3] * m2[5] + m1[5],\n    ];\n  }\n\n  // For 2d affine transforms\n  static applyTransform(p, m) {\n    const xt = p[0] * m[0] + p[1] * m[2] + m[4];\n    const yt = p[0] * m[1] + p[1] * m[3] + m[5];\n    return [xt, yt];\n  }\n\n  static applyInverseTransform(p, m) {\n    const d = m[0] * m[3] - m[1] * m[2];\n    const xt = (p[0] * m[3] - p[1] * m[2] + m[2] * m[5] - m[4] * m[3]) / d;\n    const yt = (-p[0] * m[1] + p[1] * m[0] + m[4] * m[1] - m[5] * m[0]) / d;\n    return [xt, yt];\n  }\n\n  // Applies the transform to the rectangle and finds the minimum axially\n  // aligned bounding box.\n  static getAxialAlignedBoundingBox(r, m) {\n    const p1 = Util.applyTransform(r, m);\n    const p2 = Util.applyTransform(r.slice(2, 4), m);\n    const p3 = Util.applyTransform([r[0], r[3]], m);\n    const p4 = Util.applyTransform([r[2], r[1]], m);\n    return [\n      Math.min(p1[0], p2[0], p3[0], p4[0]),\n      Math.min(p1[1], p2[1], p3[1], p4[1]),\n      Math.max(p1[0], p2[0], p3[0], p4[0]),\n      Math.max(p1[1], p2[1], p3[1], p4[1]),\n    ];\n  }\n\n  static inverseTransform(m) {\n    const d = m[0] * m[3] - m[1] * m[2];\n    return [\n      m[3] / d,\n      -m[1] / d,\n      -m[2] / d,\n      m[0] / d,\n      (m[2] * m[5] - m[4] * m[3]) / d,\n      (m[4] * m[1] - m[5] * m[0]) / d,\n    ];\n  }\n\n  // Apply a generic 3d matrix M on a 3-vector v:\n  //   | a b c |   | X |\n  //   | d e f | x | Y |\n  //   | g h i |   | Z |\n  // M is assumed to be serialized as [a,b,c,d,e,f,g,h,i],\n  // with v as [X,Y,Z]\n  static apply3dTransform(m, v) {\n    return [\n      m[0] * v[0] + m[1] * v[1] + m[2] * v[2],\n      m[3] * v[0] + m[4] * v[1] + m[5] * v[2],\n      m[6] * v[0] + m[7] * v[1] + m[8] * v[2],\n    ];\n  }\n\n  // This calculation uses Singular Value Decomposition.\n  // The SVD can be represented with formula A = USV. We are interested in the\n  // matrix S here because it represents the scale values.\n  static singularValueDecompose2dScale(m) {\n    const transpose = [m[0], m[2], m[1], m[3]];\n\n    // Multiply matrix m with its transpose.\n    const a = m[0] * transpose[0] + m[1] * transpose[2];\n    const b = m[0] * transpose[1] + m[1] * transpose[3];\n    const c = m[2] * transpose[0] + m[3] * transpose[2];\n    const d = m[2] * transpose[1] + m[3] * transpose[3];\n\n    // Solve the second degree polynomial to get roots.\n    const first = (a + d) / 2;\n    const second = Math.sqrt((a + d) ** 2 - 4 * (a * d - c * b)) / 2;\n    const sx = first + second || 1;\n    const sy = first - second || 1;\n\n    // Scale values are the square roots of the eigenvalues.\n    return [Math.sqrt(sx), Math.sqrt(sy)];\n  }\n\n  // Normalize rectangle rect=[x1, y1, x2, y2] so that (x1,y1) < (x2,y2)\n  // For coordinate systems whose origin lies in the bottom-left, this\n  // means normalization to (BL,TR) ordering. For systems with origin in the\n  // top-left, this means (TL,BR) ordering.\n  static normalizeRect(rect) {\n    const r = rect.slice(0); // clone rect\n    if (rect[0] > rect[2]) {\n      r[0] = rect[2];\n      r[2] = rect[0];\n    }\n    if (rect[1] > rect[3]) {\n      r[1] = rect[3];\n      r[3] = rect[1];\n    }\n    return r;\n  }\n\n  // Returns a rectangle [x1, y1, x2, y2] corresponding to the\n  // intersection of rect1 and rect2. If no intersection, returns 'false'\n  // The rectangle coordinates of rect1, rect2 should be [x1, y1, x2, y2]\n  static intersect(rect1, rect2) {\n    function compare(a, b) {\n      return a - b;\n    }\n\n    // Order points along the axes\n    const orderedX = [rect1[0], rect1[2], rect2[0], rect2[2]].sort(compare);\n    const orderedY = [rect1[1], rect1[3], rect2[1], rect2[3]].sort(compare);\n    const result = [];\n\n    rect1 = Util.normalizeRect(rect1);\n    rect2 = Util.normalizeRect(rect2);\n\n    // X: first and second points belong to different rectangles?\n    if (\n      (orderedX[0] === rect1[0] && orderedX[1] === rect2[0]) ||\n      (orderedX[0] === rect2[0] && orderedX[1] === rect1[0])\n    ) {\n      // Intersection must be between second and third points\n      result[0] = orderedX[1];\n      result[2] = orderedX[2];\n    } else {\n      return null;\n    }\n\n    // Y: first and second points belong to different rectangles?\n    if (\n      (orderedY[0] === rect1[1] && orderedY[1] === rect2[1]) ||\n      (orderedY[0] === rect2[1] && orderedY[1] === rect1[1])\n    ) {\n      // Intersection must be between second and third points\n      result[1] = orderedY[1];\n      result[3] = orderedY[2];\n    } else {\n      return null;\n    }\n\n    return result;\n  }\n\n  // From https://github.com/adobe-webplatform/Snap.svg/blob/b365287722a72526000ac4bfcf0ce4cac2faa015/src/path.js#L852\n  static bezierBoundingBox(x0, y0, x1, y1, x2, y2, x3, y3) {\n    const tvalues = [],\n      bounds = [[], []];\n    let a, b, c, t, t1, t2, b2ac, sqrtb2ac;\n    for (let i = 0; i < 2; ++i) {\n      if (i === 0) {\n        b = 6 * x0 - 12 * x1 + 6 * x2;\n        a = -3 * x0 + 9 * x1 - 9 * x2 + 3 * x3;\n        c = 3 * x1 - 3 * x0;\n      } else {\n        b = 6 * y0 - 12 * y1 + 6 * y2;\n        a = -3 * y0 + 9 * y1 - 9 * y2 + 3 * y3;\n        c = 3 * y1 - 3 * y0;\n      }\n      if (Math.abs(a) < 1e-12) {\n        if (Math.abs(b) < 1e-12) {\n          continue;\n        }\n        t = -c / b;\n        if (0 < t && t < 1) {\n          tvalues.push(t);\n        }\n        continue;\n      }\n      b2ac = b * b - 4 * c * a;\n      sqrtb2ac = Math.sqrt(b2ac);\n      if (b2ac < 0) {\n        continue;\n      }\n      t1 = (-b + sqrtb2ac) / (2 * a);\n      if (0 < t1 && t1 < 1) {\n        tvalues.push(t1);\n      }\n      t2 = (-b - sqrtb2ac) / (2 * a);\n      if (0 < t2 && t2 < 1) {\n        tvalues.push(t2);\n      }\n    }\n\n    let j = tvalues.length,\n      mt;\n    const jlen = j;\n    while (j--) {\n      t = tvalues[j];\n      mt = 1 - t;\n      bounds[0][j] =\n        mt * mt * mt * x0 +\n        3 * mt * mt * t * x1 +\n        3 * mt * t * t * x2 +\n        t * t * t * x3;\n      bounds[1][j] =\n        mt * mt * mt * y0 +\n        3 * mt * mt * t * y1 +\n        3 * mt * t * t * y2 +\n        t * t * t * y3;\n    }\n\n    bounds[0][jlen] = x0;\n    bounds[1][jlen] = y0;\n    bounds[0][jlen + 1] = x3;\n    bounds[1][jlen + 1] = y3;\n    bounds[0].length = bounds[1].length = jlen + 2;\n\n    return [\n      Math.min(...bounds[0]),\n      Math.min(...bounds[1]),\n      Math.max(...bounds[0]),\n      Math.max(...bounds[1]),\n    ];\n  }\n}\n\nconst PDFStringTranslateTable = [\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x2d8,\n  0x2c7, 0x2c6, 0x2d9, 0x2dd, 0x2db, 0x2da, 0x2dc, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0x2022, 0x2020, 0x2021, 0x2026, 0x2014, 0x2013, 0x192,\n  0x2044, 0x2039, 0x203a, 0x2212, 0x2030, 0x201e, 0x201c, 0x201d, 0x2018,\n  0x2019, 0x201a, 0x2122, 0xfb01, 0xfb02, 0x141, 0x152, 0x160, 0x178, 0x17d,\n  0x131, 0x142, 0x153, 0x161, 0x17e, 0, 0x20ac,\n];\n\nfunction stringToPDFString(str) {\n  const length = str.length,\n    strBuf = [];\n  if (str[0] === \"\\xFE\" && str[1] === \"\\xFF\") {\n    // UTF16BE BOM\n    for (let i = 2; i < length; i += 2) {\n      strBuf.push(\n        String.fromCharCode((str.charCodeAt(i) << 8) | str.charCodeAt(i + 1))\n      );\n    }\n  } else if (str[0] === \"\\xFF\" && str[1] === \"\\xFE\") {\n    // UTF16LE BOM\n    for (let i = 2; i < length; i += 2) {\n      strBuf.push(\n        String.fromCharCode((str.charCodeAt(i + 1) << 8) | str.charCodeAt(i))\n      );\n    }\n  } else {\n    for (let i = 0; i < length; ++i) {\n      const code = PDFStringTranslateTable[str.charCodeAt(i)];\n      strBuf.push(code ? String.fromCharCode(code) : str.charAt(i));\n    }\n  }\n  return strBuf.join(\"\");\n}\n\nfunction escapeString(str) {\n  // replace \"(\", \")\", \"\\n\", \"\\r\" and \"\\\"\n  // by \"\\(\", \"\\)\", \"\\\\n\", \"\\\\r\" and \"\\\\\"\n  // in order to write it in a PDF file.\n  return str.replace(/([()\\\\\\n\\r])/g, match => {\n    if (match === \"\\n\") {\n      return \"\\\\n\";\n    } else if (match === \"\\r\") {\n      return \"\\\\r\";\n    }\n    return `\\\\${match}`;\n  });\n}\n\nfunction isAscii(str) {\n  return /^[\\x00-\\x7F]*$/.test(str);\n}\n\nfunction stringToUTF16BEString(str) {\n  const buf = [\"\\xFE\\xFF\"];\n  for (let i = 0, ii = str.length; i < ii; i++) {\n    const char = str.charCodeAt(i);\n    buf.push(\n      String.fromCharCode((char >> 8) & 0xff),\n      String.fromCharCode(char & 0xff)\n    );\n  }\n  return buf.join(\"\");\n}\n\nfunction stringToUTF8String(str) {\n  return decodeURIComponent(escape(str));\n}\n\nfunction utf8StringToString(str) {\n  return unescape(encodeURIComponent(str));\n}\n\nfunction isBool(v) {\n  return typeof v === \"boolean\";\n}\n\nfunction isNum(v) {\n  return typeof v === \"number\";\n}\n\nfunction isString(v) {\n  return typeof v === \"string\";\n}\n\nfunction isArrayBuffer(v) {\n  return typeof v === \"object\" && v !== null && v.byteLength !== undefined;\n}\n\nfunction isArrayEqual(arr1, arr2) {\n  if (arr1.length !== arr2.length) {\n    return false;\n  }\n  for (let i = 0, ii = arr1.length; i < ii; i++) {\n    if (arr1[i] !== arr2[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction getModificationDate(date = new Date()) {\n  const buffer = [\n    date.getUTCFullYear().toString(),\n    (date.getUTCMonth() + 1).toString().padStart(2, \"0\"),\n    date.getUTCDate().toString().padStart(2, \"0\"),\n    date.getUTCHours().toString().padStart(2, \"0\"),\n    date.getUTCMinutes().toString().padStart(2, \"0\"),\n    date.getUTCSeconds().toString().padStart(2, \"0\"),\n  ];\n\n  return buffer.join(\"\");\n}\n\n/**\n * Promise Capability object.\n *\n * @typedef {Object} PromiseCapability\n * @property {Promise<any>} promise - A Promise object.\n * @property {boolean} settled - If the Promise has been fulfilled/rejected.\n * @property {function} resolve - Fulfills the Promise.\n * @property {function} reject - Rejects the Promise.\n */\n\n/**\n * Creates a promise capability object.\n * @alias createPromiseCapability\n *\n * @returns {PromiseCapability}\n */\nfunction createPromiseCapability() {\n  const capability = Object.create(null);\n  let isSettled = false;\n\n  Object.defineProperty(capability, \"settled\", {\n    get() {\n      return isSettled;\n    },\n  });\n  capability.promise = new Promise(function (resolve, reject) {\n    capability.resolve = function (data) {\n      isSettled = true;\n      resolve(data);\n    };\n    capability.reject = function (reason) {\n      isSettled = true;\n      reject(reason);\n    };\n  });\n  return capability;\n}\n\nfunction createObjectURL(data, contentType = \"\", forceDataSchema = false) {\n  if (URL.createObjectURL && typeof Blob !== \"undefined\" && !forceDataSchema) {\n    return URL.createObjectURL(new Blob([data], { type: contentType }));\n  }\n  // Blob/createObjectURL is not available, falling back to data schema.\n  const digits =\n    \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n\n  let buffer = `data:${contentType};base64,`;\n  for (let i = 0, ii = data.length; i < ii; i += 3) {\n    const b1 = data[i] & 0xff;\n    const b2 = data[i + 1] & 0xff;\n    const b3 = data[i + 2] & 0xff;\n    const d1 = b1 >> 2,\n      d2 = ((b1 & 3) << 4) | (b2 >> 4);\n    const d3 = i + 1 < ii ? ((b2 & 0xf) << 2) | (b3 >> 6) : 64;\n    const d4 = i + 2 < ii ? b3 & 0x3f : 64;\n    buffer += digits[d1] + digits[d2] + digits[d3] + digits[d4];\n  }\n  return buffer;\n}\n\nexport {\n  AbortException,\n  AnnotationActionEventType,\n  AnnotationBorderStyleType,\n  AnnotationFieldFlag,\n  AnnotationFlag,\n  AnnotationMarkedState,\n  AnnotationMode,\n  AnnotationReplyType,\n  AnnotationReviewState,\n  AnnotationStateModelType,\n  AnnotationType,\n  arrayByteLength,\n  arraysToBytes,\n  assert,\n  BaseException,\n  bytesToString,\n  CMapCompressionType,\n  createObjectURL,\n  createPromiseCapability,\n  createValidAbsoluteUrl,\n  DocumentActionEventType,\n  escapeString,\n  FONT_IDENTITY_MATRIX,\n  FontType,\n  FormatError,\n  getModificationDate,\n  getVerbosityLevel,\n  IDENTITY_MATRIX,\n  ImageKind,\n  info,\n  InvalidPDFException,\n  isArrayBuffer,\n  isArrayEqual,\n  isAscii,\n  isBool,\n  IsEvalSupportedCached,\n  IsLittleEndianCached,\n  isNum,\n  isSameOrigin,\n  isString,\n  MissingPDFException,\n  objectFromMap,\n  objectSize,\n  OPS,\n  PageActionEventType,\n  PasswordException,\n  PasswordResponses,\n  PermissionFlag,\n  removeNullCharacters,\n  RenderingIntentFlag,\n  setVerbosityLevel,\n  shadow,\n  StreamType,\n  string32,\n  stringToBytes,\n  stringToPDFString,\n  stringToUTF16BEString,\n  stringToUTF8String,\n  TextRenderingMode,\n  UnexpectedResponseException,\n  UnknownErrorException,\n  unreachable,\n  UNSUPPORTED_FEATURES,\n  utf8StringToString,\n  Util,\n  VerbosityLevel,\n  warn,\n};\n","/* Copyright 2017 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { isNodeJS } from \"./is_node.js\";\n\n// Skip compatibility checks for modern builds and if we already ran the module.\nif (\n  (typeof PDFJSDev === \"undefined\" || !PDFJSDev.test(\"SKIP_BABEL\")) &&\n  (typeof globalThis === \"undefined\" || !globalThis._pdfjsCompatibilityChecked)\n) {\n  // Provides support for `globalThis` in legacy browsers.\n  // Support: Firefox<65, Chrome<71, Safari<12.1, Node.js<12.0.0\n  if (typeof globalThis === \"undefined\" || globalThis.Math !== Math) {\n    // eslint-disable-next-line no-global-assign\n    globalThis = require(\"core-js/es/global-this\");\n  }\n  globalThis._pdfjsCompatibilityChecked = true;\n\n  // Support: Node.js\n  (function checkNodeBtoa() {\n    if (globalThis.btoa || !isNodeJS) {\n      return;\n    }\n    globalThis.btoa = function (chars) {\n      // eslint-disable-next-line no-undef\n      return Buffer.from(chars, \"binary\").toString(\"base64\");\n    };\n  })();\n\n  // Support: Node.js\n  (function checkNodeAtob() {\n    if (globalThis.atob || !isNodeJS) {\n      return;\n    }\n    globalThis.atob = function (input) {\n      // eslint-disable-next-line no-undef\n      return Buffer.from(input, \"base64\").toString(\"binary\");\n    };\n  })();\n\n  // Support: Node.js\n  (function checkDOMMatrix() {\n    if (globalThis.DOMMatrix || !isNodeJS) {\n      return;\n    }\n    globalThis.DOMMatrix = require(\"dommatrix/dist/dommatrix.js\");\n  })();\n\n  // Provides support for Object.fromEntries in legacy browsers.\n  // Support: Firefox<63, Chrome<73, Safari<12.1, Node.js<12.0.0\n  (function checkObjectFromEntries() {\n    if (Object.fromEntries) {\n      return;\n    }\n    require(\"core-js/es/object/from-entries.js\");\n  })();\n\n  // Provides support for *recent* additions to the Promise specification,\n  // however basic Promise support is assumed to be available natively.\n  // Support: Firefox<71, Chrome<76, Safari<13, Node.js<12.9.0\n  (function checkPromise() {\n    if (typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"IMAGE_DECODERS\")) {\n      // The current image decoders are synchronous, hence `Promise` shouldn't\n      // need to be polyfilled for the IMAGE_DECODERS build target.\n      return;\n    }\n    if (globalThis.Promise.allSettled) {\n      return;\n    }\n    globalThis.Promise = require(\"core-js/es/promise/index.js\");\n  })();\n\n  // Support: Node.js\n  (function checkReadableStream() {\n    if (typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"IMAGE_DECODERS\")) {\n      // The current image decoders are synchronous, hence `ReadableStream`\n      // shouldn't need to be polyfilled for the IMAGE_DECODERS build target.\n      return;\n    }\n    if (typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"CHROME\")) {\n      // Slightly reduce the size of the Chromium-extension, given\n      // that `ReadableStream` has been supported since Chrome 43.\n      return;\n    }\n    if (globalThis.ReadableStream || !isNodeJS) {\n      return;\n    }\n    globalThis.ReadableStream =\n      require(\"web-streams-polyfill/dist/ponyfill.js\").ReadableStream;\n  })();\n}\n","/* Copyright 2018 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/* globals process */\n\n// NW.js / Electron is a browser context, but copies some Node.js objects; see\n// http://docs.nwjs.io/en/latest/For%20Users/Advanced/JavaScript%20Contexts%20in%20NW.js/#access-nodejs-and-nwjs-api-in-browser-context\n// https://www.electronjs.org/docs/api/process#processversionselectron-readonly\n// https://www.electronjs.org/docs/api/process#processtype-readonly\nconst isNodeJS =\n  typeof process === \"object\" &&\n  process + \"\" === \"[object process]\" &&\n  !process.versions.nw &&\n  !(process.versions.electron && process.type && process.type !== \"browser\");\n\nexport { isNodeJS };\n","/* Copyright 2015 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CMapCompressionType, unreachable } from \"../shared/util.js\";\n\nclass BaseCanvasFactory {\n  constructor() {\n    if (this.constructor === BaseCanvasFactory) {\n      unreachable(\"Cannot initialize BaseCanvasFactory.\");\n    }\n  }\n\n  create(width, height) {\n    if (width <= 0 || height <= 0) {\n      throw new Error(\"Invalid canvas size\");\n    }\n    const canvas = this._createCanvas(width, height);\n    return {\n      canvas,\n      context: canvas.getContext(\"2d\"),\n    };\n  }\n\n  reset(canvasAndContext, width, height) {\n    if (!canvasAndContext.canvas) {\n      throw new Error(\"Canvas is not specified\");\n    }\n    if (width <= 0 || height <= 0) {\n      throw new Error(\"Invalid canvas size\");\n    }\n    canvasAndContext.canvas.width = width;\n    canvasAndContext.canvas.height = height;\n  }\n\n  destroy(canvasAndContext) {\n    if (!canvasAndContext.canvas) {\n      throw new Error(\"Canvas is not specified\");\n    }\n    // Zeroing the width and height cause Firefox to release graphics\n    // resources immediately, which can greatly reduce memory consumption.\n    canvasAndContext.canvas.width = 0;\n    canvasAndContext.canvas.height = 0;\n    canvasAndContext.canvas = null;\n    canvasAndContext.context = null;\n  }\n\n  /**\n   * @private\n   */\n  _createCanvas(width, height) {\n    unreachable(\"Abstract method `_createCanvas` called.\");\n  }\n}\n\nclass BaseCMapReaderFactory {\n  constructor({ baseUrl = null, isCompressed = false }) {\n    if (this.constructor === BaseCMapReaderFactory) {\n      unreachable(\"Cannot initialize BaseCMapReaderFactory.\");\n    }\n    this.baseUrl = baseUrl;\n    this.isCompressed = isCompressed;\n  }\n\n  async fetch({ name }) {\n    if (!this.baseUrl) {\n      throw new Error(\n        'The CMap \"baseUrl\" parameter must be specified, ensure that ' +\n          'the \"cMapUrl\" and \"cMapPacked\" API parameters are provided.'\n      );\n    }\n    if (!name) {\n      throw new Error(\"CMap name must be specified.\");\n    }\n    const url = this.baseUrl + name + (this.isCompressed ? \".bcmap\" : \"\");\n    const compressionType = this.isCompressed\n      ? CMapCompressionType.BINARY\n      : CMapCompressionType.NONE;\n\n    return this._fetchData(url, compressionType).catch(reason => {\n      throw new Error(\n        `Unable to load ${this.isCompressed ? \"binary \" : \"\"}CMap at: ${url}`\n      );\n    });\n  }\n\n  /**\n   * @private\n   */\n  _fetchData(url, compressionType) {\n    unreachable(\"Abstract method `_fetchData` called.\");\n  }\n}\n\nclass BaseStandardFontDataFactory {\n  constructor({ baseUrl = null }) {\n    if (this.constructor === BaseStandardFontDataFactory) {\n      unreachable(\"Cannot initialize BaseStandardFontDataFactory.\");\n    }\n    this.baseUrl = baseUrl;\n  }\n\n  async fetch({ filename }) {\n    if (!this.baseUrl) {\n      throw new Error(\n        'The standard font \"baseUrl\" parameter must be specified, ensure that ' +\n          'the \"standardFontDataUrl\" API parameter is provided.'\n      );\n    }\n    if (!filename) {\n      throw new Error(\"Font filename must be specified.\");\n    }\n    const url = `${this.baseUrl}${filename}`;\n\n    return this._fetchData(url).catch(reason => {\n      throw new Error(`Unable to load font data at: ${url}`);\n    });\n  }\n\n  /**\n   * @private\n   */\n  _fetchData(url) {\n    unreachable(\"Abstract method `_fetchData` called.\");\n  }\n}\n\nclass BaseSVGFactory {\n  constructor() {\n    if (this.constructor === BaseSVGFactory) {\n      unreachable(\"Cannot initialize BaseSVGFactory.\");\n    }\n  }\n\n  create(width, height) {\n    if (width <= 0 || height <= 0) {\n      throw new Error(\"Invalid SVG dimensions\");\n    }\n    const svg = this._createSVG(\"svg:svg\");\n    svg.setAttribute(\"version\", \"1.1\");\n    svg.setAttribute(\"width\", `${width}px`);\n    svg.setAttribute(\"height\", `${height}px`);\n    svg.setAttribute(\"preserveAspectRatio\", \"none\");\n    svg.setAttribute(\"viewBox\", `0 0 ${width} ${height}`);\n\n    return svg;\n  }\n\n  createElement(type) {\n    if (typeof type !== \"string\") {\n      throw new Error(\"Invalid SVG element type\");\n    }\n    return this._createSVG(type);\n  }\n\n  /**\n   * @private\n   */\n  _createSVG(type) {\n    unreachable(\"Abstract method `_createSVG` called.\");\n  }\n}\n\nexport {\n  BaseCanvasFactory,\n  BaseCMapReaderFactory,\n  BaseStandardFontDataFactory,\n  BaseSVGFactory,\n};\n","/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @module pdfjsLib\n */\n\nimport {\n  AbortException,\n  AnnotationMode,\n  assert,\n  createPromiseCapability,\n  getVerbosityLevel,\n  info,\n  InvalidPDFException,\n  isArrayBuffer,\n  isSameOrigin,\n  MissingPDFException,\n  PasswordException,\n  RenderingIntentFlag,\n  setVerbosityLevel,\n  shadow,\n  stringToBytes,\n  UnexpectedResponseException,\n  UnknownErrorException,\n  unreachable,\n  warn,\n} from \"../shared/util.js\";\nimport {\n  deprecated,\n  DOMCanvasFactory,\n  DOMCMapReaderFactory,\n  DOMStandardFontDataFactory,\n  isDataScheme,\n  loadScript,\n  PageViewport,\n  RenderingCancelledException,\n  StatTimer,\n} from \"./display_utils.js\";\nimport { FontFaceObject, FontLoader } from \"./font_loader.js\";\nimport {\n  NodeCanvasFactory,\n  NodeCMapReaderFactory,\n  NodeStandardFontDataFactory,\n} from \"./node_utils.js\";\nimport { AnnotationStorage } from \"./annotation_storage.js\";\nimport { CanvasGraphics } from \"./canvas.js\";\nimport { GlobalWorkerOptions } from \"./worker_options.js\";\nimport { isNodeJS } from \"../shared/is_node.js\";\nimport { MessageHandler } from \"../shared/message_handler.js\";\nimport { Metadata } from \"./metadata.js\";\nimport { OptionalContentConfig } from \"./optional_content_config.js\";\nimport { PDFDataTransportStream } from \"./transport_stream.js\";\nimport { XfaText } from \"./xfa_text.js\";\n\nconst DEFAULT_RANGE_CHUNK_SIZE = 65536; // 2^16 = 65536\nconst RENDERING_CANCELLED_TIMEOUT = 100; // ms\n\nconst DefaultCanvasFactory =\n  (typeof PDFJSDev === \"undefined\" || PDFJSDev.test(\"GENERIC\")) && isNodeJS\n    ? NodeCanvasFactory\n    : DOMCanvasFactory;\nconst DefaultCMapReaderFactory =\n  (typeof PDFJSDev === \"undefined\" || PDFJSDev.test(\"GENERIC\")) && isNodeJS\n    ? NodeCMapReaderFactory\n    : DOMCMapReaderFactory;\nconst DefaultStandardFontDataFactory =\n  (typeof PDFJSDev === \"undefined\" || PDFJSDev.test(\"GENERIC\")) && isNodeJS\n    ? NodeStandardFontDataFactory\n    : DOMStandardFontDataFactory;\n\n/**\n * @typedef {function} IPDFStreamFactory\n * @param {DocumentInitParameters} params - The document initialization\n *   parameters. The \"url\" key is always present.\n * @returns {Promise} A promise, which is resolved with an instance of\n *   {IPDFStream}.\n * @ignore\n */\n\n/**\n * @type IPDFStreamFactory\n * @private\n */\nlet createPDFNetworkStream;\n\n/**\n * Sets the function that instantiates an {IPDFStream} as an alternative PDF\n * data transport.\n *\n * @param {IPDFStreamFactory} pdfNetworkStreamFactory - The factory function\n *   that takes document initialization parameters (including a \"url\") and\n *   returns a promise which is resolved with an instance of {IPDFStream}.\n * @ignore\n */\nfunction setPDFNetworkStreamFactory(pdfNetworkStreamFactory) {\n  createPDFNetworkStream = pdfNetworkStreamFactory;\n}\n\n/**\n * @typedef { Int8Array | Uint8Array | Uint8ClampedArray |\n *            Int16Array | Uint16Array |\n *            Int32Array | Uint32Array | Float32Array |\n *            Float64Array\n * } TypedArray\n */\n\n/**\n * @typedef {Object} RefProxy\n * @property {number} num\n * @property {number} gen\n */\n\n/**\n * Document initialization / loading parameters object.\n *\n * @typedef {Object} DocumentInitParameters\n * @property {string|URL} [url] - The URL of the PDF.\n * @property {TypedArray|Array<number>|string} [data] - Binary PDF data. Use\n *    typed arrays (Uint8Array) to improve the memory usage. If PDF data is\n *    BASE64-encoded, use `atob()` to convert it to a binary string first.\n * @property {Object} [httpHeaders] - Basic authentication headers.\n * @property {boolean} [withCredentials] - Indicates whether or not\n *   cross-site Access-Control requests should be made using credentials such\n *   as cookies or authorization headers. The default is `false`.\n * @property {string} [password] - For decrypting password-protected PDFs.\n * @property {TypedArray} [initialData] - A typed array with the first portion\n *   or all of the pdf data. Used by the extension since some data is already\n *   loaded before the switch to range requests.\n * @property {number} [length] - The PDF file length. It's used for progress\n *   reports and range requests operations.\n * @property {PDFDataRangeTransport} [range] - Allows for using a custom range\n *   transport implementation.\n * @property {number} [rangeChunkSize] - Specify maximum number of bytes fetched\n *   per range request. The default value is {@link DEFAULT_RANGE_CHUNK_SIZE}.\n * @property {PDFWorker} [worker] - The worker that will be used for loading and\n *   parsing the PDF data.\n * @property {number} [verbosity] - Controls the logging level; the constants\n *   from {@link VerbosityLevel} should be used.\n * @property {string} [docBaseUrl] - The base URL of the document, used when\n *   attempting to recover valid absolute URLs for annotations, and outline\n *   items, that (incorrectly) only specify relative URLs.\n * @property {string} [cMapUrl] - The URL where the predefined Adobe CMaps are\n *   located. Include the trailing slash.\n * @property {boolean} [cMapPacked] - Specifies if the Adobe CMaps are binary\n *   packed or not.\n * @property {Object} [CMapReaderFactory] - The factory that will be used when\n *   reading built-in CMap files. Providing a custom factory is useful for\n *   environments without Fetch API or `XMLHttpRequest` support, such as\n *   Node.js. The default value is {DOMCMapReaderFactory}.\n * @property {boolean} [useSystemFonts] - When `true`, fonts that aren't\n *   embedded in the PDF document will fallback to a system font.\n *   The default value is `true` in web environments and `false` in Node.js;\n *   unless `disableFontFace === true` in which case this defaults to `false`\n *   regardless of the environment (to prevent completely broken fonts).\n * @property {string} [standardFontDataUrl] - The URL where the standard font\n *   files are located. Include the trailing slash.\n * @property {Object} [StandardFontDataFactory] - The factory that will be used\n *   when reading the standard font files. Providing a custom factory is useful\n *   for environments without Fetch API or `XMLHttpRequest` support, such as\n *   Node.js. The default value is {DOMStandardFontDataFactory}.\n * @property {boolean} [useWorkerFetch] - Enable using the Fetch API in the\n *   worker-thread when reading CMap and standard font files. When `true`,\n *   the `CMapReaderFactory` and `StandardFontDataFactory` options are ignored.\n *   The default value is `true` in web environments and `false` in Node.js.\n * @property {boolean} [stopAtErrors] - Reject certain promises, e.g.\n *   `getOperatorList`, `getTextContent`, and `RenderTask`, when the associated\n *   PDF data cannot be successfully parsed, instead of attempting to recover\n *   whatever possible of the data. The default value is `false`.\n * @property {number} [maxImageSize] - The maximum allowed image size in total\n *   pixels, i.e. width * height. Images above this value will not be rendered.\n *   Use -1 for no limit, which is also the default value.\n * @property {boolean} [isEvalSupported] - Determines if we can evaluate strings\n *   as JavaScript. Primarily used to improve performance of font rendering, and\n *   when parsing PDF functions. The default value is `true`.\n * @property {boolean} [disableFontFace] - By default fonts are converted to\n *   OpenType fonts and loaded via the Font Loading API or `@font-face` rules.\n *   If disabled, fonts will be rendered using a built-in font renderer that\n *   constructs the glyphs with primitive path commands.\n *   The default value is `false` in web environments and `true` in Node.js.\n * @property {boolean} [fontExtraProperties] - Include additional properties,\n *   which are unused during rendering of PDF documents, when exporting the\n *   parsed font data from the worker-thread. This may be useful for debugging\n *   purposes (and backwards compatibility), but note that it will lead to\n *   increased memory usage. The default value is `false`.\n * @property {boolean} [enableXfa] - Render Xfa forms if any.\n *   The default value is `false`.\n * @property {HTMLDocument} [ownerDocument] - Specify an explicit document\n *   context to create elements with and to load resources, such as fonts,\n *   into. Defaults to the current document.\n * @property {boolean} [disableRange] - Disable range request loading of PDF\n *   files. When enabled, and if the server supports partial content requests,\n *   then the PDF will be fetched in chunks. The default value is `false`.\n * @property {boolean} [disableStream] - Disable streaming of PDF file data.\n *   By default PDF.js attempts to load PDF files in chunks. The default value\n *   is `false`.\n * @property {boolean} [disableAutoFetch] - Disable pre-fetching of PDF file\n *   data. When range requests are enabled PDF.js will automatically keep\n *   fetching more data even if it isn't needed to display the current page.\n *   The default value is `false`.\n *\n *   NOTE: It is also necessary to disable streaming, see above, in order for\n *   disabling of pre-fetching to work correctly.\n * @property {boolean} [pdfBug] - Enables special hooks for debugging PDF.js\n *   (see `web/debugger.js`). The default value is `false`.\n */\n\n/**\n * This is the main entry point for loading a PDF and interacting with it.\n *\n * NOTE: If a URL is used to fetch the PDF data a standard Fetch API call (or\n * XHR as fallback) is used, which means it must follow same origin rules,\n * e.g. no cross-domain requests without CORS.\n *\n * @param {string|URL|TypedArray|PDFDataRangeTransport|DocumentInitParameters}\n *   src - Can be a URL where a PDF file is located, a typed array (Uint8Array)\n *         already populated with data, or a parameter object.\n * @returns {PDFDocumentLoadingTask}\n */\nfunction getDocument(src) {\n  const task = new PDFDocumentLoadingTask();\n\n  let source;\n  if (typeof src === \"string\" || src instanceof URL) {\n    source = { url: src };\n  } else if (isArrayBuffer(src)) {\n    source = { data: src };\n  } else if (src instanceof PDFDataRangeTransport) {\n    source = { range: src };\n  } else {\n    if (typeof src !== \"object\") {\n      throw new Error(\n        \"Invalid parameter in getDocument, \" +\n          \"need either string, URL, Uint8Array, or parameter object.\"\n      );\n    }\n    if (!src.url && !src.data && !src.range) {\n      throw new Error(\n        \"Invalid parameter object: need either .data, .range or .url\"\n      );\n    }\n    source = src;\n  }\n  const params = Object.create(null);\n  let rangeTransport = null,\n    worker = null;\n\n  for (const key in source) {\n    const value = source[key];\n\n    switch (key) {\n      case \"url\":\n        if (typeof window !== \"undefined\") {\n          try {\n            // The full path is required in the 'url' field.\n            params[key] = new URL(value, window.location).href;\n            continue;\n          } catch (ex) {\n            warn(`Cannot create valid URL: \"${ex}\".`);\n          }\n        } else if (typeof value === \"string\" || value instanceof URL) {\n          params[key] = value.toString(); // Support Node.js environments.\n          continue;\n        }\n        throw new Error(\n          \"Invalid PDF url data: \" +\n            \"either string or URL-object is expected in the url property.\"\n        );\n      case \"range\":\n        rangeTransport = value;\n        continue;\n      case \"worker\":\n        worker = value;\n        continue;\n      case \"data\":\n        // Converting string or array-like data to Uint8Array.\n        if (\n          typeof PDFJSDev !== \"undefined\" &&\n          PDFJSDev.test(\"GENERIC\") &&\n          isNodeJS &&\n          typeof Buffer !== \"undefined\" && // eslint-disable-line no-undef\n          value instanceof Buffer // eslint-disable-line no-undef\n        ) {\n          params[key] = new Uint8Array(value);\n        } else if (value instanceof Uint8Array) {\n          break; // Use the data as-is when it's already a Uint8Array.\n        } else if (typeof value === \"string\") {\n          params[key] = stringToBytes(value);\n        } else if (\n          typeof value === \"object\" &&\n          value !== null &&\n          !isNaN(value.length)\n        ) {\n          params[key] = new Uint8Array(value);\n        } else if (isArrayBuffer(value)) {\n          params[key] = new Uint8Array(value);\n        } else {\n          throw new Error(\n            \"Invalid PDF binary data: either typed array, \" +\n              \"string, or array-like object is expected in the data property.\"\n          );\n        }\n        continue;\n    }\n    params[key] = value;\n  }\n\n  params.rangeChunkSize = params.rangeChunkSize || DEFAULT_RANGE_CHUNK_SIZE;\n  params.CMapReaderFactory =\n    params.CMapReaderFactory || DefaultCMapReaderFactory;\n  params.StandardFontDataFactory =\n    params.StandardFontDataFactory || DefaultStandardFontDataFactory;\n  params.ignoreErrors = params.stopAtErrors !== true;\n  params.fontExtraProperties = params.fontExtraProperties === true;\n  params.pdfBug = params.pdfBug === true;\n  params.enableXfa = params.enableXfa === true;\n\n  if (\n    typeof params.docBaseUrl !== \"string\" ||\n    isDataScheme(params.docBaseUrl)\n  ) {\n    // Ignore \"data:\"-URLs, since they can't be used to recover valid absolute\n    // URLs anyway. We want to avoid sending them to the worker-thread, since\n    // they contain the *entire* PDF document and can thus be arbitrarily long.\n    params.docBaseUrl = null;\n  }\n  if (!Number.isInteger(params.maxImageSize)) {\n    params.maxImageSize = -1;\n  }\n  if (typeof params.useWorkerFetch !== \"boolean\") {\n    params.useWorkerFetch =\n      params.CMapReaderFactory === DOMCMapReaderFactory &&\n      params.StandardFontDataFactory === DOMStandardFontDataFactory;\n  }\n  if (typeof params.isEvalSupported !== \"boolean\") {\n    params.isEvalSupported = true;\n  }\n  if (typeof params.disableFontFace !== \"boolean\") {\n    params.disableFontFace =\n      (typeof PDFJSDev === \"undefined\" || PDFJSDev.test(\"GENERIC\")) && isNodeJS;\n  }\n  if (typeof params.useSystemFonts !== \"boolean\") {\n    params.useSystemFonts =\n      !(\n        (typeof PDFJSDev === \"undefined\" || PDFJSDev.test(\"GENERIC\")) &&\n        isNodeJS\n      ) && !params.disableFontFace;\n  }\n  if (typeof params.ownerDocument === \"undefined\") {\n    params.ownerDocument = globalThis.document;\n  }\n\n  if (typeof params.disableRange !== \"boolean\") {\n    params.disableRange = false;\n  }\n  if (typeof params.disableStream !== \"boolean\") {\n    params.disableStream = false;\n  }\n  if (typeof params.disableAutoFetch !== \"boolean\") {\n    params.disableAutoFetch = false;\n  }\n\n  // Set the main-thread verbosity level.\n  setVerbosityLevel(params.verbosity);\n\n  if (!worker) {\n    const workerParams = {\n      verbosity: params.verbosity,\n      port: GlobalWorkerOptions.workerPort,\n    };\n    // Worker was not provided -- creating and owning our own. If message port\n    // is specified in global worker options, using it.\n    worker = workerParams.port\n      ? PDFWorker.fromPort(workerParams)\n      : new PDFWorker(workerParams);\n    task._worker = worker;\n  }\n  const docId = task.docId;\n  worker.promise\n    .then(function () {\n      if (task.destroyed) {\n        throw new Error(\"Loading aborted\");\n      }\n\n      const workerIdPromise = _fetchDocument(\n        worker,\n        params,\n        rangeTransport,\n        docId\n      );\n      const networkStreamPromise = new Promise(function (resolve) {\n        let networkStream;\n        if (rangeTransport) {\n          networkStream = new PDFDataTransportStream(\n            {\n              length: params.length,\n              initialData: params.initialData,\n              progressiveDone: params.progressiveDone,\n              contentDispositionFilename: params.contentDispositionFilename,\n              disableRange: params.disableRange,\n              disableStream: params.disableStream,\n            },\n            rangeTransport\n          );\n        } else if (!params.data) {\n          networkStream = createPDFNetworkStream({\n            url: params.url,\n            length: params.length,\n            httpHeaders: params.httpHeaders,\n            withCredentials: params.withCredentials,\n            rangeChunkSize: params.rangeChunkSize,\n            disableRange: params.disableRange,\n            disableStream: params.disableStream,\n          });\n        }\n        resolve(networkStream);\n      });\n\n      return Promise.all([workerIdPromise, networkStreamPromise]).then(\n        function ([workerId, networkStream]) {\n          if (task.destroyed) {\n            throw new Error(\"Loading aborted\");\n          }\n\n          const messageHandler = new MessageHandler(\n            docId,\n            workerId,\n            worker.port\n          );\n          const transport = new WorkerTransport(\n            messageHandler,\n            task,\n            networkStream,\n            params\n          );\n          task._transport = transport;\n          messageHandler.send(\"Ready\", null);\n        }\n      );\n    })\n    .catch(task._capability.reject);\n\n  return task;\n}\n\n/**\n * Starts fetching of specified PDF document/data.\n *\n * @param {PDFWorker} worker\n * @param {Object} source\n * @param {PDFDataRangeTransport} pdfDataRangeTransport\n * @param {string} docId - Unique document ID, used in `MessageHandler`.\n * @returns {Promise<string>} A promise that is resolved when the worker ID of\n *   the `MessageHandler` is known.\n * @private\n */\nasync function _fetchDocument(worker, source, pdfDataRangeTransport, docId) {\n  if (worker.destroyed) {\n    throw new Error(\"Worker was destroyed\");\n  }\n\n  if (pdfDataRangeTransport) {\n    source.length = pdfDataRangeTransport.length;\n    source.initialData = pdfDataRangeTransport.initialData;\n    source.progressiveDone = pdfDataRangeTransport.progressiveDone;\n    source.contentDispositionFilename =\n      pdfDataRangeTransport.contentDispositionFilename;\n  }\n  const workerId = await worker.messageHandler.sendWithPromise(\n    \"GetDocRequest\",\n    {\n      docId,\n      apiVersion:\n        typeof PDFJSDev !== \"undefined\" && !PDFJSDev.test(\"TESTING\")\n          ? PDFJSDev.eval(\"BUNDLE_VERSION\")\n          : null,\n      // Only send the required properties, and *not* the entire object.\n      source: {\n        data: source.data,\n        url: source.url,\n        password: source.password,\n        disableAutoFetch: source.disableAutoFetch,\n        rangeChunkSize: source.rangeChunkSize,\n        length: source.length,\n      },\n      maxImageSize: source.maxImageSize,\n      disableFontFace: source.disableFontFace,\n      docBaseUrl: source.docBaseUrl,\n      ignoreErrors: source.ignoreErrors,\n      isEvalSupported: source.isEvalSupported,\n      fontExtraProperties: source.fontExtraProperties,\n      enableXfa: source.enableXfa,\n      useSystemFonts: source.useSystemFonts,\n      cMapUrl: source.useWorkerFetch ? source.cMapUrl : null,\n      standardFontDataUrl: source.useWorkerFetch\n        ? source.standardFontDataUrl\n        : null,\n    }\n  );\n\n  if (worker.destroyed) {\n    throw new Error(\"Worker was destroyed\");\n  }\n  return workerId;\n}\n\n/**\n * @typedef {Object} OnProgressParameters\n * @property {number} loaded - Currently loaded number of bytes.\n * @property {number} total - Total number of bytes in the PDF file.\n */\n\n/**\n * The loading task controls the operations required to load a PDF document\n * (such as network requests) and provides a way to listen for completion,\n * after which individual pages can be rendered.\n */\nclass PDFDocumentLoadingTask {\n  static get idCounters() {\n    return shadow(this, \"idCounters\", { doc: 0 });\n  }\n\n  constructor() {\n    this._capability = createPromiseCapability();\n    this._transport = null;\n    this._worker = null;\n\n    /**\n     * Unique identifier for the document loading task.\n     * @type {string}\n     */\n    this.docId = `d${PDFDocumentLoadingTask.idCounters.doc++}`;\n\n    /**\n     * Whether the loading task is destroyed or not.\n     * @type {boolean}\n     */\n    this.destroyed = false;\n\n    /**\n     * Callback to request a password if a wrong or no password was provided.\n     * The callback receives two parameters: a function that should be called\n     * with the new password, and a reason (see {@link PasswordResponses}).\n     * @type {function}\n     */\n    this.onPassword = null;\n\n    /**\n     * Callback to be able to monitor the loading progress of the PDF file\n     * (necessary to implement e.g. a loading bar).\n     * The callback receives an {@link OnProgressParameters} argument.\n     * @type {function}\n     */\n    this.onProgress = null;\n\n    /**\n     * Callback for when an unsupported feature is used in the PDF document.\n     * The callback receives an {@link UNSUPPORTED_FEATURES} argument.\n     * @type {function}\n     */\n    this.onUnsupportedFeature = null;\n  }\n\n  /**\n   * Promise for document loading task completion.\n   * @type {Promise<PDFDocumentProxy>}\n   */\n  get promise() {\n    return this._capability.promise;\n  }\n\n  /**\n   * Abort all network requests and destroy the worker.\n   * @returns {Promise<void>} A promise that is resolved when destruction is\n   *   completed.\n   */\n  async destroy() {\n    this.destroyed = true;\n    await this._transport?.destroy();\n\n    this._transport = null;\n    if (this._worker) {\n      this._worker.destroy();\n      this._worker = null;\n    }\n  }\n}\n\n/**\n * Abstract class to support range requests file loading.\n */\nclass PDFDataRangeTransport {\n  /**\n   * @param {number} length\n   * @param {Uint8Array} initialData\n   * @param {boolean} [progressiveDone]\n   * @param {string} [contentDispositionFilename]\n   */\n  constructor(\n    length,\n    initialData,\n    progressiveDone = false,\n    contentDispositionFilename = null\n  ) {\n    this.length = length;\n    this.initialData = initialData;\n    this.progressiveDone = progressiveDone;\n    this.contentDispositionFilename = contentDispositionFilename;\n\n    this._rangeListeners = [];\n    this._progressListeners = [];\n    this._progressiveReadListeners = [];\n    this._progressiveDoneListeners = [];\n    this._readyCapability = createPromiseCapability();\n  }\n\n  addRangeListener(listener) {\n    this._rangeListeners.push(listener);\n  }\n\n  addProgressListener(listener) {\n    this._progressListeners.push(listener);\n  }\n\n  addProgressiveReadListener(listener) {\n    this._progressiveReadListeners.push(listener);\n  }\n\n  addProgressiveDoneListener(listener) {\n    this._progressiveDoneListeners.push(listener);\n  }\n\n  onDataRange(begin, chunk) {\n    for (const listener of this._rangeListeners) {\n      listener(begin, chunk);\n    }\n  }\n\n  onDataProgress(loaded, total) {\n    this._readyCapability.promise.then(() => {\n      for (const listener of this._progressListeners) {\n        listener(loaded, total);\n      }\n    });\n  }\n\n  onDataProgressiveRead(chunk) {\n    this._readyCapability.promise.then(() => {\n      for (const listener of this._progressiveReadListeners) {\n        listener(chunk);\n      }\n    });\n  }\n\n  onDataProgressiveDone() {\n    this._readyCapability.promise.then(() => {\n      for (const listener of this._progressiveDoneListeners) {\n        listener();\n      }\n    });\n  }\n\n  transportReady() {\n    this._readyCapability.resolve();\n  }\n\n  requestDataRange(begin, end) {\n    unreachable(\"Abstract method PDFDataRangeTransport.requestDataRange\");\n  }\n\n  abort() {}\n}\n\n/**\n * Proxy to a `PDFDocument` in the worker thread.\n */\nclass PDFDocumentProxy {\n  constructor(pdfInfo, transport) {\n    this._pdfInfo = pdfInfo;\n    this._transport = transport;\n\n    if (typeof PDFJSDev === \"undefined\" || PDFJSDev.test(\"GENERIC\")) {\n      Object.defineProperty(this, \"fingerprint\", {\n        get() {\n          deprecated(\n            \"`PDFDocumentProxy.fingerprint`, \" +\n              \"please use `PDFDocumentProxy.fingerprints` instead.\"\n          );\n          return this.fingerprints[0];\n        },\n      });\n\n      Object.defineProperty(this, \"getStats\", {\n        value: async () => {\n          deprecated(\n            \"`PDFDocumentProxy.getStats`, \" +\n              \"please use the `PDFDocumentProxy.stats`-getter instead.\"\n          );\n          return this.stats || { streamTypes: {}, fontTypes: {} };\n        },\n      });\n    }\n  }\n\n  /**\n   * @type {AnnotationStorage} Storage for annotation data in forms.\n   */\n  get annotationStorage() {\n    return this._transport.annotationStorage;\n  }\n\n  /**\n   * @type {number} Total number of pages in the PDF file.\n   */\n  get numPages() {\n    return this._pdfInfo.numPages;\n  }\n\n  /**\n   * @type {Array<string, string|null>} A (not guaranteed to be) unique ID to\n   *   identify the PDF document.\n   *   NOTE: The first element will always be defined for all PDF documents,\n   *   whereas the second element is only defined for *modified* PDF documents.\n   */\n  get fingerprints() {\n    return this._pdfInfo.fingerprints;\n  }\n\n  /**\n   * @typedef {Object} PDFDocumentStats\n   * @property {Object<string, boolean>} streamTypes - Used stream types in the\n   *   document (an item is set to true if specific stream ID was used in the\n   *   document).\n   * @property {Object<string, boolean>} fontTypes - Used font types in the\n   *   document (an item is set to true if specific font ID was used in the\n   *   document).\n   */\n\n  /**\n   * @type {PDFDocumentStats | null} The current statistics about document\n   *   structures, or `null` when no statistics exists.\n   */\n  get stats() {\n    return this._transport.stats;\n  }\n\n  /**\n   * @type {boolean} True if only XFA form.\n   */\n  get isPureXfa() {\n    return !!this._transport._htmlForXfa;\n  }\n\n  /**\n   * NOTE: This is (mostly) intended to support printing of XFA forms.\n   *\n   * @type {Object | null} An object representing a HTML tree structure\n   *   to render the XFA, or `null` when no XFA form exists.\n   */\n  get allXfaHtml() {\n    return this._transport._htmlForXfa;\n  }\n\n  /**\n   * @param {number} pageNumber - The page number to get. The first page is 1.\n   * @returns {Promise<PDFPageProxy>} A promise that is resolved with\n   *   a {@link PDFPageProxy} object.\n   */\n  getPage(pageNumber) {\n    return this._transport.getPage(pageNumber);\n  }\n\n  /**\n   * @param {RefProxy} ref - The page reference.\n   * @returns {Promise<number>} A promise that is resolved with the page index,\n   *   starting from zero, that is associated with the reference.\n   */\n  getPageIndex(ref) {\n    return this._transport.getPageIndex(ref);\n  }\n\n  /**\n   * @returns {Promise<Object<string, Array<any>>>} A promise that is resolved\n   *   with a mapping from named destinations to references.\n   *\n   * This can be slow for large documents. Use `getDestination` instead.\n   */\n  getDestinations() {\n    return this._transport.getDestinations();\n  }\n\n  /**\n   * @param {string} id - The named destination to get.\n   * @returns {Promise<Array<any> | null>} A promise that is resolved with all\n   *   information of the given named destination, or `null` when the named\n   *   destination is not present in the PDF file.\n   */\n  getDestination(id) {\n    return this._transport.getDestination(id);\n  }\n\n  /**\n   * @returns {Promise<Array<string> | null>} A promise that is resolved with\n   *   an {Array} containing the page labels that correspond to the page\n   *   indexes, or `null` when no page labels are present in the PDF file.\n   */\n  getPageLabels() {\n    return this._transport.getPageLabels();\n  }\n\n  /**\n   * @returns {Promise<string>} A promise that is resolved with a {string}\n   *   containing the page layout name.\n   */\n  getPageLayout() {\n    return this._transport.getPageLayout();\n  }\n\n  /**\n   * @returns {Promise<string>} A promise that is resolved with a {string}\n   *   containing the page mode name.\n   */\n  getPageMode() {\n    return this._transport.getPageMode();\n  }\n\n  /**\n   * @returns {Promise<Object | null>} A promise that is resolved with an\n   *   {Object} containing the viewer preferences, or `null` when no viewer\n   *   preferences are present in the PDF file.\n   */\n  getViewerPreferences() {\n    return this._transport.getViewerPreferences();\n  }\n\n  /**\n   * @returns {Promise<any | null>} A promise that is resolved with an {Array}\n   *   containing the destination, or `null` when no open action is present\n   *   in the PDF.\n   */\n  getOpenAction() {\n    return this._transport.getOpenAction();\n  }\n\n  /**\n   * @returns {Promise<any>} A promise that is resolved with a lookup table\n   *   for mapping named attachments to their content.\n   */\n  getAttachments() {\n    return this._transport.getAttachments();\n  }\n\n  /**\n   * @returns {Promise<Array<string> | null>} A promise that is resolved with\n   *   an {Array} of all the JavaScript strings in the name tree, or `null`\n   *   if no JavaScript exists.\n   */\n  getJavaScript() {\n    return this._transport.getJavaScript();\n  }\n\n  /**\n   * @returns {Promise<Object | null>} A promise that is resolved with\n   *   an {Object} with the JavaScript actions:\n   *     - from the name tree (like getJavaScript);\n   *     - from A or AA entries in the catalog dictionary.\n   *   , or `null` if no JavaScript exists.\n   */\n  getJSActions() {\n    return this._transport.getDocJSActions();\n  }\n\n  /**\n   * @typedef {Object} OutlineNode\n   * @property {string} title\n   * @property {boolean} bold\n   * @property {boolean} italic\n   * @property {Uint8ClampedArray} color - The color in RGB format to use for\n   *   display purposes.\n   * @property {string | Array<any> | null} dest\n   * @property {string | null} url\n   * @property {string | undefined} unsafeUrl\n   * @property {boolean | undefined} newWindow\n   * @property {number | undefined} count\n   * @property {Array<OutlineNode>} items\n   */\n\n  /**\n   * @returns {Promise<Array<OutlineNode>>} A promise that is resolved with an\n   *   {Array} that is a tree outline (if it has one) of the PDF file.\n   */\n  getOutline() {\n    return this._transport.getOutline();\n  }\n\n  /**\n   * @returns {Promise<OptionalContentConfig>} A promise that is resolved with\n   *   an {@link OptionalContentConfig} that contains all the optional content\n   *   groups (assuming that the document has any).\n   */\n  getOptionalContentConfig() {\n    return this._transport.getOptionalContentConfig();\n  }\n\n  /**\n   * @returns {Promise<Array<number> | null>} A promise that is resolved with\n   *   an {Array} that contains the permission flags for the PDF document, or\n   *   `null` when no permissions are present in the PDF file.\n   */\n  getPermissions() {\n    return this._transport.getPermissions();\n  }\n\n  /**\n   * @returns {Promise<{ info: Object, metadata: Metadata }>} A promise that is\n   *   resolved with an {Object} that has `info` and `metadata` properties.\n   *   `info` is an {Object} filled with anything available in the information\n   *   dictionary and similarly `metadata` is a {Metadata} object with\n   *   information from the metadata section of the PDF.\n   */\n  getMetadata() {\n    return this._transport.getMetadata();\n  }\n\n  /**\n   * @typedef {Object} MarkInfo\n   * Properties correspond to Table 321 of the PDF 32000-1:2008 spec.\n   * @property {boolean} Marked\n   * @property {boolean} UserProperties\n   * @property {boolean} Suspects\n   */\n\n  /**\n   * @returns {Promise<MarkInfo | null>} A promise that is resolved with\n   *   a {MarkInfo} object that contains the MarkInfo flags for the PDF\n   *   document, or `null` when no MarkInfo values are present in the PDF file.\n   */\n  getMarkInfo() {\n    return this._transport.getMarkInfo();\n  }\n\n  /**\n   * @returns {Promise<TypedArray>} A promise that is resolved with a\n   *   {TypedArray} that has the raw data from the PDF.\n   */\n  getData() {\n    return this._transport.getData();\n  }\n\n  /**\n   * @returns {Promise<{ length: number }>} A promise that is resolved when the\n   *   document's data is loaded. It is resolved with an {Object} that contains\n   *   the `length` property that indicates size of the PDF data in bytes.\n   */\n  getDownloadInfo() {\n    return this._transport.downloadInfoCapability.promise;\n  }\n\n  /**\n   * Cleans up resources allocated by the document on both the main and worker\n   * threads.\n   *\n   * NOTE: Do not, under any circumstances, call this method when rendering is\n   * currently ongoing since that may lead to rendering errors.\n   *\n   * @param {boolean} [keepLoadedFonts] - Let fonts remain attached to the DOM.\n   *   NOTE: This will increase persistent memory usage, hence don't use this\n   *   option unless absolutely necessary. The default value is `false`.\n   * @returns {Promise} A promise that is resolved when clean-up has finished.\n   */\n  cleanup(keepLoadedFonts = false) {\n    return this._transport.startCleanup(keepLoadedFonts || this.isPureXfa);\n  }\n\n  /**\n   * Destroys the current document instance and terminates the worker.\n   */\n  destroy() {\n    return this.loadingTask.destroy();\n  }\n\n  /**\n   * @type {DocumentInitParameters} A subset of the current\n   *   {DocumentInitParameters}, which are needed in the viewer.\n   */\n  get loadingParams() {\n    return this._transport.loadingParams;\n  }\n\n  /**\n   * @type {PDFDocumentLoadingTask} The loadingTask for the current document.\n   */\n  get loadingTask() {\n    return this._transport.loadingTask;\n  }\n\n  /**\n   * @returns {Promise<Uint8Array>} A promise that is resolved with a\n   *   {Uint8Array} containing the full data of the saved document.\n   */\n  saveDocument() {\n    if (\n      (typeof PDFJSDev === \"undefined\" || PDFJSDev.test(\"GENERIC\")) &&\n      this._transport.annotationStorage.size <= 0\n    ) {\n      deprecated(\n        \"saveDocument called while `annotationStorage` is empty, \" +\n          \"please use the getData-method instead.\"\n      );\n    }\n    return this._transport.saveDocument();\n  }\n\n  /**\n   * @returns {Promise<Object<string, Array<Object>> | null>} A promise that is\n   *   resolved with an {Object} containing /AcroForm field data for the JS\n   *   sandbox, or `null` when no field data is present in the PDF file.\n   */\n  getFieldObjects() {\n    return this._transport.getFieldObjects();\n  }\n\n  /**\n   * @returns {Promise<boolean>} A promise that is resolved with `true`\n   *   if some /AcroForm fields have JavaScript actions.\n   */\n  hasJSActions() {\n    return this._transport.hasJSActions();\n  }\n\n  /**\n   * @returns {Promise<Array<string> | null>} A promise that is resolved with an\n   *   {Array<string>} containing IDs of annotations that have a calculation\n   *   action, or `null` when no such annotations are present in the PDF file.\n   */\n  getCalculationOrderIds() {\n    return this._transport.getCalculationOrderIds();\n  }\n}\n\n/**\n * Page getViewport parameters.\n *\n * @typedef {Object} GetViewportParameters\n * @property {number} scale - The desired scale of the viewport.\n * @property {number} [rotation] - The desired rotation, in degrees, of\n *   the viewport. If omitted it defaults to the page rotation.\n * @property {number} [offsetX] - The horizontal, i.e. x-axis, offset.\n *   The default value is `0`.\n * @property {number} [offsetY] - The vertical, i.e. y-axis, offset.\n *   The default value is `0`.\n * @property {boolean} [dontFlip] - If true, the y-axis will not be\n *   flipped. The default value is `false`.\n */\n\n/**\n * Page getTextContent parameters.\n *\n * @typedef {Object} getTextContentParameters\n * @property {boolean} normalizeWhitespace - Replaces all occurrences of\n *   whitespace with standard spaces (0x20). The default value is `false`.\n * @property {boolean} disableCombineTextItems - Do not attempt to combine\n *   same line {@link TextItem}'s. The default value is `false`.\n * @property {boolean} [includeMarkedContent] - When true include marked\n *   content items in the items array of TextContent. The default is `false`.\n */\n\n/**\n * Page text content.\n *\n * @typedef {Object} TextContent\n * @property {Array<TextItem | TextMarkedContent>} items - Array of\n *   {@link TextItem} and {@link TextMarkedContent} objects. TextMarkedContent\n *   items are included when includeMarkedContent is true.\n * @property {Object<string, TextStyle>} styles - {@link TextStyle} objects,\n *   indexed by font name.\n */\n\n/**\n * Page text content part.\n *\n * @typedef {Object} TextItem\n * @property {string} str - Text content.\n * @property {string} dir - Text direction: 'ttb', 'ltr' or 'rtl'.\n * @property {Array<any>} transform - Transformation matrix.\n * @property {number} width - Width in device space.\n * @property {number} height - Height in device space.\n * @property {string} fontName - Font name used by PDF.js for converted font.\n * @property {boolean} hasEOL - Indicating if the text content is followed by a\n *   line-break.\n */\n\n/**\n * Page text marked content part.\n *\n * @typedef {Object} TextMarkedContent\n * @property {string} type - Either 'beginMarkedContent',\n *   'beginMarkedContentProps', or 'endMarkedContent'.\n * @property {string} id - The marked content identifier. Only used for type\n *   'beginMarkedContentProps'.\n */\n\n/**\n * Text style.\n *\n * @typedef {Object} TextStyle\n * @property {number} ascent - Font ascent.\n * @property {number} descent - Font descent.\n * @property {boolean} vertical - Whether or not the text is in vertical mode.\n * @property {string} fontFamily - The possible font family.\n */\n\n/**\n * Page annotation parameters.\n *\n * @typedef {Object} GetAnnotationsParameters\n * @property {string} [intent] - Determines the annotations that are fetched,\n *   can be 'display' (viewable annotations), 'print' (printable annotations),\n *   or 'any' (all annotations). The default value is 'display'.\n */\n\n/**\n * Page render parameters.\n *\n * @typedef {Object} RenderParameters\n * @property {Object} canvasContext - A 2D context of a DOM Canvas object.\n * @property {PageViewport} viewport - Rendering viewport obtained by calling\n *   the `PDFPageProxy.getViewport` method.\n * @property {string} [intent] - Rendering intent, can be 'display', 'print',\n *   or 'any'. The default value is 'display'.\n * @property {number} [annotationMode] Controls which annotations are rendered\n *   onto the canvas, for annotations with appearance-data; the values from\n *   {@link AnnotationMode} should be used. The following values are supported:\n *    - `AnnotationMode.DISABLE`, which disables all annotations.\n *    - `AnnotationMode.ENABLE`, which includes all possible annotations (thus\n *      it also depends on the `intent`-option, see above).\n *    - `AnnotationMode.ENABLE_FORMS`, which excludes annotations that contain\n *      interactive form elements (those will be rendered in the display layer).\n *    - `AnnotationMode.ENABLE_STORAGE`, which includes all possible annotations\n *      (as above) but where interactive form elements are updated with data\n *      from the {@link AnnotationStorage}-instance; useful e.g. for printing.\n *   The default value is `AnnotationMode.ENABLE`.\n * @property {Array<any>} [transform] - Additional transform, applied just\n *   before viewport transform.\n * @property {Object} [imageLayer] - An object that has `beginLayout`,\n *   `endLayout` and `appendImage` functions.\n * @property {Object} [canvasFactory] - The factory instance that will be used\n *   when creating canvases. The default value is {new DOMCanvasFactory()}.\n * @property {Object | string} [background] - Background to use for the canvas.\n *   Any valid `canvas.fillStyle` can be used: a `DOMString` parsed as CSS\n *   <color> value, a `CanvasGradient` object (a linear or radial gradient) or\n *   a `CanvasPattern` object (a repetitive image). The default value is\n *   'rgb(255,255,255)'.\n * @property {Promise<OptionalContentConfig>} [optionalContentConfigPromise] -\n *   A promise that should resolve with an {@link OptionalContentConfig}\n *   created from `PDFDocumentProxy.getOptionalContentConfig`. If `null`,\n *   the configuration will be fetched automatically with the default visibility\n *   states set.\n * @property {Map<string, HTMLCanvasElement>} [annotationCanvasMap] - Map some\n *   annotation ids with canvases used to render them.\n */\n\n/**\n * Page getOperatorList parameters.\n *\n * @typedef {Object} GetOperatorListParameters\n * @property {string} [intent] - Rendering intent, can be 'display', 'print',\n *   or 'any'. The default value is 'display'.\n * @property {number} [annotationMode] Controls which annotations are included\n *   in the operatorList, for annotations with appearance-data; the values from\n *   {@link AnnotationMode} should be used. The following values are supported:\n *    - `AnnotationMode.DISABLE`, which disables all annotations.\n *    - `AnnotationMode.ENABLE`, which includes all possible annotations (thus\n *      it also depends on the `intent`-option, see above).\n *    - `AnnotationMode.ENABLE_FORMS`, which excludes annotations that contain\n *      interactive form elements (those will be rendered in the display layer).\n *    - `AnnotationMode.ENABLE_STORAGE`, which includes all possible annotations\n *      (as above) but where interactive form elements are updated with data\n *      from the {@link AnnotationStorage}-instance; useful e.g. for printing.\n *   The default value is `AnnotationMode.ENABLE`.\n */\n\n/**\n * Structure tree node. The root node will have a role \"Root\".\n *\n * @typedef {Object} StructTreeNode\n * @property {Array<StructTreeNode | StructTreeContent>} children - Array of\n *   {@link StructTreeNode} and {@link StructTreeContent} objects.\n * @property {string} role - element's role, already mapped if a role map exists\n * in the PDF.\n */\n\n/**\n * Structure tree content.\n *\n * @typedef {Object} StructTreeContent\n * @property {string} type - either \"content\" for page and stream structure\n *   elements or \"object\" for object references.\n * @property {string} id - unique id that will map to the text layer.\n */\n\n/**\n * PDF page operator list.\n *\n * @typedef {Object} PDFOperatorList\n * @property {Array<number>} fnArray - Array containing the operator functions.\n * @property {Array<any>} argsArray - Array containing the arguments of the\n *   functions.\n */\n\n/**\n * Proxy to a `PDFPage` in the worker thread.\n */\nclass PDFPageProxy {\n  constructor(pageIndex, pageInfo, transport, ownerDocument, pdfBug = false) {\n    this._pageIndex = pageIndex;\n    this._pageInfo = pageInfo;\n    this._ownerDocument = ownerDocument;\n    this._transport = transport;\n    this._stats = pdfBug ? new StatTimer() : null;\n    this._pdfBug = pdfBug;\n    this.commonObjs = transport.commonObjs;\n    this.objs = new PDFObjects();\n\n    this.cleanupAfterRender = false;\n    this.pendingCleanup = false;\n    this._intentStates = new Map();\n    this._annotationPromises = new Map();\n    this.destroyed = false;\n  }\n\n  /**\n   * @type {number} Page number of the page. First page is 1.\n   */\n  get pageNumber() {\n    return this._pageIndex + 1;\n  }\n\n  /**\n   * @type {number} The number of degrees the page is rotated clockwise.\n   */\n  get rotate() {\n    return this._pageInfo.rotate;\n  }\n\n  /**\n   * @type {RefProxy | null} The reference that points to this page.\n   */\n  get ref() {\n    return this._pageInfo.ref;\n  }\n\n  /**\n   * @type {number} The default size of units in 1/72nds of an inch.\n   */\n  get userUnit() {\n    return this._pageInfo.userUnit;\n  }\n\n  /**\n   * @type {Array<number>} An array of the visible portion of the PDF page in\n   *   user space units [x1, y1, x2, y2].\n   */\n  get view() {\n    return this._pageInfo.view;\n  }\n\n  /**\n   * @param {GetViewportParameters} params - Viewport parameters.\n   * @returns {PageViewport} Contains 'width' and 'height' properties\n   *   along with transforms required for rendering.\n   */\n  getViewport({\n    scale,\n    rotation = this.rotate,\n    offsetX = 0,\n    offsetY = 0,\n    dontFlip = false,\n  } = {}) {\n    return new PageViewport({\n      viewBox: this.view,\n      scale,\n      rotation,\n      offsetX,\n      offsetY,\n      dontFlip,\n    });\n  }\n\n  /**\n   * @param {GetAnnotationsParameters} params - Annotation parameters.\n   * @returns {Promise<Array<any>>} A promise that is resolved with an\n   *   {Array} of the annotation objects.\n   */\n  getAnnotations({ intent = \"display\" } = {}) {\n    const intentArgs = this._transport.getRenderingIntent(intent);\n\n    let promise = this._annotationPromises.get(intentArgs.cacheKey);\n    if (!promise) {\n      promise = this._transport.getAnnotations(\n        this._pageIndex,\n        intentArgs.renderingIntent\n      );\n      this._annotationPromises.set(intentArgs.cacheKey, promise);\n\n      if (typeof PDFJSDev === \"undefined\" || PDFJSDev.test(\"GENERIC\")) {\n        promise = promise.then(annotations => {\n          for (const annotation of annotations) {\n            if (annotation.titleObj !== undefined) {\n              Object.defineProperty(annotation, \"title\", {\n                get() {\n                  deprecated(\n                    \"`title`-property on annotation, please use `titleObj` instead.\"\n                  );\n                  return annotation.titleObj.str;\n                },\n              });\n            }\n            if (annotation.contentsObj !== undefined) {\n              Object.defineProperty(annotation, \"contents\", {\n                get() {\n                  deprecated(\n                    \"`contents`-property on annotation, please use `contentsObj` instead.\"\n                  );\n                  return annotation.contentsObj.str;\n                },\n              });\n            }\n          }\n          return annotations;\n        });\n      }\n    }\n    return promise;\n  }\n\n  /**\n   * @returns {Promise<Object>} A promise that is resolved with an\n   *   {Object} with JS actions.\n   */\n  getJSActions() {\n    return (this._jsActionsPromise ||= this._transport.getPageJSActions(\n      this._pageIndex\n    ));\n  }\n\n  /**\n   * @returns {Promise<Object | null>} A promise that is resolved with\n   *   an {Object} with a fake DOM object (a tree structure where elements\n   *   are {Object} with a name, attributes (class, style, ...), value and\n   *   children, very similar to a HTML DOM tree), or `null` if no XFA exists.\n   */\n  async getXfa() {\n    return this._transport._htmlForXfa?.children[this._pageIndex] || null;\n  }\n\n  /**\n   * Begins the process of rendering a page to the desired context.\n   *\n   * @param {RenderParameters} params - Page render parameters.\n   * @returns {RenderTask} An object that contains a promise that is\n   *   resolved when the page finishes rendering.\n   */\n  render({\n    canvasContext,\n    viewport,\n    intent = \"display\",\n    annotationMode = AnnotationMode.ENABLE,\n    transform = null,\n    imageLayer = null,\n    canvasFactory = null,\n    background = null,\n    optionalContentConfigPromise = null,\n    annotationCanvasMap = null,\n  }) {\n    if (typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"GENERIC\")) {\n      if (arguments[0]?.renderInteractiveForms !== undefined) {\n        deprecated(\n          \"render no longer accepts the `renderInteractiveForms`-option, \" +\n            \"please use the `annotationMode`-option instead.\"\n        );\n        if (\n          arguments[0].renderInteractiveForms === true &&\n          annotationMode === AnnotationMode.ENABLE\n        ) {\n          annotationMode = AnnotationMode.ENABLE_FORMS;\n        }\n      }\n      if (arguments[0]?.includeAnnotationStorage !== undefined) {\n        deprecated(\n          \"render no longer accepts the `includeAnnotationStorage`-option, \" +\n            \"please use the `annotationMode`-option instead.\"\n        );\n        if (\n          arguments[0].includeAnnotationStorage === true &&\n          annotationMode === AnnotationMode.ENABLE\n        ) {\n          annotationMode = AnnotationMode.ENABLE_STORAGE;\n        }\n      }\n    }\n\n    if (this._stats) {\n      this._stats.time(\"Overall\");\n    }\n\n    const intentArgs = this._transport.getRenderingIntent(\n      intent,\n      annotationMode\n    );\n    // If there was a pending destroy, cancel it so no cleanup happens during\n    // this call to render.\n    this.pendingCleanup = false;\n\n    if (!optionalContentConfigPromise) {\n      optionalContentConfigPromise = this._transport.getOptionalContentConfig();\n    }\n\n    let intentState = this._intentStates.get(intentArgs.cacheKey);\n    if (!intentState) {\n      intentState = Object.create(null);\n      this._intentStates.set(intentArgs.cacheKey, intentState);\n    }\n\n    // Ensure that a pending `streamReader` cancel timeout is always aborted.\n    if (intentState.streamReaderCancelTimeout) {\n      clearTimeout(intentState.streamReaderCancelTimeout);\n      intentState.streamReaderCancelTimeout = null;\n    }\n\n    const canvasFactoryInstance =\n      canvasFactory ||\n      new DefaultCanvasFactory({ ownerDocument: this._ownerDocument });\n    const intentPrint = !!(\n      intentArgs.renderingIntent & RenderingIntentFlag.PRINT\n    );\n\n    // If there's no displayReadyCapability yet, then the operatorList\n    // was never requested before. Make the request and create the promise.\n    if (!intentState.displayReadyCapability) {\n      intentState.displayReadyCapability = createPromiseCapability();\n      intentState.operatorList = {\n        fnArray: [],\n        argsArray: [],\n        lastChunk: false,\n      };\n\n      if (this._stats) {\n        this._stats.time(\"Page Request\");\n      }\n      this._pumpOperatorList(intentArgs);\n    }\n\n    const complete = error => {\n      intentState.renderTasks.delete(internalRenderTask);\n\n      // Attempt to reduce memory usage during *printing*, by always running\n      // cleanup once rendering has finished (regardless of cleanupAfterRender).\n      if (this.cleanupAfterRender || intentPrint) {\n        this.pendingCleanup = true;\n      }\n      this._tryCleanup();\n\n      if (error) {\n        internalRenderTask.capability.reject(error);\n\n        this._abortOperatorList({\n          intentState,\n          reason: error instanceof Error ? error : new Error(error),\n        });\n      } else {\n        internalRenderTask.capability.resolve();\n      }\n      if (this._stats) {\n        this._stats.timeEnd(\"Rendering\");\n        this._stats.timeEnd(\"Overall\");\n      }\n    };\n\n    const internalRenderTask = new InternalRenderTask({\n      callback: complete,\n      // Only include the required properties, and *not* the entire object.\n      params: {\n        canvasContext,\n        viewport,\n        transform,\n        imageLayer,\n        background,\n      },\n      objs: this.objs,\n      commonObjs: this.commonObjs,\n      annotationCanvasMap,\n      operatorList: intentState.operatorList,\n      pageIndex: this._pageIndex,\n      canvasFactory: canvasFactoryInstance,\n      useRequestAnimationFrame: !intentPrint,\n      pdfBug: this._pdfBug,\n    });\n\n    (intentState.renderTasks ||= new Set()).add(internalRenderTask);\n    const renderTask = internalRenderTask.task;\n\n    Promise.all([\n      intentState.displayReadyCapability.promise,\n      optionalContentConfigPromise,\n    ])\n      .then(([transparency, optionalContentConfig]) => {\n        if (this.pendingCleanup) {\n          complete();\n          return;\n        }\n        if (this._stats) {\n          this._stats.time(\"Rendering\");\n        }\n        internalRenderTask.initializeGraphics({\n          transparency,\n          optionalContentConfig,\n        });\n        internalRenderTask.operatorListChanged();\n      })\n      .catch(complete);\n\n    return renderTask;\n  }\n\n  /**\n   * @param {GetOperatorListParameters} params - Page getOperatorList\n   *   parameters.\n   * @returns {Promise<PDFOperatorList>} A promise resolved with an\n   *   {@link PDFOperatorList} object that represents the page's operator list.\n   */\n  getOperatorList({\n    intent = \"display\",\n    annotationMode = AnnotationMode.ENABLE,\n  } = {}) {\n    function operatorListChanged() {\n      if (intentState.operatorList.lastChunk) {\n        intentState.opListReadCapability.resolve(intentState.operatorList);\n\n        intentState.renderTasks.delete(opListTask);\n      }\n    }\n\n    const intentArgs = this._transport.getRenderingIntent(\n      intent,\n      annotationMode,\n      /* isOpList = */ true\n    );\n    let intentState = this._intentStates.get(intentArgs.cacheKey);\n    if (!intentState) {\n      intentState = Object.create(null);\n      this._intentStates.set(intentArgs.cacheKey, intentState);\n    }\n    let opListTask;\n\n    if (!intentState.opListReadCapability) {\n      opListTask = Object.create(null);\n      opListTask.operatorListChanged = operatorListChanged;\n      intentState.opListReadCapability = createPromiseCapability();\n      (intentState.renderTasks ||= new Set()).add(opListTask);\n      intentState.operatorList = {\n        fnArray: [],\n        argsArray: [],\n        lastChunk: false,\n      };\n\n      if (this._stats) {\n        this._stats.time(\"Page Request\");\n      }\n      this._pumpOperatorList(intentArgs);\n    }\n    return intentState.opListReadCapability.promise;\n  }\n\n  /**\n   * @param {getTextContentParameters} params - getTextContent parameters.\n   * @returns {ReadableStream} Stream for reading text content chunks.\n   */\n  streamTextContent({\n    normalizeWhitespace = false,\n    disableCombineTextItems = false,\n    includeMarkedContent = false,\n  } = {}) {\n    const TEXT_CONTENT_CHUNK_SIZE = 100;\n\n    return this._transport.messageHandler.sendWithStream(\n      \"GetTextContent\",\n      {\n        pageIndex: this._pageIndex,\n        normalizeWhitespace: normalizeWhitespace === true,\n        combineTextItems: disableCombineTextItems !== true,\n        includeMarkedContent: includeMarkedContent === true,\n      },\n      {\n        highWaterMark: TEXT_CONTENT_CHUNK_SIZE,\n        size(textContent) {\n          return textContent.items.length;\n        },\n      }\n    );\n  }\n\n  /**\n   * @param {getTextContentParameters} params - getTextContent parameters.\n   * @returns {Promise<TextContent>} A promise that is resolved with a\n   *   {@link TextContent} object that represents the page's text content.\n   */\n  getTextContent(params = {}) {\n    if (this._transport._htmlForXfa) {\n      // TODO: We need to revisit this once the XFA foreground patch lands and\n      // only do this for non-foreground XFA.\n      return this.getXfa().then(xfa => {\n        return XfaText.textContent(xfa);\n      });\n    }\n    const readableStream = this.streamTextContent(params);\n\n    return new Promise(function (resolve, reject) {\n      function pump() {\n        reader.read().then(function ({ value, done }) {\n          if (done) {\n            resolve(textContent);\n            return;\n          }\n          Object.assign(textContent.styles, value.styles);\n          textContent.items.push(...value.items);\n          pump();\n        }, reject);\n      }\n\n      const reader = readableStream.getReader();\n      const textContent = {\n        items: [],\n        styles: Object.create(null),\n      };\n      pump();\n    });\n  }\n\n  /**\n   * @returns {Promise<StructTreeNode>} A promise that is resolved with a\n   *   {@link StructTreeNode} object that represents the page's structure tree,\n   *   or `null` when no structure tree is present for the current page.\n   */\n  getStructTree() {\n    return (this._structTreePromise ||= this._transport.getStructTree(\n      this._pageIndex\n    ));\n  }\n\n  /**\n   * Destroys the page object.\n   * @private\n   */\n  _destroy() {\n    this.destroyed = true;\n\n    const waitOn = [];\n    for (const intentState of this._intentStates.values()) {\n      this._abortOperatorList({\n        intentState,\n        reason: new Error(\"Page was destroyed.\"),\n        force: true,\n      });\n\n      if (intentState.opListReadCapability) {\n        // Avoid errors below, since the renderTasks are just stubs.\n        continue;\n      }\n      for (const internalRenderTask of intentState.renderTasks) {\n        waitOn.push(internalRenderTask.completed);\n        internalRenderTask.cancel();\n      }\n    }\n    this.objs.clear();\n    this._annotationPromises.clear();\n    this._jsActionsPromise = null;\n    this._structTreePromise = null;\n    this.pendingCleanup = false;\n    return Promise.all(waitOn);\n  }\n\n  /**\n   * Cleans up resources allocated by the page.\n   *\n   * @param {boolean} [resetStats] - Reset page stats, if enabled.\n   *   The default value is `false`.\n   * @returns {boolean} Indicates if clean-up was successfully run.\n   */\n  cleanup(resetStats = false) {\n    this.pendingCleanup = true;\n    return this._tryCleanup(resetStats);\n  }\n\n  /**\n   * Attempts to clean up if rendering is in a state where that's possible.\n   * @private\n   */\n  _tryCleanup(resetStats = false) {\n    if (!this.pendingCleanup) {\n      return false;\n    }\n    for (const { renderTasks, operatorList } of this._intentStates.values()) {\n      if (renderTasks.size > 0 || !operatorList.lastChunk) {\n        return false;\n      }\n    }\n\n    this._intentStates.clear();\n    this.objs.clear();\n    this._annotationPromises.clear();\n    this._jsActionsPromise = null;\n    this._structTreePromise = null;\n    if (resetStats && this._stats) {\n      this._stats = new StatTimer();\n    }\n    this.pendingCleanup = false;\n    return true;\n  }\n\n  /**\n   * @private\n   */\n  _startRenderPage(transparency, cacheKey) {\n    const intentState = this._intentStates.get(cacheKey);\n    if (!intentState) {\n      return; // Rendering was cancelled.\n    }\n    if (this._stats) {\n      this._stats.timeEnd(\"Page Request\");\n    }\n    // TODO Refactor RenderPageRequest to separate rendering\n    // and operator list logic\n    if (intentState.displayReadyCapability) {\n      intentState.displayReadyCapability.resolve(transparency);\n    }\n  }\n\n  /**\n   * @private\n   */\n  _renderPageChunk(operatorListChunk, intentState) {\n    // Add the new chunk to the current operator list.\n    for (let i = 0, ii = operatorListChunk.length; i < ii; i++) {\n      intentState.operatorList.fnArray.push(operatorListChunk.fnArray[i]);\n      intentState.operatorList.argsArray.push(operatorListChunk.argsArray[i]);\n    }\n    intentState.operatorList.lastChunk = operatorListChunk.lastChunk;\n\n    // Notify all the rendering tasks there are more operators to be consumed.\n    for (const internalRenderTask of intentState.renderTasks) {\n      internalRenderTask.operatorListChanged();\n    }\n\n    if (operatorListChunk.lastChunk) {\n      this._tryCleanup();\n    }\n  }\n\n  /**\n   * @private\n   */\n  _pumpOperatorList({ renderingIntent, cacheKey }) {\n    if (\n      typeof PDFJSDev === \"undefined\" ||\n      PDFJSDev.test(\"!PRODUCTION || TESTING\")\n    ) {\n      assert(\n        Number.isInteger(renderingIntent) && renderingIntent > 0,\n        '_pumpOperatorList: Expected valid \"renderingIntent\" argument.'\n      );\n    }\n\n    const readableStream = this._transport.messageHandler.sendWithStream(\n      \"GetOperatorList\",\n      {\n        pageIndex: this._pageIndex,\n        intent: renderingIntent,\n        cacheKey,\n        annotationStorage:\n          renderingIntent & RenderingIntentFlag.ANNOTATIONS_STORAGE\n            ? this._transport.annotationStorage.serializable\n            : null,\n      }\n    );\n    const reader = readableStream.getReader();\n\n    const intentState = this._intentStates.get(cacheKey);\n    intentState.streamReader = reader;\n\n    const pump = () => {\n      reader.read().then(\n        ({ value, done }) => {\n          if (done) {\n            intentState.streamReader = null;\n            return;\n          }\n          if (this._transport.destroyed) {\n            return; // Ignore any pending requests if the worker was terminated.\n          }\n          this._renderPageChunk(value, intentState);\n          pump();\n        },\n        reason => {\n          intentState.streamReader = null;\n\n          if (this._transport.destroyed) {\n            return; // Ignore any pending requests if the worker was terminated.\n          }\n          if (intentState.operatorList) {\n            // Mark operator list as complete.\n            intentState.operatorList.lastChunk = true;\n\n            for (const internalRenderTask of intentState.renderTasks) {\n              internalRenderTask.operatorListChanged();\n            }\n            this._tryCleanup();\n          }\n\n          if (intentState.displayReadyCapability) {\n            intentState.displayReadyCapability.reject(reason);\n          } else if (intentState.opListReadCapability) {\n            intentState.opListReadCapability.reject(reason);\n          } else {\n            throw reason;\n          }\n        }\n      );\n    };\n    pump();\n  }\n\n  /**\n   * @private\n   */\n  _abortOperatorList({ intentState, reason, force = false }) {\n    if (\n      typeof PDFJSDev === \"undefined\" ||\n      PDFJSDev.test(\"!PRODUCTION || TESTING\")\n    ) {\n      assert(\n        reason instanceof Error,\n        '_abortOperatorList: Expected valid \"reason\" argument.'\n      );\n    }\n\n    if (!intentState.streamReader) {\n      return;\n    }\n    if (!force) {\n      // Ensure that an Error occurring in *only* one `InternalRenderTask`, e.g.\n      // multiple render() calls on the same canvas, won't break all rendering.\n      if (intentState.renderTasks.size > 0) {\n        return;\n      }\n      // Don't immediately abort parsing on the worker-thread when rendering is\n      // cancelled, since that will unnecessarily delay re-rendering when (for\n      // partially parsed pages) e.g. zooming/rotation occurs in the viewer.\n      if (reason instanceof RenderingCancelledException) {\n        intentState.streamReaderCancelTimeout = setTimeout(() => {\n          this._abortOperatorList({ intentState, reason, force: true });\n          intentState.streamReaderCancelTimeout = null;\n        }, RENDERING_CANCELLED_TIMEOUT);\n        return;\n      }\n    }\n    intentState.streamReader\n      .cancel(new AbortException(reason.message))\n      .catch(() => {\n        // Avoid \"Uncaught promise\" messages in the console.\n      });\n    intentState.streamReader = null;\n\n    if (this._transport.destroyed) {\n      return; // Ignore any pending requests if the worker was terminated.\n    }\n    // Remove the current `intentState`, since a cancelled `getOperatorList`\n    // call on the worker-thread cannot be re-started...\n    for (const [curCacheKey, curIntentState] of this._intentStates) {\n      if (curIntentState === intentState) {\n        this._intentStates.delete(curCacheKey);\n        break;\n      }\n    }\n    // ... and force clean-up to ensure that any old state is always removed.\n    this.cleanup();\n  }\n\n  /**\n   * @type {Object} Returns page stats, if enabled; returns `null` otherwise.\n   */\n  get stats() {\n    return this._stats;\n  }\n}\n\nclass LoopbackPort {\n  constructor() {\n    this._listeners = [];\n    this._deferred = Promise.resolve();\n  }\n\n  postMessage(obj, transfers) {\n    function cloneValue(object) {\n      if (\n        (typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"MOZCENTRAL\")) ||\n        globalThis.structuredClone\n      ) {\n        return globalThis.structuredClone(object, transfers);\n      }\n\n      // Trying to perform a structured clone close to the spec, including\n      // transfers.\n      function fallbackCloneValue(value) {\n        if (\n          typeof value === \"function\" ||\n          typeof value === \"symbol\" ||\n          value instanceof URL\n        ) {\n          throw new Error(\n            `LoopbackPort.postMessage - cannot clone: ${value?.toString()}`\n          );\n        }\n\n        if (typeof value !== \"object\" || value === null) {\n          return value;\n        }\n        if (cloned.has(value)) {\n          // already cloned the object\n          return cloned.get(value);\n        }\n        let buffer, result;\n        if ((buffer = value.buffer) && isArrayBuffer(buffer)) {\n          // We found object with ArrayBuffer (typed array).\n          if (transfers?.includes(buffer)) {\n            result = new value.constructor(\n              buffer,\n              value.byteOffset,\n              value.byteLength\n            );\n          } else {\n            result = new value.constructor(value);\n          }\n          cloned.set(value, result);\n          return result;\n        }\n        if (value instanceof Map) {\n          result = new Map();\n          cloned.set(value, result); // Adding to cache now for cyclic references.\n          for (const [key, val] of value) {\n            result.set(key, fallbackCloneValue(val));\n          }\n          return result;\n        }\n        if (value instanceof Set) {\n          result = new Set();\n          cloned.set(value, result); // Adding to cache now for cyclic references.\n          for (const val of value) {\n            result.add(fallbackCloneValue(val));\n          }\n          return result;\n        }\n        result = Array.isArray(value) ? [] : Object.create(null);\n        cloned.set(value, result); // Adding to cache now for cyclic references.\n        // Cloning all value and object properties, however ignoring properties\n        // defined via getter.\n        for (const i in value) {\n          let desc,\n            p = value;\n          while (!(desc = Object.getOwnPropertyDescriptor(p, i))) {\n            p = Object.getPrototypeOf(p);\n          }\n          if (typeof desc.value === \"undefined\") {\n            continue;\n          }\n          if (typeof desc.value === \"function\" && !value.hasOwnProperty?.(i)) {\n            continue;\n          }\n          result[i] = fallbackCloneValue(desc.value);\n        }\n        return result;\n      }\n\n      const cloned = new WeakMap();\n      return fallbackCloneValue(object);\n    }\n\n    const event = { data: cloneValue(obj) };\n\n    this._deferred.then(() => {\n      for (const listener of this._listeners) {\n        listener.call(this, event);\n      }\n    });\n  }\n\n  addEventListener(name, listener) {\n    this._listeners.push(listener);\n  }\n\n  removeEventListener(name, listener) {\n    const i = this._listeners.indexOf(listener);\n    this._listeners.splice(i, 1);\n  }\n\n  terminate() {\n    this._listeners.length = 0;\n  }\n}\n\n/**\n * @typedef {Object} PDFWorkerParameters\n * @property {string} [name] - The name of the worker.\n * @property {Object} [port] - The `workerPort` object.\n * @property {number} [verbosity] - Controls the logging level;\n *   the constants from {@link VerbosityLevel} should be used.\n */\n\nconst PDFWorkerUtil = {\n  isWorkerDisabled: false,\n  fallbackWorkerSrc: null,\n  fakeWorkerId: 0,\n};\nif (typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"GENERIC\")) {\n  // eslint-disable-next-line no-undef\n  if (isNodeJS && typeof __non_webpack_require__ === \"function\") {\n    // Workers aren't supported in Node.js, force-disabling them there.\n    PDFWorkerUtil.isWorkerDisabled = true;\n\n    PDFWorkerUtil.fallbackWorkerSrc = PDFJSDev.test(\"LIB\")\n      ? \"../pdf.worker.js\"\n      : \"./pdf.worker.js\";\n  } else if (typeof document === \"object\") {\n    const pdfjsFilePath = document?.currentScript?.src;\n    if (pdfjsFilePath) {\n      PDFWorkerUtil.fallbackWorkerSrc = pdfjsFilePath.replace(\n        /(\\.(?:min\\.)?js)(\\?.*)?$/i,\n        \".worker$1$2\"\n      );\n    }\n  }\n\n  PDFWorkerUtil.createCDNWrapper = function (url) {\n    // We will rely on blob URL's property to specify origin.\n    // We want this function to fail in case if createObjectURL or Blob do not\n    // exist or fail for some reason -- our Worker creation will fail anyway.\n    const wrapper = `importScripts(\"${url}\");`;\n    return URL.createObjectURL(new Blob([wrapper]));\n  };\n}\n\n/**\n * PDF.js web worker abstraction that controls the instantiation of PDF\n * documents. Message handlers are used to pass information from the main\n * thread to the worker thread and vice versa. If the creation of a web\n * worker is not possible, a \"fake\" worker will be used instead.\n *\n * @param {PDFWorkerParameters} params - The worker initialization parameters.\n */\nclass PDFWorker {\n  static get _workerPorts() {\n    return shadow(this, \"_workerPorts\", new WeakMap());\n  }\n\n  constructor({\n    name = null,\n    port = null,\n    verbosity = getVerbosityLevel(),\n  } = {}) {\n    if (port && PDFWorker._workerPorts.has(port)) {\n      throw new Error(\"Cannot use more than one PDFWorker per port.\");\n    }\n\n    this.name = name;\n    this.destroyed = false;\n    this.verbosity = verbosity;\n\n    this._readyCapability = createPromiseCapability();\n    this._port = null;\n    this._webWorker = null;\n    this._messageHandler = null;\n\n    if (port) {\n      PDFWorker._workerPorts.set(port, this);\n      this._initializeFromPort(port);\n      return;\n    }\n    this._initialize();\n  }\n\n  /**\n   * Promise for worker initialization completion.\n   * @type {Promise<void>}\n   */\n  get promise() {\n    return this._readyCapability.promise;\n  }\n\n  /**\n   * The current `workerPort`, when it exists.\n   * @type {Worker}\n   */\n  get port() {\n    return this._port;\n  }\n\n  /**\n   * The current MessageHandler-instance.\n   * @type {MessageHandler}\n   */\n  get messageHandler() {\n    return this._messageHandler;\n  }\n\n  _initializeFromPort(port) {\n    this._port = port;\n    this._messageHandler = new MessageHandler(\"main\", \"worker\", port);\n    this._messageHandler.on(\"ready\", function () {\n      // Ignoring \"ready\" event -- MessageHandler should already be initialized\n      // and ready to accept messages.\n    });\n    this._readyCapability.resolve();\n  }\n\n  _initialize() {\n    // If worker support isn't disabled explicit and the browser has worker\n    // support, create a new web worker and test if it/the browser fulfills\n    // all requirements to run parts of pdf.js in a web worker.\n    // Right now, the requirement is, that an Uint8Array is still an\n    // Uint8Array as it arrives on the worker. (Chrome added this with v.15.)\n    if (\n      typeof Worker !== \"undefined\" &&\n      !PDFWorkerUtil.isWorkerDisabled &&\n      !PDFWorker._mainThreadWorkerMessageHandler\n    ) {\n      let workerSrc = PDFWorker.workerSrc;\n\n      try {\n        // Wraps workerSrc path into blob URL, if the former does not belong\n        // to the same origin.\n        if (\n          typeof PDFJSDev !== \"undefined\" &&\n          PDFJSDev.test(\"GENERIC\") &&\n          !isSameOrigin(window.location.href, workerSrc)\n        ) {\n          workerSrc = PDFWorkerUtil.createCDNWrapper(\n            new URL(workerSrc, window.location).href\n          );\n        }\n\n        // Some versions of FF can't create a worker on localhost, see:\n        // https://bugzilla.mozilla.org/show_bug.cgi?id=683280\n        const worker = new Worker(workerSrc);\n        const messageHandler = new MessageHandler(\"main\", \"worker\", worker);\n        const terminateEarly = () => {\n          worker.removeEventListener(\"error\", onWorkerError);\n          messageHandler.destroy();\n          worker.terminate();\n          if (this.destroyed) {\n            this._readyCapability.reject(new Error(\"Worker was destroyed\"));\n          } else {\n            // Fall back to fake worker if the termination is caused by an\n            // error (e.g. NetworkError / SecurityError).\n            this._setupFakeWorker();\n          }\n        };\n\n        const onWorkerError = () => {\n          if (!this._webWorker) {\n            // Worker failed to initialize due to an error. Clean up and fall\n            // back to the fake worker.\n            terminateEarly();\n          }\n        };\n        worker.addEventListener(\"error\", onWorkerError);\n\n        messageHandler.on(\"test\", data => {\n          worker.removeEventListener(\"error\", onWorkerError);\n          if (this.destroyed) {\n            terminateEarly();\n            return; // worker was destroyed\n          }\n          if (data) {\n            this._messageHandler = messageHandler;\n            this._port = worker;\n            this._webWorker = worker;\n\n            this._readyCapability.resolve();\n            // Send global setting, e.g. verbosity level.\n            messageHandler.send(\"configure\", {\n              verbosity: this.verbosity,\n            });\n          } else {\n            this._setupFakeWorker();\n            messageHandler.destroy();\n            worker.terminate();\n          }\n        });\n\n        messageHandler.on(\"ready\", data => {\n          worker.removeEventListener(\"error\", onWorkerError);\n          if (this.destroyed) {\n            terminateEarly();\n            return; // worker was destroyed\n          }\n          try {\n            sendTest();\n          } catch (e) {\n            // We need fallback to a faked worker.\n            this._setupFakeWorker();\n          }\n        });\n\n        const sendTest = () => {\n          const testObj = new Uint8Array([255]);\n          // Some versions of Opera throw a DATA_CLONE_ERR on serializing the\n          // typed array. Also, checking if we can use transfers.\n          try {\n            messageHandler.send(\"test\", testObj, [testObj.buffer]);\n          } catch (ex) {\n            warn(\"Cannot use postMessage transfers.\");\n            testObj[0] = 0;\n            messageHandler.send(\"test\", testObj);\n          }\n        };\n\n        // It might take time for the worker to initialize. We will try to send\n        // the \"test\" message immediately, and once the \"ready\" message arrives.\n        // The worker shall process only the first received \"test\" message.\n        sendTest();\n        return;\n      } catch (e) {\n        info(\"The worker has been disabled.\");\n      }\n    }\n    // Either workers are disabled, not supported or have thrown an exception.\n    // Thus, we fallback to a faked worker.\n    this._setupFakeWorker();\n  }\n\n  _setupFakeWorker() {\n    if (!PDFWorkerUtil.isWorkerDisabled) {\n      warn(\"Setting up fake worker.\");\n      PDFWorkerUtil.isWorkerDisabled = true;\n    }\n\n    PDFWorker._setupFakeWorkerGlobal\n      .then(WorkerMessageHandler => {\n        if (this.destroyed) {\n          this._readyCapability.reject(new Error(\"Worker was destroyed\"));\n          return;\n        }\n        const port = new LoopbackPort();\n        this._port = port;\n\n        // All fake workers use the same port, making id unique.\n        const id = `fake${PDFWorkerUtil.fakeWorkerId++}`;\n\n        // If the main thread is our worker, setup the handling for the\n        // messages -- the main thread sends to it self.\n        const workerHandler = new MessageHandler(id + \"_worker\", id, port);\n        WorkerMessageHandler.setup(workerHandler, port);\n\n        const messageHandler = new MessageHandler(id, id + \"_worker\", port);\n        this._messageHandler = messageHandler;\n        this._readyCapability.resolve();\n        // Send global setting, e.g. verbosity level.\n        messageHandler.send(\"configure\", {\n          verbosity: this.verbosity,\n        });\n      })\n      .catch(reason => {\n        this._readyCapability.reject(\n          new Error(`Setting up fake worker failed: \"${reason.message}\".`)\n        );\n      });\n  }\n\n  /**\n   * Destroys the worker instance.\n   */\n  destroy() {\n    this.destroyed = true;\n    if (this._webWorker) {\n      // We need to terminate only web worker created resource.\n      this._webWorker.terminate();\n      this._webWorker = null;\n    }\n    PDFWorker._workerPorts.delete(this._port);\n    this._port = null;\n    if (this._messageHandler) {\n      this._messageHandler.destroy();\n      this._messageHandler = null;\n    }\n  }\n\n  /**\n   * @param {PDFWorkerParameters} params - The worker initialization parameters.\n   */\n  static fromPort(params) {\n    if (!params?.port) {\n      throw new Error(\"PDFWorker.fromPort - invalid method signature.\");\n    }\n    if (this._workerPorts.has(params.port)) {\n      return this._workerPorts.get(params.port);\n    }\n    return new PDFWorker(params);\n  }\n\n  /**\n   * The current `workerSrc`, when it exists.\n   * @type {string}\n   */\n  static get workerSrc() {\n    if (GlobalWorkerOptions.workerSrc) {\n      return GlobalWorkerOptions.workerSrc;\n    }\n    if (PDFWorkerUtil.fallbackWorkerSrc !== null) {\n      if (!isNodeJS) {\n        deprecated('No \"GlobalWorkerOptions.workerSrc\" specified.');\n      }\n      return PDFWorkerUtil.fallbackWorkerSrc;\n    }\n    throw new Error('No \"GlobalWorkerOptions.workerSrc\" specified.');\n  }\n\n  static get _mainThreadWorkerMessageHandler() {\n    try {\n      return globalThis.pdfjsWorker?.WorkerMessageHandler || null;\n    } catch (ex) {\n      return null;\n    }\n  }\n\n  // Loads worker code into the main-thread.\n  static get _setupFakeWorkerGlobal() {\n    const loader = async () => {\n      const mainWorkerMessageHandler = this._mainThreadWorkerMessageHandler;\n\n      if (mainWorkerMessageHandler) {\n        // The worker was already loaded using e.g. a `<script>` tag.\n        return mainWorkerMessageHandler;\n      }\n      if (typeof PDFJSDev === \"undefined\" || !PDFJSDev.test(\"PRODUCTION\")) {\n        const worker = await import(\"pdfjs/core/worker.js\");\n        return worker.WorkerMessageHandler;\n      }\n      if (\n        PDFJSDev.test(\"GENERIC\") &&\n        isNodeJS &&\n        // eslint-disable-next-line no-undef\n        typeof __non_webpack_require__ === \"function\"\n      ) {\n        // Since bundlers, such as Webpack, cannot be told to leave `require`\n        // statements alone we are thus forced to jump through hoops in order\n        // to prevent `Critical dependency: ...` warnings in third-party\n        // deployments of the built `pdf.js`/`pdf.worker.js` files; see\n        // https://github.com/webpack/webpack/issues/8826\n        //\n        // The following hack is based on the assumption that code running in\n        // Node.js won't ever be affected by e.g. Content Security Policies that\n        // prevent the use of `eval`. If that ever occurs, we should revert this\n        // to a normal `__non_webpack_require__` statement and simply document\n        // the Webpack warnings instead (telling users to ignore them).\n        //\n        // eslint-disable-next-line no-eval\n        const worker = eval(\"require\")(this.workerSrc);\n        return worker.WorkerMessageHandler;\n      }\n      await loadScript(this.workerSrc);\n      return window.pdfjsWorker.WorkerMessageHandler;\n    };\n\n    return shadow(this, \"_setupFakeWorkerGlobal\", loader());\n  }\n}\nif (typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"GENERIC\")) {\n  PDFWorker.getWorkerSrc = function () {\n    deprecated(\n      \"`PDFWorker.getWorkerSrc()`, please use `PDFWorker.workerSrc` instead.\"\n    );\n    return this.workerSrc;\n  };\n}\n\n/**\n * For internal use only.\n * @ignore\n */\nclass WorkerTransport {\n  #docStats = null;\n\n  #pageCache = new Map();\n\n  #pagePromises = new Map();\n\n  #metadataPromise = null;\n\n  constructor(messageHandler, loadingTask, networkStream, params) {\n    this.messageHandler = messageHandler;\n    this.loadingTask = loadingTask;\n    this.commonObjs = new PDFObjects();\n    this.fontLoader = new FontLoader({\n      docId: loadingTask.docId,\n      onUnsupportedFeature: this._onUnsupportedFeature.bind(this),\n      ownerDocument: params.ownerDocument,\n      styleElement: params.styleElement,\n    });\n    this._params = params;\n\n    if (!params.useWorkerFetch) {\n      this.CMapReaderFactory = new params.CMapReaderFactory({\n        baseUrl: params.cMapUrl,\n        isCompressed: params.cMapPacked,\n      });\n      this.StandardFontDataFactory = new params.StandardFontDataFactory({\n        baseUrl: params.standardFontDataUrl,\n      });\n    }\n\n    this.destroyed = false;\n    this.destroyCapability = null;\n    this._passwordCapability = null;\n\n    this._networkStream = networkStream;\n    this._fullReader = null;\n    this._lastProgress = null;\n    this.downloadInfoCapability = createPromiseCapability();\n\n    this.setupMessageHandler();\n  }\n\n  get annotationStorage() {\n    return shadow(this, \"annotationStorage\", new AnnotationStorage());\n  }\n\n  get stats() {\n    return this.#docStats;\n  }\n\n  getRenderingIntent(\n    intent,\n    annotationMode = AnnotationMode.ENABLE,\n    isOpList = false\n  ) {\n    let renderingIntent = RenderingIntentFlag.DISPLAY; // Default value.\n    let lastModified = \"\";\n\n    switch (intent) {\n      case \"any\":\n        renderingIntent = RenderingIntentFlag.ANY;\n        break;\n      case \"display\":\n        break;\n      case \"print\":\n        renderingIntent = RenderingIntentFlag.PRINT;\n        break;\n      default:\n        warn(`getRenderingIntent - invalid intent: ${intent}`);\n    }\n\n    switch (annotationMode) {\n      case AnnotationMode.DISABLE:\n        renderingIntent += RenderingIntentFlag.ANNOTATIONS_DISABLE;\n        break;\n      case AnnotationMode.ENABLE:\n        break;\n      case AnnotationMode.ENABLE_FORMS:\n        renderingIntent += RenderingIntentFlag.ANNOTATIONS_FORMS;\n        break;\n      case AnnotationMode.ENABLE_STORAGE:\n        renderingIntent += RenderingIntentFlag.ANNOTATIONS_STORAGE;\n\n        lastModified = this.annotationStorage.lastModified;\n        break;\n      default:\n        warn(`getRenderingIntent - invalid annotationMode: ${annotationMode}`);\n    }\n\n    if (isOpList) {\n      renderingIntent += RenderingIntentFlag.OPLIST;\n    }\n\n    return {\n      renderingIntent,\n      cacheKey: `${renderingIntent}_${lastModified}`,\n    };\n  }\n\n  destroy() {\n    if (this.destroyCapability) {\n      return this.destroyCapability.promise;\n    }\n\n    this.destroyed = true;\n    this.destroyCapability = createPromiseCapability();\n\n    if (this._passwordCapability) {\n      this._passwordCapability.reject(\n        new Error(\"Worker was destroyed during onPassword callback\")\n      );\n    }\n\n    const waitOn = [];\n    // We need to wait for all renderings to be completed, e.g.\n    // timeout/rAF can take a long time.\n    for (const page of this.#pageCache.values()) {\n      waitOn.push(page._destroy());\n    }\n    this.#pageCache.clear();\n    this.#pagePromises.clear();\n    // Allow `AnnotationStorage`-related clean-up when destroying the document.\n    if (this.hasOwnProperty(\"annotationStorage\")) {\n      this.annotationStorage.resetModified();\n    }\n    // We also need to wait for the worker to finish its long running tasks.\n    const terminated = this.messageHandler.sendWithPromise(\"Terminate\", null);\n    waitOn.push(terminated);\n\n    Promise.all(waitOn).then(() => {\n      this.commonObjs.clear();\n      this.fontLoader.clear();\n      this.#metadataPromise = null;\n      this._getFieldObjectsPromise = null;\n      this._hasJSActionsPromise = null;\n\n      if (this._networkStream) {\n        this._networkStream.cancelAllRequests(\n          new AbortException(\"Worker was terminated.\")\n        );\n      }\n\n      if (this.messageHandler) {\n        this.messageHandler.destroy();\n        this.messageHandler = null;\n      }\n      this.destroyCapability.resolve();\n    }, this.destroyCapability.reject);\n    return this.destroyCapability.promise;\n  }\n\n  setupMessageHandler() {\n    const { messageHandler, loadingTask } = this;\n\n    messageHandler.on(\"GetReader\", (data, sink) => {\n      assert(\n        this._networkStream,\n        \"GetReader - no `IPDFStream` instance available.\"\n      );\n      this._fullReader = this._networkStream.getFullReader();\n      this._fullReader.onProgress = evt => {\n        this._lastProgress = {\n          loaded: evt.loaded,\n          total: evt.total,\n        };\n      };\n      sink.onPull = () => {\n        this._fullReader\n          .read()\n          .then(function ({ value, done }) {\n            if (done) {\n              sink.close();\n              return;\n            }\n            assert(\n              isArrayBuffer(value),\n              \"GetReader - expected an ArrayBuffer.\"\n            );\n            // Enqueue data chunk into sink, and transfer it\n            // to other side as `Transferable` object.\n            sink.enqueue(new Uint8Array(value), 1, [value]);\n          })\n          .catch(reason => {\n            sink.error(reason);\n          });\n      };\n\n      sink.onCancel = reason => {\n        this._fullReader.cancel(reason);\n\n        sink.ready.catch(readyReason => {\n          if (this.destroyed) {\n            return; // Ignore any pending requests if the worker was terminated.\n          }\n          throw readyReason;\n        });\n      };\n    });\n\n    messageHandler.on(\"ReaderHeadersReady\", data => {\n      const headersCapability = createPromiseCapability();\n      const fullReader = this._fullReader;\n      fullReader.headersReady.then(() => {\n        // If stream or range are disabled, it's our only way to report\n        // loading progress.\n        if (!fullReader.isStreamingSupported || !fullReader.isRangeSupported) {\n          if (this._lastProgress) {\n            loadingTask.onProgress?.(this._lastProgress);\n          }\n          fullReader.onProgress = evt => {\n            loadingTask.onProgress?.({\n              loaded: evt.loaded,\n              total: evt.total,\n            });\n          };\n        }\n\n        headersCapability.resolve({\n          isStreamingSupported: fullReader.isStreamingSupported,\n          isRangeSupported: fullReader.isRangeSupported,\n          contentLength: fullReader.contentLength,\n        });\n      }, headersCapability.reject);\n\n      return headersCapability.promise;\n    });\n\n    messageHandler.on(\"GetRangeReader\", (data, sink) => {\n      assert(\n        this._networkStream,\n        \"GetRangeReader - no `IPDFStream` instance available.\"\n      );\n      const rangeReader = this._networkStream.getRangeReader(\n        data.begin,\n        data.end\n      );\n\n      // When streaming is enabled, it's possible that the data requested here\n      // has already been fetched via the `_fullRequestReader` implementation.\n      // However, given that the PDF data is loaded asynchronously on the\n      // main-thread and then sent via `postMessage` to the worker-thread,\n      // it may not have been available during parsing (hence the attempt to\n      // use range requests here).\n      //\n      // To avoid wasting time and resources here, we'll thus *not* dispatch\n      // range requests if the data was already loaded but has not been sent to\n      // the worker-thread yet (which will happen via the `_fullRequestReader`).\n      if (!rangeReader) {\n        sink.close();\n        return;\n      }\n\n      sink.onPull = () => {\n        rangeReader\n          .read()\n          .then(function ({ value, done }) {\n            if (done) {\n              sink.close();\n              return;\n            }\n            assert(\n              isArrayBuffer(value),\n              \"GetRangeReader - expected an ArrayBuffer.\"\n            );\n            sink.enqueue(new Uint8Array(value), 1, [value]);\n          })\n          .catch(reason => {\n            sink.error(reason);\n          });\n      };\n\n      sink.onCancel = reason => {\n        rangeReader.cancel(reason);\n\n        sink.ready.catch(readyReason => {\n          if (this.destroyed) {\n            return; // Ignore any pending requests if the worker was terminated.\n          }\n          throw readyReason;\n        });\n      };\n    });\n\n    messageHandler.on(\"GetDoc\", ({ pdfInfo }) => {\n      this._numPages = pdfInfo.numPages;\n      this._htmlForXfa = pdfInfo.htmlForXfa;\n      delete pdfInfo.htmlForXfa;\n      loadingTask._capability.resolve(new PDFDocumentProxy(pdfInfo, this));\n    });\n\n    messageHandler.on(\"DocException\", function (ex) {\n      let reason;\n      switch (ex.name) {\n        case \"PasswordException\":\n          reason = new PasswordException(ex.message, ex.code);\n          break;\n        case \"InvalidPDFException\":\n          reason = new InvalidPDFException(ex.message);\n          break;\n        case \"MissingPDFException\":\n          reason = new MissingPDFException(ex.message);\n          break;\n        case \"UnexpectedResponseException\":\n          reason = new UnexpectedResponseException(ex.message, ex.status);\n          break;\n        case \"UnknownErrorException\":\n          reason = new UnknownErrorException(ex.message, ex.details);\n          break;\n        default:\n          unreachable(\"DocException - expected a valid Error.\");\n      }\n      loadingTask._capability.reject(reason);\n    });\n\n    messageHandler.on(\"PasswordRequest\", exception => {\n      this._passwordCapability = createPromiseCapability();\n\n      if (loadingTask.onPassword) {\n        const updatePassword = password => {\n          this._passwordCapability.resolve({\n            password,\n          });\n        };\n        try {\n          loadingTask.onPassword(updatePassword, exception.code);\n        } catch (ex) {\n          this._passwordCapability.reject(ex);\n        }\n      } else {\n        this._passwordCapability.reject(\n          new PasswordException(exception.message, exception.code)\n        );\n      }\n      return this._passwordCapability.promise;\n    });\n\n    messageHandler.on(\"DataLoaded\", data => {\n      // For consistency: Ensure that progress is always reported when the\n      // entire PDF file has been loaded, regardless of how it was fetched.\n      loadingTask.onProgress?.({\n        loaded: data.length,\n        total: data.length,\n      });\n\n      this.downloadInfoCapability.resolve(data);\n    });\n\n    messageHandler.on(\"StartRenderPage\", data => {\n      if (this.destroyed) {\n        return; // Ignore any pending requests if the worker was terminated.\n      }\n\n      const page = this.#pageCache.get(data.pageIndex);\n      page._startRenderPage(data.transparency, data.cacheKey);\n    });\n\n    messageHandler.on(\"commonobj\", ([id, type, exportedData]) => {\n      if (this.destroyed) {\n        return; // Ignore any pending requests if the worker was terminated.\n      }\n\n      if (this.commonObjs.has(id)) {\n        return;\n      }\n\n      switch (type) {\n        case \"Font\":\n          const params = this._params;\n\n          if (\"error\" in exportedData) {\n            const exportedError = exportedData.error;\n            warn(`Error during font loading: ${exportedError}`);\n            this.commonObjs.resolve(id, exportedError);\n            break;\n          }\n\n          let fontRegistry = null;\n          if (params.pdfBug && globalThis.FontInspector?.enabled) {\n            fontRegistry = {\n              registerFont(font, url) {\n                globalThis.FontInspector.fontAdded(font, url);\n              },\n            };\n          }\n          const font = new FontFaceObject(exportedData, {\n            isEvalSupported: params.isEvalSupported,\n            disableFontFace: params.disableFontFace,\n            ignoreErrors: params.ignoreErrors,\n            onUnsupportedFeature: this._onUnsupportedFeature.bind(this),\n            fontRegistry,\n          });\n\n          this.fontLoader\n            .bind(font)\n            .catch(reason => {\n              return messageHandler.sendWithPromise(\"FontFallback\", { id });\n            })\n            .finally(() => {\n              if (!params.fontExtraProperties && font.data) {\n                // Immediately release the `font.data` property once the font\n                // has been attached to the DOM, since it's no longer needed,\n                // rather than waiting for a `PDFDocumentProxy.cleanup` call.\n                // Since `font.data` could be very large, e.g. in some cases\n                // multiple megabytes, this will help reduce memory usage.\n                font.data = null;\n              }\n              this.commonObjs.resolve(id, font);\n            });\n          break;\n        case \"FontPath\":\n        case \"Image\":\n          this.commonObjs.resolve(id, exportedData);\n          break;\n        default:\n          throw new Error(`Got unknown common object type ${type}`);\n      }\n    });\n\n    messageHandler.on(\"obj\", ([id, pageIndex, type, imageData]) => {\n      if (this.destroyed) {\n        // Ignore any pending requests if the worker was terminated.\n        return;\n      }\n\n      const pageProxy = this.#pageCache.get(pageIndex);\n      if (pageProxy.objs.has(id)) {\n        return;\n      }\n\n      switch (type) {\n        case \"Image\":\n          pageProxy.objs.resolve(id, imageData);\n\n          // Heuristic that will allow us not to store large data.\n          const MAX_IMAGE_SIZE_TO_STORE = 8000000;\n          if (imageData?.data?.length > MAX_IMAGE_SIZE_TO_STORE) {\n            pageProxy.cleanupAfterRender = true;\n          }\n          break;\n        case \"Pattern\":\n          pageProxy.objs.resolve(id, imageData);\n          break;\n        default:\n          throw new Error(`Got unknown object type ${type}`);\n      }\n    });\n\n    messageHandler.on(\"DocProgress\", data => {\n      if (this.destroyed) {\n        return; // Ignore any pending requests if the worker was terminated.\n      }\n      loadingTask.onProgress?.({\n        loaded: data.loaded,\n        total: data.total,\n      });\n    });\n\n    messageHandler.on(\"DocStats\", data => {\n      if (this.destroyed) {\n        return; // Ignore any pending requests if the worker was terminated.\n      }\n      // Ensure that a `PDFDocumentProxy.stats` call-site cannot accidentally\n      // modify this internal data.\n      this.#docStats = Object.freeze({\n        streamTypes: Object.freeze(data.streamTypes),\n        fontTypes: Object.freeze(data.fontTypes),\n      });\n    });\n\n    messageHandler.on(\n      \"UnsupportedFeature\",\n      this._onUnsupportedFeature.bind(this)\n    );\n\n    messageHandler.on(\"FetchBuiltInCMap\", data => {\n      if (this.destroyed) {\n        return Promise.reject(new Error(\"Worker was destroyed.\"));\n      }\n      if (!this.CMapReaderFactory) {\n        return Promise.reject(\n          new Error(\n            \"CMapReaderFactory not initialized, see the `useWorkerFetch` parameter.\"\n          )\n        );\n      }\n      return this.CMapReaderFactory.fetch(data);\n    });\n\n    messageHandler.on(\"FetchStandardFontData\", data => {\n      if (this.destroyed) {\n        return Promise.reject(new Error(\"Worker was destroyed.\"));\n      }\n      if (!this.StandardFontDataFactory) {\n        return Promise.reject(\n          new Error(\n            \"StandardFontDataFactory not initialized, see the `useWorkerFetch` parameter.\"\n          )\n        );\n      }\n      return this.StandardFontDataFactory.fetch(data);\n    });\n  }\n\n  _onUnsupportedFeature({ featureId }) {\n    if (this.destroyed) {\n      return; // Ignore any pending requests if the worker was terminated.\n    }\n    this.loadingTask.onUnsupportedFeature?.(featureId);\n  }\n\n  getData() {\n    return this.messageHandler.sendWithPromise(\"GetData\", null);\n  }\n\n  getPage(pageNumber) {\n    if (\n      !Number.isInteger(pageNumber) ||\n      pageNumber <= 0 ||\n      pageNumber > this._numPages\n    ) {\n      return Promise.reject(new Error(\"Invalid page request\"));\n    }\n\n    const pageIndex = pageNumber - 1,\n      cachedPromise = this.#pagePromises.get(pageIndex);\n    if (cachedPromise) {\n      return cachedPromise;\n    }\n    const promise = this.messageHandler\n      .sendWithPromise(\"GetPage\", {\n        pageIndex,\n      })\n      .then(pageInfo => {\n        if (this.destroyed) {\n          throw new Error(\"Transport destroyed\");\n        }\n        const page = new PDFPageProxy(\n          pageIndex,\n          pageInfo,\n          this,\n          this._params.ownerDocument,\n          this._params.pdfBug\n        );\n        this.#pageCache.set(pageIndex, page);\n        return page;\n      });\n    this.#pagePromises.set(pageIndex, promise);\n    return promise;\n  }\n\n  getPageIndex(ref) {\n    return this.messageHandler.sendWithPromise(\"GetPageIndex\", {\n      ref,\n    });\n  }\n\n  getAnnotations(pageIndex, intent) {\n    return this.messageHandler.sendWithPromise(\"GetAnnotations\", {\n      pageIndex,\n      intent,\n    });\n  }\n\n  saveDocument() {\n    return this.messageHandler\n      .sendWithPromise(\"SaveDocument\", {\n        isPureXfa: !!this._htmlForXfa,\n        numPages: this._numPages,\n        annotationStorage: this.annotationStorage.serializable,\n        filename: this._fullReader?.filename ?? null,\n      })\n      .finally(() => {\n        this.annotationStorage.resetModified();\n      });\n  }\n\n  getFieldObjects() {\n    return (this._getFieldObjectsPromise ||=\n      this.messageHandler.sendWithPromise(\"GetFieldObjects\", null));\n  }\n\n  hasJSActions() {\n    return (this._hasJSActionsPromise ||= this.messageHandler.sendWithPromise(\n      \"HasJSActions\",\n      null\n    ));\n  }\n\n  getCalculationOrderIds() {\n    return this.messageHandler.sendWithPromise(\"GetCalculationOrderIds\", null);\n  }\n\n  getDestinations() {\n    return this.messageHandler.sendWithPromise(\"GetDestinations\", null);\n  }\n\n  getDestination(id) {\n    if (typeof id !== \"string\") {\n      return Promise.reject(new Error(\"Invalid destination request.\"));\n    }\n    return this.messageHandler.sendWithPromise(\"GetDestination\", {\n      id,\n    });\n  }\n\n  getPageLabels() {\n    return this.messageHandler.sendWithPromise(\"GetPageLabels\", null);\n  }\n\n  getPageLayout() {\n    return this.messageHandler.sendWithPromise(\"GetPageLayout\", null);\n  }\n\n  getPageMode() {\n    return this.messageHandler.sendWithPromise(\"GetPageMode\", null);\n  }\n\n  getViewerPreferences() {\n    return this.messageHandler.sendWithPromise(\"GetViewerPreferences\", null);\n  }\n\n  getOpenAction() {\n    return this.messageHandler.sendWithPromise(\"GetOpenAction\", null);\n  }\n\n  getAttachments() {\n    return this.messageHandler.sendWithPromise(\"GetAttachments\", null);\n  }\n\n  getJavaScript() {\n    return this.messageHandler.sendWithPromise(\"GetJavaScript\", null);\n  }\n\n  getDocJSActions() {\n    return this.messageHandler.sendWithPromise(\"GetDocJSActions\", null);\n  }\n\n  getPageJSActions(pageIndex) {\n    return this.messageHandler.sendWithPromise(\"GetPageJSActions\", {\n      pageIndex,\n    });\n  }\n\n  getStructTree(pageIndex) {\n    return this.messageHandler.sendWithPromise(\"GetStructTree\", {\n      pageIndex,\n    });\n  }\n\n  getOutline() {\n    return this.messageHandler.sendWithPromise(\"GetOutline\", null);\n  }\n\n  getOptionalContentConfig() {\n    return this.messageHandler\n      .sendWithPromise(\"GetOptionalContentConfig\", null)\n      .then(results => {\n        return new OptionalContentConfig(results);\n      });\n  }\n\n  getPermissions() {\n    return this.messageHandler.sendWithPromise(\"GetPermissions\", null);\n  }\n\n  getMetadata() {\n    return (this.#metadataPromise ||= this.messageHandler\n      .sendWithPromise(\"GetMetadata\", null)\n      .then(results => {\n        return {\n          info: results[0],\n          metadata: results[1] ? new Metadata(results[1]) : null,\n          contentDispositionFilename: this._fullReader?.filename ?? null,\n          contentLength: this._fullReader?.contentLength ?? null,\n        };\n      }));\n  }\n\n  getMarkInfo() {\n    return this.messageHandler.sendWithPromise(\"GetMarkInfo\", null);\n  }\n\n  async startCleanup(keepLoadedFonts = false) {\n    await this.messageHandler.sendWithPromise(\"Cleanup\", null);\n\n    if (this.destroyed) {\n      return; // No need to manually clean-up when destruction has started.\n    }\n    for (const page of this.#pageCache.values()) {\n      const cleanupSuccessful = page.cleanup();\n\n      if (!cleanupSuccessful) {\n        throw new Error(\n          `startCleanup: Page ${page.pageNumber} is currently rendering.`\n        );\n      }\n    }\n    this.commonObjs.clear();\n    if (!keepLoadedFonts) {\n      this.fontLoader.clear();\n    }\n    this.#metadataPromise = null;\n    this._getFieldObjectsPromise = null;\n    this._hasJSActionsPromise = null;\n  }\n\n  get loadingParams() {\n    const params = this._params;\n    return shadow(this, \"loadingParams\", {\n      disableAutoFetch: params.disableAutoFetch,\n      enableXfa: params.enableXfa,\n    });\n  }\n}\n\n/**\n * A PDF document and page is built of many objects. E.g. there are objects for\n * fonts, images, rendering code, etc. These objects may get processed inside of\n * a worker. This class implements some basic methods to manage these objects.\n * @ignore\n */\nclass PDFObjects {\n  constructor() {\n    this._objs = Object.create(null);\n  }\n\n  /**\n   * Ensures there is an object defined for `objId`.\n   * @private\n   */\n  _ensureObj(objId) {\n    if (this._objs[objId]) {\n      return this._objs[objId];\n    }\n    return (this._objs[objId] = {\n      capability: createPromiseCapability(),\n      data: null,\n      resolved: false,\n    });\n  }\n\n  /**\n   * If called *without* callback, this returns the data of `objId` but the\n   * object needs to be resolved. If it isn't, this method throws.\n   *\n   * If called *with* a callback, the callback is called with the data of the\n   * object once the object is resolved. That means, if you call this method\n   * and the object is already resolved, the callback gets called right away.\n   */\n  get(objId, callback = null) {\n    // If there is a callback, then the get can be async and the object is\n    // not required to be resolved right now.\n    if (callback) {\n      this._ensureObj(objId).capability.promise.then(callback);\n      return null;\n    }\n    // If there isn't a callback, the user expects to get the resolved data\n    // directly.\n    const obj = this._objs[objId];\n    // If there isn't an object yet or the object isn't resolved, then the\n    // data isn't ready yet!\n    if (!obj || !obj.resolved) {\n      throw new Error(`Requesting object that isn't resolved yet ${objId}.`);\n    }\n    return obj.data;\n  }\n\n  has(objId) {\n    const obj = this._objs[objId];\n    return obj?.resolved || false;\n  }\n\n  /**\n   * Resolves the object `objId` with optional `data`.\n   */\n  resolve(objId, data) {\n    const obj = this._ensureObj(objId);\n\n    obj.resolved = true;\n    obj.data = data;\n    obj.capability.resolve(data);\n  }\n\n  clear() {\n    this._objs = Object.create(null);\n  }\n}\n\n/**\n * Allows controlling of the rendering tasks.\n */\nclass RenderTask {\n  constructor(internalRenderTask) {\n    this._internalRenderTask = internalRenderTask;\n\n    /**\n     * Callback for incremental rendering -- a function that will be called\n     * each time the rendering is paused.  To continue rendering call the\n     * function that is the first argument to the callback.\n     * @type {function}\n     */\n    this.onContinue = null;\n  }\n\n  /**\n   * Promise for rendering task completion.\n   * @type {Promise<void>}\n   */\n  get promise() {\n    return this._internalRenderTask.capability.promise;\n  }\n\n  /**\n   * Cancels the rendering task. If the task is currently rendering it will\n   * not be cancelled until graphics pauses with a timeout. The promise that\n   * this object extends will be rejected when cancelled.\n   */\n  cancel() {\n    this._internalRenderTask.cancel();\n  }\n}\n\n/**\n * For internal use only.\n * @ignore\n */\nclass InternalRenderTask {\n  static get canvasInUse() {\n    return shadow(this, \"canvasInUse\", new WeakSet());\n  }\n\n  constructor({\n    callback,\n    params,\n    objs,\n    commonObjs,\n    annotationCanvasMap,\n    operatorList,\n    pageIndex,\n    canvasFactory,\n    useRequestAnimationFrame = false,\n    pdfBug = false,\n  }) {\n    this.callback = callback;\n    this.params = params;\n    this.objs = objs;\n    this.commonObjs = commonObjs;\n    this.annotationCanvasMap = annotationCanvasMap;\n    this.operatorListIdx = null;\n    this.operatorList = operatorList;\n    this._pageIndex = pageIndex;\n    this.canvasFactory = canvasFactory;\n    this._pdfBug = pdfBug;\n\n    this.running = false;\n    this.graphicsReadyCallback = null;\n    this.graphicsReady = false;\n    this._useRequestAnimationFrame =\n      useRequestAnimationFrame === true && typeof window !== \"undefined\";\n    this.cancelled = false;\n    this.capability = createPromiseCapability();\n    this.task = new RenderTask(this);\n    // caching this-bound methods\n    this._cancelBound = this.cancel.bind(this);\n    this._continueBound = this._continue.bind(this);\n    this._scheduleNextBound = this._scheduleNext.bind(this);\n    this._nextBound = this._next.bind(this);\n    this._canvas = params.canvasContext.canvas;\n  }\n\n  get completed() {\n    return this.capability.promise.catch(function () {\n      // Ignoring errors, since we only want to know when rendering is\n      // no longer pending.\n    });\n  }\n\n  initializeGraphics({ transparency = false, optionalContentConfig }) {\n    if (this.cancelled) {\n      return;\n    }\n    if (this._canvas) {\n      if (InternalRenderTask.canvasInUse.has(this._canvas)) {\n        throw new Error(\n          \"Cannot use the same canvas during multiple render() operations. \" +\n            \"Use different canvas or ensure previous operations were \" +\n            \"cancelled or completed.\"\n        );\n      }\n      InternalRenderTask.canvasInUse.add(this._canvas);\n    }\n\n    if (this._pdfBug && globalThis.StepperManager?.enabled) {\n      this.stepper = globalThis.StepperManager.create(this._pageIndex);\n      this.stepper.init(this.operatorList);\n      this.stepper.nextBreakPoint = this.stepper.getNextBreakPoint();\n    }\n    const { canvasContext, viewport, transform, imageLayer, background } =\n      this.params;\n\n    this.gfx = new CanvasGraphics(\n      canvasContext,\n      this.commonObjs,\n      this.objs,\n      this.canvasFactory,\n      imageLayer,\n      optionalContentConfig,\n      this.annotationCanvasMap\n    );\n    this.gfx.beginDrawing({\n      transform,\n      viewport,\n      transparency,\n      background,\n    });\n    this.operatorListIdx = 0;\n    this.graphicsReady = true;\n    if (this.graphicsReadyCallback) {\n      this.graphicsReadyCallback();\n    }\n  }\n\n  cancel(error = null) {\n    this.running = false;\n    this.cancelled = true;\n    if (this.gfx) {\n      this.gfx.endDrawing();\n    }\n    if (this._canvas) {\n      InternalRenderTask.canvasInUse.delete(this._canvas);\n    }\n    this.callback(\n      error ||\n        new RenderingCancelledException(\n          `Rendering cancelled, page ${this._pageIndex + 1}`,\n          \"canvas\"\n        )\n    );\n  }\n\n  operatorListChanged() {\n    if (!this.graphicsReady) {\n      if (!this.graphicsReadyCallback) {\n        this.graphicsReadyCallback = this._continueBound;\n      }\n      return;\n    }\n\n    if (this.stepper) {\n      this.stepper.updateOperatorList(this.operatorList);\n    }\n\n    if (this.running) {\n      return;\n    }\n    this._continue();\n  }\n\n  _continue() {\n    this.running = true;\n    if (this.cancelled) {\n      return;\n    }\n    if (this.task.onContinue) {\n      this.task.onContinue(this._scheduleNextBound);\n    } else {\n      this._scheduleNext();\n    }\n  }\n\n  _scheduleNext() {\n    if (this._useRequestAnimationFrame) {\n      window.requestAnimationFrame(() => {\n        this._nextBound().catch(this._cancelBound);\n      });\n    } else {\n      Promise.resolve().then(this._nextBound).catch(this._cancelBound);\n    }\n  }\n\n  async _next() {\n    if (this.cancelled) {\n      return;\n    }\n    this.operatorListIdx = this.gfx.executeOperatorList(\n      this.operatorList,\n      this.operatorListIdx,\n      this._continueBound,\n      this.stepper\n    );\n    if (this.operatorListIdx === this.operatorList.argsArray.length) {\n      this.running = false;\n      if (this.operatorList.lastChunk) {\n        this.gfx.endDrawing();\n        if (this._canvas) {\n          InternalRenderTask.canvasInUse.delete(this._canvas);\n        }\n        this.callback();\n      }\n    }\n  }\n}\n\n/** @type {string} */\nconst version =\n  typeof PDFJSDev !== \"undefined\" ? PDFJSDev.eval(\"BUNDLE_VERSION\") : null;\n/** @type {string} */\nconst build =\n  typeof PDFJSDev !== \"undefined\" ? PDFJSDev.eval(\"BUNDLE_BUILD\") : null;\n\nexport {\n  build,\n  DefaultCanvasFactory,\n  DefaultCMapReaderFactory,\n  DefaultStandardFontDataFactory,\n  getDocument,\n  LoopbackPort,\n  PDFDataRangeTransport,\n  PDFDocumentLoadingTask,\n  PDFDocumentProxy,\n  PDFPageProxy,\n  PDFWorker,\n  RenderTask,\n  setPDFNetworkStreamFactory,\n  version,\n};\n","/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  assert,\n  bytesToString,\n  IsEvalSupportedCached,\n  shadow,\n  string32,\n  unreachable,\n  UNSUPPORTED_FEATURES,\n  warn,\n} from \"../shared/util.js\";\n\nclass BaseFontLoader {\n  constructor({\n    docId,\n    onUnsupportedFeature,\n    ownerDocument = globalThis.document,\n    // For testing only.\n    styleElement = null,\n  }) {\n    if (this.constructor === BaseFontLoader) {\n      unreachable(\"Cannot initialize BaseFontLoader.\");\n    }\n    this.docId = docId;\n    this._onUnsupportedFeature = onUnsupportedFeature;\n    this._document = ownerDocument;\n\n    this.nativeFontFaces = [];\n    this.styleElement =\n      typeof PDFJSDev === \"undefined\" || PDFJSDev.test(\"!PRODUCTION || TESTING\")\n        ? styleElement\n        : null;\n  }\n\n  addNativeFontFace(nativeFontFace) {\n    this.nativeFontFaces.push(nativeFontFace);\n    this._document.fonts.add(nativeFontFace);\n  }\n\n  insertRule(rule) {\n    let styleElement = this.styleElement;\n    if (!styleElement) {\n      styleElement = this.styleElement = this._document.createElement(\"style\");\n      styleElement.id = `PDFJS_FONT_STYLE_TAG_${this.docId}`;\n      this._document.documentElement\n        .getElementsByTagName(\"head\")[0]\n        .appendChild(styleElement);\n    }\n    const styleSheet = styleElement.sheet;\n    styleSheet.insertRule(rule, styleSheet.cssRules.length);\n  }\n\n  clear() {\n    for (const nativeFontFace of this.nativeFontFaces) {\n      this._document.fonts.delete(nativeFontFace);\n    }\n    this.nativeFontFaces.length = 0;\n\n    if (this.styleElement) {\n      // Note: ChildNode.remove doesn't throw if the parentNode is undefined.\n      this.styleElement.remove();\n      this.styleElement = null;\n    }\n  }\n\n  async bind(font) {\n    // Add the font to the DOM only once; skip if the font is already loaded.\n    if (font.attached || font.missingFile) {\n      return;\n    }\n    font.attached = true;\n\n    if (this.isFontLoadingAPISupported) {\n      const nativeFontFace = font.createNativeFontFace();\n      if (nativeFontFace) {\n        this.addNativeFontFace(nativeFontFace);\n        try {\n          await nativeFontFace.loaded;\n        } catch (ex) {\n          this._onUnsupportedFeature({\n            featureId: UNSUPPORTED_FEATURES.errorFontLoadNative,\n          });\n          warn(`Failed to load font '${nativeFontFace.family}': '${ex}'.`);\n\n          // When font loading failed, fall back to the built-in font renderer.\n          font.disableFontFace = true;\n          throw ex;\n        }\n      }\n      return; // The font was, asynchronously, loaded.\n    }\n\n    // !this.isFontLoadingAPISupported\n    const rule = font.createFontFaceRule();\n    if (rule) {\n      this.insertRule(rule);\n\n      if (this.isSyncFontLoadingSupported) {\n        return; // The font was, synchronously, loaded.\n      }\n      await new Promise(resolve => {\n        const request = this._queueLoadingCallback(resolve);\n        this._prepareFontLoadEvent([rule], [font], request);\n      });\n      // The font was, asynchronously, loaded.\n    }\n  }\n\n  _queueLoadingCallback(callback) {\n    unreachable(\"Abstract method `_queueLoadingCallback`.\");\n  }\n\n  get isFontLoadingAPISupported() {\n    const hasFonts = !!this._document?.fonts;\n    if (\n      typeof PDFJSDev === \"undefined\" ||\n      PDFJSDev.test(\"!PRODUCTION || TESTING\")\n    ) {\n      return shadow(\n        this,\n        \"isFontLoadingAPISupported\",\n        hasFonts && !this.styleElement\n      );\n    }\n    return shadow(this, \"isFontLoadingAPISupported\", hasFonts);\n  }\n\n  // eslint-disable-next-line getter-return\n  get isSyncFontLoadingSupported() {\n    unreachable(\"Abstract method `isSyncFontLoadingSupported`.\");\n  }\n\n  // eslint-disable-next-line getter-return\n  get _loadTestFont() {\n    unreachable(\"Abstract method `_loadTestFont`.\");\n  }\n\n  _prepareFontLoadEvent(rules, fontsToLoad, request) {\n    unreachable(\"Abstract method `_prepareFontLoadEvent`.\");\n  }\n}\n\nlet FontLoader;\nif (typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"MOZCENTRAL\")) {\n  FontLoader = class MozcentralFontLoader extends BaseFontLoader {\n    get isSyncFontLoadingSupported() {\n      return shadow(this, \"isSyncFontLoadingSupported\", true);\n    }\n  };\n} else {\n  // PDFJSDev.test('CHROME || GENERIC')\n\n  FontLoader = class GenericFontLoader extends BaseFontLoader {\n    constructor(params) {\n      super(params);\n      this.loadingContext = {\n        requests: [],\n        nextRequestId: 0,\n      };\n      this.loadTestFontId = 0;\n    }\n\n    get isSyncFontLoadingSupported() {\n      let supported = false;\n      if (typeof PDFJSDev === \"undefined\" || !PDFJSDev.test(\"CHROME\")) {\n        if (typeof navigator === \"undefined\") {\n          // Node.js - we can pretend that sync font loading is supported.\n          supported = true;\n        } else {\n          // User agent string sniffing is bad, but there is no reliable way to\n          // tell if the font is fully loaded and ready to be used with canvas.\n          const m = /Mozilla\\/5.0.*?rv:(\\d+).*? Gecko/.exec(\n            navigator.userAgent\n          );\n          if (m?.[1] >= 14) {\n            supported = true;\n          }\n          // TODO - other browsers...\n        }\n      }\n      return shadow(this, \"isSyncFontLoadingSupported\", supported);\n    }\n\n    _queueLoadingCallback(callback) {\n      function completeRequest() {\n        assert(!request.done, \"completeRequest() cannot be called twice.\");\n        request.done = true;\n\n        // Sending all completed requests in order of how they were queued.\n        while (context.requests.length > 0 && context.requests[0].done) {\n          const otherRequest = context.requests.shift();\n          setTimeout(otherRequest.callback, 0);\n        }\n      }\n\n      const context = this.loadingContext;\n      const request = {\n        id: `pdfjs-font-loading-${context.nextRequestId++}`,\n        done: false,\n        complete: completeRequest,\n        callback,\n      };\n      context.requests.push(request);\n      return request;\n    }\n\n    get _loadTestFont() {\n      const getLoadTestFont = function () {\n        // This is a CFF font with 1 glyph for '.' that fills its entire width\n        // and height.\n        return atob(\n          \"T1RUTwALAIAAAwAwQ0ZGIDHtZg4AAAOYAAAAgUZGVE1lkzZwAAAEHAAAABxHREVGABQA\" +\n            \"FQAABDgAAAAeT1MvMlYNYwkAAAEgAAAAYGNtYXABDQLUAAACNAAAAUJoZWFk/xVFDQAA\" +\n            \"ALwAAAA2aGhlYQdkA+oAAAD0AAAAJGhtdHgD6AAAAAAEWAAAAAZtYXhwAAJQAAAAARgA\" +\n            \"AAAGbmFtZVjmdH4AAAGAAAAAsXBvc3T/hgAzAAADeAAAACAAAQAAAAEAALZRFsRfDzz1\" +\n            \"AAsD6AAAAADOBOTLAAAAAM4KHDwAAAAAA+gDIQAAAAgAAgAAAAAAAAABAAADIQAAAFoD\" +\n            \"6AAAAAAD6AABAAAAAAAAAAAAAAAAAAAAAQAAUAAAAgAAAAQD6AH0AAUAAAKKArwAAACM\" +\n            \"AooCvAAAAeAAMQECAAACAAYJAAAAAAAAAAAAAQAAAAAAAAAAAAAAAFBmRWQAwAAuAC4D\" +\n            \"IP84AFoDIQAAAAAAAQAAAAAAAAAAACAAIAABAAAADgCuAAEAAAAAAAAAAQAAAAEAAAAA\" +\n            \"AAEAAQAAAAEAAAAAAAIAAQAAAAEAAAAAAAMAAQAAAAEAAAAAAAQAAQAAAAEAAAAAAAUA\" +\n            \"AQAAAAEAAAAAAAYAAQAAAAMAAQQJAAAAAgABAAMAAQQJAAEAAgABAAMAAQQJAAIAAgAB\" +\n            \"AAMAAQQJAAMAAgABAAMAAQQJAAQAAgABAAMAAQQJAAUAAgABAAMAAQQJAAYAAgABWABY\" +\n            \"AAAAAAAAAwAAAAMAAAAcAAEAAAAAADwAAwABAAAAHAAEACAAAAAEAAQAAQAAAC7//wAA\" +\n            \"AC7////TAAEAAAAAAAABBgAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" +\n            \"AAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" +\n            \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" +\n            \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" +\n            \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" +\n            \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAD/gwAyAAAAAQAAAAAAAAAAAAAAAAAA\" +\n            \"AAABAAQEAAEBAQJYAAEBASH4DwD4GwHEAvgcA/gXBIwMAYuL+nz5tQXkD5j3CBLnEQAC\" +\n            \"AQEBIVhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYAAABAQAADwACAQEEE/t3\" +\n            \"Dov6fAH6fAT+fPp8+nwHDosMCvm1Cvm1DAz6fBQAAAAAAAABAAAAAMmJbzEAAAAAzgTj\" +\n            \"FQAAAADOBOQpAAEAAAAAAAAADAAUAAQAAAABAAAAAgABAAAAAAAAAAAD6AAAAAAAAA==\"\n        );\n      };\n      return shadow(this, \"_loadTestFont\", getLoadTestFont());\n    }\n\n    _prepareFontLoadEvent(rules, fonts, request) {\n      /** Hack begin */\n      // There's currently no event when a font has finished downloading so the\n      // following code is a dirty hack to 'guess' when a font is ready.\n      // It's assumed fonts are loaded in order, so add a known test font after\n      // the desired fonts and then test for the loading of that test font.\n\n      function int32(data, offset) {\n        return (\n          (data.charCodeAt(offset) << 24) |\n          (data.charCodeAt(offset + 1) << 16) |\n          (data.charCodeAt(offset + 2) << 8) |\n          (data.charCodeAt(offset + 3) & 0xff)\n        );\n      }\n      function spliceString(s, offset, remove, insert) {\n        const chunk1 = s.substring(0, offset);\n        const chunk2 = s.substring(offset + remove);\n        return chunk1 + insert + chunk2;\n      }\n      let i, ii;\n\n      // The temporary canvas is used to determine if fonts are loaded.\n      const canvas = this._document.createElement(\"canvas\");\n      canvas.width = 1;\n      canvas.height = 1;\n      const ctx = canvas.getContext(\"2d\");\n\n      let called = 0;\n      function isFontReady(name, callback) {\n        called++;\n        // With setTimeout clamping this gives the font ~100ms to load.\n        if (called > 30) {\n          warn(\"Load test font never loaded.\");\n          callback();\n          return;\n        }\n        ctx.font = \"30px \" + name;\n        ctx.fillText(\".\", 0, 20);\n        const imageData = ctx.getImageData(0, 0, 1, 1);\n        if (imageData.data[3] > 0) {\n          callback();\n          return;\n        }\n        setTimeout(isFontReady.bind(null, name, callback));\n      }\n\n      const loadTestFontId = `lt${Date.now()}${this.loadTestFontId++}`;\n      // Chromium seems to cache fonts based on a hash of the actual font data,\n      // so the font must be modified for each load test else it will appear to\n      // be loaded already.\n      // TODO: This could maybe be made faster by avoiding the btoa of the full\n      // font by splitting it in chunks before hand and padding the font id.\n      let data = this._loadTestFont;\n      const COMMENT_OFFSET = 976; // has to be on 4 byte boundary (for checksum)\n      data = spliceString(\n        data,\n        COMMENT_OFFSET,\n        loadTestFontId.length,\n        loadTestFontId\n      );\n      // CFF checksum is important for IE, adjusting it\n      const CFF_CHECKSUM_OFFSET = 16;\n      const XXXX_VALUE = 0x58585858; // the \"comment\" filled with 'X'\n      let checksum = int32(data, CFF_CHECKSUM_OFFSET);\n      for (i = 0, ii = loadTestFontId.length - 3; i < ii; i += 4) {\n        checksum = (checksum - XXXX_VALUE + int32(loadTestFontId, i)) | 0;\n      }\n      if (i < loadTestFontId.length) {\n        // align to 4 bytes boundary\n        checksum =\n          (checksum - XXXX_VALUE + int32(loadTestFontId + \"XXX\", i)) | 0;\n      }\n      data = spliceString(data, CFF_CHECKSUM_OFFSET, 4, string32(checksum));\n\n      const url = `url(data:font/opentype;base64,${btoa(data)});`;\n      const rule = `@font-face {font-family:\"${loadTestFontId}\";src:${url}}`;\n      this.insertRule(rule);\n\n      const names = [];\n      for (const font of fonts) {\n        names.push(font.loadedName);\n      }\n      names.push(loadTestFontId);\n\n      const div = this._document.createElement(\"div\");\n      div.style.visibility = \"hidden\";\n      div.style.width = div.style.height = \"10px\";\n      div.style.position = \"absolute\";\n      div.style.top = div.style.left = \"0px\";\n\n      for (const name of names) {\n        const span = this._document.createElement(\"span\");\n        span.textContent = \"Hi\";\n        span.style.fontFamily = name;\n        div.appendChild(span);\n      }\n      this._document.body.appendChild(div);\n\n      isFontReady(loadTestFontId, () => {\n        div.remove();\n        request.complete();\n      });\n      /** Hack end */\n    }\n  };\n} // End of PDFJSDev.test('CHROME || GENERIC')\n\nclass FontFaceObject {\n  constructor(\n    translatedData,\n    {\n      isEvalSupported = true,\n      disableFontFace = false,\n      ignoreErrors = false,\n      onUnsupportedFeature,\n      fontRegistry = null,\n    }\n  ) {\n    this.compiledGlyphs = Object.create(null);\n    // importing translated data\n    for (const i in translatedData) {\n      this[i] = translatedData[i];\n    }\n    this.isEvalSupported = isEvalSupported !== false;\n    this.disableFontFace = disableFontFace === true;\n    this.ignoreErrors = ignoreErrors === true;\n    this._onUnsupportedFeature = onUnsupportedFeature;\n    this.fontRegistry = fontRegistry;\n  }\n\n  createNativeFontFace() {\n    if (!this.data || this.disableFontFace) {\n      return null;\n    }\n    let nativeFontFace;\n    if (!this.cssFontInfo) {\n      nativeFontFace = new FontFace(this.loadedName, this.data, {});\n    } else {\n      const css = {\n        weight: this.cssFontInfo.fontWeight,\n      };\n      if (this.cssFontInfo.italicAngle) {\n        css.style = `oblique ${this.cssFontInfo.italicAngle}deg`;\n      }\n      nativeFontFace = new FontFace(\n        this.cssFontInfo.fontFamily,\n        this.data,\n        css\n      );\n    }\n\n    if (this.fontRegistry) {\n      this.fontRegistry.registerFont(this);\n    }\n    return nativeFontFace;\n  }\n\n  createFontFaceRule() {\n    if (!this.data || this.disableFontFace) {\n      return null;\n    }\n    const data = bytesToString(this.data);\n    // Add the @font-face rule to the document.\n    const url = `url(data:${this.mimetype};base64,${btoa(data)});`;\n    let rule;\n    if (!this.cssFontInfo) {\n      rule = `@font-face {font-family:\"${this.loadedName}\";src:${url}}`;\n    } else {\n      let css = `font-weight: ${this.cssFontInfo.fontWeight};`;\n      if (this.cssFontInfo.italicAngle) {\n        css += `font-style: oblique ${this.cssFontInfo.italicAngle}deg;`;\n      }\n      rule = `@font-face {font-family:\"${this.cssFontInfo.fontFamily}\";${css}src:${url}}`;\n    }\n\n    if (this.fontRegistry) {\n      this.fontRegistry.registerFont(this, url);\n    }\n    return rule;\n  }\n\n  getPathGenerator(objs, character) {\n    if (this.compiledGlyphs[character] !== undefined) {\n      return this.compiledGlyphs[character];\n    }\n\n    let cmds;\n    try {\n      cmds = objs.get(this.loadedName + \"_path_\" + character);\n    } catch (ex) {\n      if (!this.ignoreErrors) {\n        throw ex;\n      }\n      this._onUnsupportedFeature({\n        featureId: UNSUPPORTED_FEATURES.errorFontGetPath,\n      });\n      warn(`getPathGenerator - ignoring character: \"${ex}\".`);\n\n      return (this.compiledGlyphs[character] = function (c, size) {\n        // No-op function, to allow rendering to continue.\n      });\n    }\n\n    // If we can, compile cmds into JS for MAXIMUM SPEED...\n    if (this.isEvalSupported && IsEvalSupportedCached.value) {\n      const jsBuf = [];\n      for (const current of cmds) {\n        const args = current.args !== undefined ? current.args.join(\",\") : \"\";\n        jsBuf.push(\"c.\", current.cmd, \"(\", args, \");\\n\");\n      }\n      // eslint-disable-next-line no-new-func\n      return (this.compiledGlyphs[character] = new Function(\n        \"c\",\n        \"size\",\n        jsBuf.join(\"\")\n      ));\n    }\n    // ... but fall back on using Function.prototype.apply() if we're\n    // blocked from using eval() for whatever reason (like CSP policies).\n    return (this.compiledGlyphs[character] = function (c, size) {\n      for (const current of cmds) {\n        if (current.cmd === \"scale\") {\n          current.args = [size, -size];\n        }\n        c[current.cmd].apply(c, current.args);\n      }\n    });\n  }\n}\n\nexport { FontFaceObject, FontLoader };\n","/* Copyright 2020 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/* globals __non_webpack_require__ */\n\nimport {\n  BaseCanvasFactory,\n  BaseCMapReaderFactory,\n  BaseStandardFontDataFactory,\n} from \"./base_factory.js\";\nimport { isNodeJS } from \"../shared/is_node.js\";\nimport { unreachable } from \"../shared/util.js\";\n\nlet NodeCanvasFactory = class {\n  constructor() {\n    unreachable(\"Not implemented: NodeCanvasFactory\");\n  }\n};\n\nlet NodeCMapReaderFactory = class {\n  constructor() {\n    unreachable(\"Not implemented: NodeCMapReaderFactory\");\n  }\n};\n\nlet NodeStandardFontDataFactory = class {\n  constructor() {\n    unreachable(\"Not implemented: NodeStandardFontDataFactory\");\n  }\n};\n\nif ((typeof PDFJSDev === \"undefined\" || PDFJSDev.test(\"GENERIC\")) && isNodeJS) {\n  const fetchData = function (url) {\n    return new Promise((resolve, reject) => {\n      const fs = __non_webpack_require__(\"fs\");\n      fs.readFile(url, (error, data) => {\n        if (error || !data) {\n          reject(new Error(error));\n          return;\n        }\n        resolve(new Uint8Array(data));\n      });\n    });\n  };\n\n  NodeCanvasFactory = class extends BaseCanvasFactory {\n    _createCanvas(width, height) {\n      const Canvas = __non_webpack_require__(\"canvas\");\n      return Canvas.createCanvas(width, height);\n    }\n  };\n\n  NodeCMapReaderFactory = class extends BaseCMapReaderFactory {\n    _fetchData(url, compressionType) {\n      return fetchData(url).then(data => {\n        return { cMapData: data, compressionType };\n      });\n    }\n  };\n\n  NodeStandardFontDataFactory = class extends BaseStandardFontDataFactory {\n    _fetchData(url) {\n      return fetchData(url);\n    }\n  };\n}\n\nexport {\n  NodeCanvasFactory,\n  NodeCMapReaderFactory,\n  NodeStandardFontDataFactory,\n};\n","/* Copyright 2020 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { objectFromMap } from \"../shared/util.js\";\n\n/**\n * Key/value storage for annotation data in forms.\n */\nclass AnnotationStorage {\n  constructor() {\n    this._storage = new Map();\n    this._timeStamp = Date.now();\n    this._modified = false;\n\n    // Callbacks to signal when the modification state is set or reset.\n    // This is used by the viewer to only bind on `beforeunload` if forms\n    // are actually edited to prevent doing so unconditionally since that\n    // can have undesirable effects.\n    this.onSetModified = null;\n    this.onResetModified = null;\n  }\n\n  /**\n   * Get the value for a given key if it exists, or return the default value.\n   *\n   * @public\n   * @memberof AnnotationStorage\n   * @param {string} key\n   * @param {Object} defaultValue\n   * @returns {Object}\n   */\n  getValue(key, defaultValue) {\n    const value = this._storage.get(key);\n    if (value === undefined) {\n      return defaultValue;\n    }\n\n    return Object.assign(defaultValue, value);\n  }\n\n  /**\n   * Set the value for a given key\n   *\n   * @public\n   * @memberof AnnotationStorage\n   * @param {string} key\n   * @param {Object} value\n   */\n  setValue(key, value) {\n    const obj = this._storage.get(key);\n    let modified = false;\n    if (obj !== undefined) {\n      for (const [entry, val] of Object.entries(value)) {\n        if (obj[entry] !== val) {\n          modified = true;\n          obj[entry] = val;\n        }\n      }\n    } else {\n      modified = true;\n      this._storage.set(key, value);\n    }\n    if (modified) {\n      this._timeStamp = Date.now();\n      this._setModified();\n    }\n  }\n\n  getAll() {\n    return this._storage.size > 0 ? objectFromMap(this._storage) : null;\n  }\n\n  get size() {\n    return this._storage.size;\n  }\n\n  /**\n   * @private\n   */\n  _setModified() {\n    if (!this._modified) {\n      this._modified = true;\n      if (typeof this.onSetModified === \"function\") {\n        this.onSetModified();\n      }\n    }\n  }\n\n  resetModified() {\n    if (this._modified) {\n      this._modified = false;\n      if (typeof this.onResetModified === \"function\") {\n        this.onResetModified();\n      }\n    }\n  }\n\n  /**\n   * PLEASE NOTE: Only intended for usage within the API itself.\n   * @ignore\n   */\n  get serializable() {\n    return this._storage.size > 0 ? this._storage : null;\n  }\n\n  /**\n   * PLEASE NOTE: Only intended for usage within the API itself.\n   * @ignore\n   */\n  get lastModified() {\n    return this._timeStamp.toString();\n  }\n}\n\nexport { AnnotationStorage };\n","/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FONT_IDENTITY_MATRIX,\n  IDENTITY_MATRIX,\n  ImageKind,\n  info,\n  IsLittleEndianCached,\n  isNum,\n  OPS,\n  shadow,\n  TextRenderingMode,\n  unreachable,\n  Util,\n  warn,\n} from \"../shared/util.js\";\nimport {\n  getShadingPattern,\n  PathType,\n  TilingPattern,\n} from \"./pattern_helper.js\";\nimport { PixelsPerInch } from \"./display_utils.js\";\n\n// <canvas> contexts store most of the state we need natively.\n// However, PDF needs a bit more state, which we store here.\n// Minimal font size that would be used during canvas fillText operations.\nconst MIN_FONT_SIZE = 16;\n// Maximum font size that would be used during canvas fillText operations.\nconst MAX_FONT_SIZE = 100;\nconst MAX_GROUP_SIZE = 4096;\n\n// Defines the time the `executeOperatorList`-method is going to be executing\n// before it stops and shedules a continue of execution.\nconst EXECUTION_TIME = 15; // ms\n// Defines the number of steps before checking the execution time.\nconst EXECUTION_STEPS = 10;\n\nconst COMPILE_TYPE3_GLYPHS = true;\nconst MAX_SIZE_TO_COMPILE = 1000;\n\nconst FULL_CHUNK_HEIGHT = 16;\n\n// Because of https://bugs.chromium.org/p/chromium/issues/detail?id=1170396\n// some curves aren't rendered correctly.\n// Multiplying lineWidth by this factor should help to have \"correct\"\n// rendering with no artifacts.\n// Once the bug is fixed upstream, we can remove this constant and its use.\nconst LINEWIDTH_SCALE_FACTOR = 1.000001;\n\n/**\n * Overrides certain methods on a 2d ctx so that when they are called they\n * will also call the same method on the destCtx. The methods that are\n * overridden are all the transformation state modifiers, path creation, and\n * save/restore. We only forward these specific methods because they are the\n * only state modifiers that we cannot copy over when we switch contexts.\n *\n * To remove mirroring call `ctx._removeMirroring()`.\n *\n * @param {Object} ctx - The 2d canvas context that will duplicate its calls on\n *   the destCtx.\n * @param {Object} destCtx - The 2d canvas context that will receive the\n *   forwarded calls.\n */\nfunction mirrorContextOperations(ctx, destCtx) {\n  if (ctx._removeMirroring) {\n    throw new Error(\"Context is already forwarding operations.\");\n  }\n  ctx.__originalSave = ctx.save;\n  ctx.__originalRestore = ctx.restore;\n  ctx.__originalRotate = ctx.rotate;\n  ctx.__originalScale = ctx.scale;\n  ctx.__originalTranslate = ctx.translate;\n  ctx.__originalTransform = ctx.transform;\n  ctx.__originalSetTransform = ctx.setTransform;\n  ctx.__originalResetTransform = ctx.resetTransform;\n  ctx.__originalClip = ctx.clip;\n  ctx.__originalMoveTo = ctx.moveTo;\n  ctx.__originalLineTo = ctx.lineTo;\n  ctx.__originalBezierCurveTo = ctx.bezierCurveTo;\n  ctx.__originalRect = ctx.rect;\n  ctx.__originalClosePath = ctx.closePath;\n  ctx.__originalBeginPath = ctx.beginPath;\n\n  ctx._removeMirroring = () => {\n    ctx.save = ctx.__originalSave;\n    ctx.restore = ctx.__originalRestore;\n    ctx.rotate = ctx.__originalRotate;\n    ctx.scale = ctx.__originalScale;\n    ctx.translate = ctx.__originalTranslate;\n    ctx.transform = ctx.__originalTransform;\n    ctx.setTransform = ctx.__originalSetTransform;\n    ctx.resetTransform = ctx.__originalResetTransform;\n\n    ctx.clip = ctx.__originalClip;\n    ctx.moveTo = ctx.__originalMoveTo;\n    ctx.lineTo = ctx.__originalLineTo;\n    ctx.bezierCurveTo = ctx.__originalBezierCurveTo;\n    ctx.rect = ctx.__originalRect;\n    ctx.closePath = ctx.__originalClosePath;\n    ctx.beginPath = ctx.__originalBeginPath;\n    delete ctx._removeMirroring;\n  };\n\n  ctx.save = function ctxSave() {\n    destCtx.save();\n    this.__originalSave();\n  };\n\n  ctx.restore = function ctxRestore() {\n    destCtx.restore();\n    this.__originalRestore();\n  };\n\n  ctx.translate = function ctxTranslate(x, y) {\n    destCtx.translate(x, y);\n    this.__originalTranslate(x, y);\n  };\n\n  ctx.scale = function ctxScale(x, y) {\n    destCtx.scale(x, y);\n    this.__originalScale(x, y);\n  };\n\n  ctx.transform = function ctxTransform(a, b, c, d, e, f) {\n    destCtx.transform(a, b, c, d, e, f);\n    this.__originalTransform(a, b, c, d, e, f);\n  };\n\n  ctx.setTransform = function ctxSetTransform(a, b, c, d, e, f) {\n    destCtx.setTransform(a, b, c, d, e, f);\n    this.__originalSetTransform(a, b, c, d, e, f);\n  };\n\n  ctx.resetTransform = function ctxResetTransform() {\n    destCtx.resetTransform();\n    this.__originalResetTransform();\n  };\n\n  ctx.rotate = function ctxRotate(angle) {\n    destCtx.rotate(angle);\n    this.__originalRotate(angle);\n  };\n\n  ctx.clip = function ctxRotate(rule) {\n    destCtx.clip(rule);\n    this.__originalClip(rule);\n  };\n\n  ctx.moveTo = function (x, y) {\n    destCtx.moveTo(x, y);\n    this.__originalMoveTo(x, y);\n  };\n\n  ctx.lineTo = function (x, y) {\n    destCtx.lineTo(x, y);\n    this.__originalLineTo(x, y);\n  };\n\n  ctx.bezierCurveTo = function (cp1x, cp1y, cp2x, cp2y, x, y) {\n    destCtx.bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y);\n    this.__originalBezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y);\n  };\n\n  ctx.rect = function (x, y, width, height) {\n    destCtx.rect(x, y, width, height);\n    this.__originalRect(x, y, width, height);\n  };\n\n  ctx.closePath = function () {\n    destCtx.closePath();\n    this.__originalClosePath();\n  };\n\n  ctx.beginPath = function () {\n    destCtx.beginPath();\n    this.__originalBeginPath();\n  };\n}\n\nfunction addContextCurrentTransform(ctx) {\n  // If the context doesn't expose a `mozCurrentTransform`, add a JS based one.\n  if (ctx.mozCurrentTransform) {\n    return;\n  }\n  ctx._originalSave = ctx.save;\n  ctx._originalRestore = ctx.restore;\n  ctx._originalRotate = ctx.rotate;\n  ctx._originalScale = ctx.scale;\n  ctx._originalTranslate = ctx.translate;\n  ctx._originalTransform = ctx.transform;\n  ctx._originalSetTransform = ctx.setTransform;\n  ctx._originalResetTransform = ctx.resetTransform;\n\n  ctx._transformMatrix = ctx._transformMatrix || [1, 0, 0, 1, 0, 0];\n  ctx._transformStack = [];\n\n  try {\n    // The call to getOwnPropertyDescriptor throws an exception in Node.js:\n    // \"TypeError: Method lineWidth called on incompatible receiver\n    //  #<CanvasRenderingContext2D>\".\n    const desc = Object.getOwnPropertyDescriptor(\n      Object.getPrototypeOf(ctx),\n      \"lineWidth\"\n    );\n\n    ctx._setLineWidth = desc.set;\n    ctx._getLineWidth = desc.get;\n\n    Object.defineProperty(ctx, \"lineWidth\", {\n      set: function setLineWidth(width) {\n        this._setLineWidth(width * LINEWIDTH_SCALE_FACTOR);\n      },\n      get: function getLineWidth() {\n        return this._getLineWidth();\n      },\n    });\n  } catch (_) {}\n\n  Object.defineProperty(ctx, \"mozCurrentTransform\", {\n    get: function getCurrentTransform() {\n      return this._transformMatrix;\n    },\n  });\n\n  Object.defineProperty(ctx, \"mozCurrentTransformInverse\", {\n    get: function getCurrentTransformInverse() {\n      // Calculation done using WolframAlpha:\n      // http://www.wolframalpha.com/input/?\n      //   i=Inverse+{{a%2C+c%2C+e}%2C+{b%2C+d%2C+f}%2C+{0%2C+0%2C+1}}\n\n      const [a, b, c, d, e, f] = this._transformMatrix;\n      const ad_bc = a * d - b * c;\n      const bc_ad = b * c - a * d;\n\n      return [\n        d / ad_bc,\n        b / bc_ad,\n        c / bc_ad,\n        a / ad_bc,\n        (d * e - c * f) / bc_ad,\n        (b * e - a * f) / ad_bc,\n      ];\n    },\n  });\n\n  ctx.save = function ctxSave() {\n    const old = this._transformMatrix;\n    this._transformStack.push(old);\n    this._transformMatrix = old.slice(0, 6);\n\n    this._originalSave();\n  };\n\n  ctx.restore = function ctxRestore() {\n    const prev = this._transformStack.pop();\n    if (prev) {\n      this._transformMatrix = prev;\n      this._originalRestore();\n    }\n  };\n\n  ctx.translate = function ctxTranslate(x, y) {\n    const m = this._transformMatrix;\n    m[4] = m[0] * x + m[2] * y + m[4];\n    m[5] = m[1] * x + m[3] * y + m[5];\n\n    this._originalTranslate(x, y);\n  };\n\n  ctx.scale = function ctxScale(x, y) {\n    const m = this._transformMatrix;\n    m[0] *= x;\n    m[1] *= x;\n    m[2] *= y;\n    m[3] *= y;\n\n    this._originalScale(x, y);\n  };\n\n  ctx.transform = function ctxTransform(a, b, c, d, e, f) {\n    const m = this._transformMatrix;\n    this._transformMatrix = [\n      m[0] * a + m[2] * b,\n      m[1] * a + m[3] * b,\n      m[0] * c + m[2] * d,\n      m[1] * c + m[3] * d,\n      m[0] * e + m[2] * f + m[4],\n      m[1] * e + m[3] * f + m[5],\n    ];\n\n    ctx._originalTransform(a, b, c, d, e, f);\n  };\n\n  ctx.setTransform = function ctxSetTransform(a, b, c, d, e, f) {\n    this._transformMatrix = [a, b, c, d, e, f];\n\n    ctx._originalSetTransform(a, b, c, d, e, f);\n  };\n\n  ctx.resetTransform = function ctxResetTransform() {\n    this._transformMatrix = [1, 0, 0, 1, 0, 0];\n\n    ctx._originalResetTransform();\n  };\n\n  ctx.rotate = function ctxRotate(angle) {\n    const cosValue = Math.cos(angle);\n    const sinValue = Math.sin(angle);\n\n    const m = this._transformMatrix;\n    this._transformMatrix = [\n      m[0] * cosValue + m[2] * sinValue,\n      m[1] * cosValue + m[3] * sinValue,\n      m[0] * -sinValue + m[2] * cosValue,\n      m[1] * -sinValue + m[3] * cosValue,\n      m[4],\n      m[5],\n    ];\n\n    this._originalRotate(angle);\n  };\n}\n\nclass CachedCanvases {\n  constructor(canvasFactory) {\n    this.canvasFactory = canvasFactory;\n    this.cache = Object.create(null);\n  }\n\n  getCanvas(id, width, height, trackTransform) {\n    let canvasEntry;\n    if (this.cache[id] !== undefined) {\n      canvasEntry = this.cache[id];\n      this.canvasFactory.reset(canvasEntry, width, height);\n      // reset canvas transform for emulated mozCurrentTransform, if needed\n      canvasEntry.context.setTransform(1, 0, 0, 1, 0, 0);\n    } else {\n      canvasEntry = this.canvasFactory.create(width, height);\n      this.cache[id] = canvasEntry;\n    }\n    if (trackTransform) {\n      addContextCurrentTransform(canvasEntry.context);\n    }\n    return canvasEntry;\n  }\n\n  clear() {\n    for (const id in this.cache) {\n      const canvasEntry = this.cache[id];\n      this.canvasFactory.destroy(canvasEntry);\n      delete this.cache[id];\n    }\n  }\n}\n\nfunction compileType3Glyph(imgData) {\n  const POINT_TO_PROCESS_LIMIT = 1000;\n  const POINT_TYPES = new Uint8Array([\n    0, 2, 4, 0, 1, 0, 5, 4, 8, 10, 0, 8, 0, 2, 1, 0,\n  ]);\n\n  const width = imgData.width,\n    height = imgData.height,\n    width1 = width + 1;\n  let i, ii, j, j0;\n  const points = new Uint8Array(width1 * (height + 1));\n\n  // decodes bit-packed mask data\n  const lineSize = (width + 7) & ~7,\n    data0 = imgData.data;\n  const data = new Uint8Array(lineSize * height);\n  let pos = 0;\n  for (i = 0, ii = data0.length; i < ii; i++) {\n    const elem = data0[i];\n    let mask = 128;\n    while (mask > 0) {\n      data[pos++] = elem & mask ? 0 : 255;\n      mask >>= 1;\n    }\n  }\n\n  // finding interesting points: every point is located between mask pixels,\n  // so there will be points of the (width + 1)x(height + 1) grid. Every point\n  // will have flags assigned based on neighboring mask pixels:\n  //   4 | 8\n  //   --P--\n  //   2 | 1\n  // We are interested only in points with the flags:\n  //   - outside corners: 1, 2, 4, 8;\n  //   - inside corners: 7, 11, 13, 14;\n  //   - and, intersections: 5, 10.\n  let count = 0;\n  pos = 0;\n  if (data[pos] !== 0) {\n    points[0] = 1;\n    ++count;\n  }\n  for (j = 1; j < width; j++) {\n    if (data[pos] !== data[pos + 1]) {\n      points[j] = data[pos] ? 2 : 1;\n      ++count;\n    }\n    pos++;\n  }\n  if (data[pos] !== 0) {\n    points[j] = 2;\n    ++count;\n  }\n  for (i = 1; i < height; i++) {\n    pos = i * lineSize;\n    j0 = i * width1;\n    if (data[pos - lineSize] !== data[pos]) {\n      points[j0] = data[pos] ? 1 : 8;\n      ++count;\n    }\n    // 'sum' is the position of the current pixel configuration in the 'TYPES'\n    // array (in order 8-1-2-4, so we can use '>>2' to shift the column).\n    let sum = (data[pos] ? 4 : 0) + (data[pos - lineSize] ? 8 : 0);\n    for (j = 1; j < width; j++) {\n      sum =\n        (sum >> 2) +\n        (data[pos + 1] ? 4 : 0) +\n        (data[pos - lineSize + 1] ? 8 : 0);\n      if (POINT_TYPES[sum]) {\n        points[j0 + j] = POINT_TYPES[sum];\n        ++count;\n      }\n      pos++;\n    }\n    if (data[pos - lineSize] !== data[pos]) {\n      points[j0 + j] = data[pos] ? 2 : 4;\n      ++count;\n    }\n\n    if (count > POINT_TO_PROCESS_LIMIT) {\n      return null;\n    }\n  }\n\n  pos = lineSize * (height - 1);\n  j0 = i * width1;\n  if (data[pos] !== 0) {\n    points[j0] = 8;\n    ++count;\n  }\n  for (j = 1; j < width; j++) {\n    if (data[pos] !== data[pos + 1]) {\n      points[j0 + j] = data[pos] ? 4 : 8;\n      ++count;\n    }\n    pos++;\n  }\n  if (data[pos] !== 0) {\n    points[j0 + j] = 4;\n    ++count;\n  }\n  if (count > POINT_TO_PROCESS_LIMIT) {\n    return null;\n  }\n\n  // building outlines\n  const steps = new Int32Array([0, width1, -1, 0, -width1, 0, 0, 0, 1]);\n  const outlines = [];\n  for (i = 0; count && i <= height; i++) {\n    let p = i * width1;\n    const end = p + width;\n    while (p < end && !points[p]) {\n      p++;\n    }\n    if (p === end) {\n      continue;\n    }\n    const coords = [p % width1, i];\n\n    const p0 = p;\n    let type = points[p];\n    do {\n      const step = steps[type];\n      do {\n        p += step;\n      } while (!points[p]);\n\n      const pp = points[p];\n      if (pp !== 5 && pp !== 10) {\n        // set new direction\n        type = pp;\n        // delete mark\n        points[p] = 0;\n      } else {\n        // type is 5 or 10, ie, a crossing\n        // set new direction\n        type = pp & ((0x33 * type) >> 4);\n        // set new type for \"future hit\"\n        points[p] &= (type >> 2) | (type << 2);\n      }\n\n      coords.push(p % width1, (p / width1) | 0);\n\n      if (!points[p]) {\n        --count;\n      }\n    } while (p0 !== p);\n    outlines.push(coords);\n    --i;\n  }\n\n  const drawOutline = function (c) {\n    c.save();\n    // the path shall be painted in [0..1]x[0..1] space\n    c.scale(1 / width, -1 / height);\n    c.translate(0, -height);\n    c.beginPath();\n    for (let k = 0, kk = outlines.length; k < kk; k++) {\n      const o = outlines[k];\n      c.moveTo(o[0], o[1]);\n      for (let l = 2, ll = o.length; l < ll; l += 2) {\n        c.lineTo(o[l], o[l + 1]);\n      }\n    }\n    c.fill();\n    c.beginPath();\n    c.restore();\n  };\n\n  return drawOutline;\n}\n\nclass CanvasExtraState {\n  constructor(width, height) {\n    // Are soft masks and alpha values shapes or opacities?\n    this.alphaIsShape = false;\n    this.fontSize = 0;\n    this.fontSizeScale = 1;\n    this.textMatrix = IDENTITY_MATRIX;\n    this.textMatrixScale = 1;\n    this.fontMatrix = FONT_IDENTITY_MATRIX;\n    this.leading = 0;\n    // Current point (in user coordinates)\n    this.x = 0;\n    this.y = 0;\n    // Start of text line (in text coordinates)\n    this.lineX = 0;\n    this.lineY = 0;\n    // Character and word spacing\n    this.charSpacing = 0;\n    this.wordSpacing = 0;\n    this.textHScale = 1;\n    this.textRenderingMode = TextRenderingMode.FILL;\n    this.textRise = 0;\n    // Default fore and background colors\n    this.fillColor = \"#000000\";\n    this.strokeColor = \"#000000\";\n    this.patternFill = false;\n    // Note: fill alpha applies to all non-stroking operations\n    this.fillAlpha = 1;\n    this.strokeAlpha = 1;\n    this.lineWidth = 1;\n    this.activeSMask = null;\n    this.transferMaps = null;\n\n    this.startNewPathAndClipBox([0, 0, width, height]);\n  }\n\n  clone() {\n    const clone = Object.create(this);\n    clone.clipBox = this.clipBox.slice();\n    return clone;\n  }\n\n  setCurrentPoint(x, y) {\n    this.x = x;\n    this.y = y;\n  }\n\n  updatePathMinMax(transform, x, y) {\n    [x, y] = Util.applyTransform([x, y], transform);\n    this.minX = Math.min(this.minX, x);\n    this.minY = Math.min(this.minY, y);\n    this.maxX = Math.max(this.maxX, x);\n    this.maxY = Math.max(this.maxY, y);\n  }\n\n  updateCurvePathMinMax(transform, x0, y0, x1, y1, x2, y2, x3, y3) {\n    const box = Util.bezierBoundingBox(x0, y0, x1, y1, x2, y2, x3, y3);\n    this.updatePathMinMax(transform, box[0], box[1]);\n    this.updatePathMinMax(transform, box[2], box[3]);\n  }\n\n  getPathBoundingBox(pathType = PathType.FILL, transform = null) {\n    const box = [this.minX, this.minY, this.maxX, this.maxY];\n    if (pathType === PathType.STROKE) {\n      if (!transform) {\n        unreachable(\"Stroke bounding box must include transform.\");\n      }\n      // Stroked paths can be outside of the path bounding box by 1/2 the line\n      // width.\n      const scale = Util.singularValueDecompose2dScale(transform);\n      const xStrokePad = (scale[0] * this.lineWidth) / 2;\n      const yStrokePad = (scale[1] * this.lineWidth) / 2;\n      box[0] -= xStrokePad;\n      box[1] -= yStrokePad;\n      box[2] += xStrokePad;\n      box[3] += yStrokePad;\n    }\n    return box;\n  }\n\n  updateClipFromPath() {\n    const intersect = Util.intersect(this.clipBox, this.getPathBoundingBox());\n    this.startNewPathAndClipBox(intersect || [0, 0, 0, 0]);\n  }\n\n  startNewPathAndClipBox(box) {\n    this.clipBox = box;\n    this.minX = Infinity;\n    this.minY = Infinity;\n    this.maxX = 0;\n    this.maxY = 0;\n  }\n\n  getClippedPathBoundingBox(pathType = PathType.FILL, transform = null) {\n    return Util.intersect(\n      this.clipBox,\n      this.getPathBoundingBox(pathType, transform)\n    );\n  }\n}\n\nfunction putBinaryImageData(ctx, imgData, transferMaps = null) {\n  if (typeof ImageData !== \"undefined\" && imgData instanceof ImageData) {\n    ctx.putImageData(imgData, 0, 0);\n    return;\n  }\n\n  // Put the image data to the canvas in chunks, rather than putting the\n  // whole image at once.  This saves JS memory, because the ImageData object\n  // is smaller. It also possibly saves C++ memory within the implementation\n  // of putImageData(). (E.g. in Firefox we make two short-lived copies of\n  // the data passed to putImageData()). |n| shouldn't be too small, however,\n  // because too many putImageData() calls will slow things down.\n  //\n  // Note: as written, if the last chunk is partial, the putImageData() call\n  // will (conceptually) put pixels past the bounds of the canvas.  But\n  // that's ok; any such pixels are ignored.\n\n  const height = imgData.height,\n    width = imgData.width;\n  const partialChunkHeight = height % FULL_CHUNK_HEIGHT;\n  const fullChunks = (height - partialChunkHeight) / FULL_CHUNK_HEIGHT;\n  const totalChunks = partialChunkHeight === 0 ? fullChunks : fullChunks + 1;\n\n  const chunkImgData = ctx.createImageData(width, FULL_CHUNK_HEIGHT);\n  let srcPos = 0,\n    destPos;\n  const src = imgData.data;\n  const dest = chunkImgData.data;\n  let i, j, thisChunkHeight, elemsInThisChunk;\n\n  let transferMapRed, transferMapGreen, transferMapBlue, transferMapGray;\n  if (transferMaps) {\n    switch (transferMaps.length) {\n      case 1:\n        transferMapRed = transferMaps[0];\n        transferMapGreen = transferMaps[0];\n        transferMapBlue = transferMaps[0];\n        transferMapGray = transferMaps[0];\n        break;\n      case 4:\n        transferMapRed = transferMaps[0];\n        transferMapGreen = transferMaps[1];\n        transferMapBlue = transferMaps[2];\n        transferMapGray = transferMaps[3];\n        break;\n    }\n  }\n\n  // There are multiple forms in which the pixel data can be passed, and\n  // imgData.kind tells us which one this is.\n  if (imgData.kind === ImageKind.GRAYSCALE_1BPP) {\n    // Grayscale, 1 bit per pixel (i.e. black-and-white).\n    const srcLength = src.byteLength;\n    const dest32 = new Uint32Array(dest.buffer, 0, dest.byteLength >> 2);\n    const dest32DataLength = dest32.length;\n    const fullSrcDiff = (width + 7) >> 3;\n    let white = 0xffffffff;\n    let black = IsLittleEndianCached.value ? 0xff000000 : 0x000000ff;\n\n    if (transferMapGray) {\n      if (transferMapGray[0] === 0xff && transferMapGray[0xff] === 0) {\n        [white, black] = [black, white];\n      }\n    }\n\n    for (i = 0; i < totalChunks; i++) {\n      thisChunkHeight = i < fullChunks ? FULL_CHUNK_HEIGHT : partialChunkHeight;\n      destPos = 0;\n      for (j = 0; j < thisChunkHeight; j++) {\n        const srcDiff = srcLength - srcPos;\n        let k = 0;\n        const kEnd = srcDiff > fullSrcDiff ? width : srcDiff * 8 - 7;\n        const kEndUnrolled = kEnd & ~7;\n        let mask = 0;\n        let srcByte = 0;\n        for (; k < kEndUnrolled; k += 8) {\n          srcByte = src[srcPos++];\n          dest32[destPos++] = srcByte & 128 ? white : black;\n          dest32[destPos++] = srcByte & 64 ? white : black;\n          dest32[destPos++] = srcByte & 32 ? white : black;\n          dest32[destPos++] = srcByte & 16 ? white : black;\n          dest32[destPos++] = srcByte & 8 ? white : black;\n          dest32[destPos++] = srcByte & 4 ? white : black;\n          dest32[destPos++] = srcByte & 2 ? white : black;\n          dest32[destPos++] = srcByte & 1 ? white : black;\n        }\n        for (; k < kEnd; k++) {\n          if (mask === 0) {\n            srcByte = src[srcPos++];\n            mask = 128;\n          }\n\n          dest32[destPos++] = srcByte & mask ? white : black;\n          mask >>= 1;\n        }\n      }\n      // We ran out of input. Make all remaining pixels transparent.\n      while (destPos < dest32DataLength) {\n        dest32[destPos++] = 0;\n      }\n\n      ctx.putImageData(chunkImgData, 0, i * FULL_CHUNK_HEIGHT);\n    }\n  } else if (imgData.kind === ImageKind.RGBA_32BPP) {\n    // RGBA, 32-bits per pixel.\n    const hasTransferMaps = !!(\n      transferMapRed ||\n      transferMapGreen ||\n      transferMapBlue\n    );\n\n    j = 0;\n    elemsInThisChunk = width * FULL_CHUNK_HEIGHT * 4;\n    for (i = 0; i < fullChunks; i++) {\n      dest.set(src.subarray(srcPos, srcPos + elemsInThisChunk));\n      srcPos += elemsInThisChunk;\n\n      if (hasTransferMaps) {\n        for (let k = 0; k < elemsInThisChunk; k += 4) {\n          if (transferMapRed) {\n            dest[k + 0] = transferMapRed[dest[k + 0]];\n          }\n          if (transferMapGreen) {\n            dest[k + 1] = transferMapGreen[dest[k + 1]];\n          }\n          if (transferMapBlue) {\n            dest[k + 2] = transferMapBlue[dest[k + 2]];\n          }\n        }\n      }\n\n      ctx.putImageData(chunkImgData, 0, j);\n      j += FULL_CHUNK_HEIGHT;\n    }\n    if (i < totalChunks) {\n      elemsInThisChunk = width * partialChunkHeight * 4;\n      dest.set(src.subarray(srcPos, srcPos + elemsInThisChunk));\n\n      if (hasTransferMaps) {\n        for (let k = 0; k < elemsInThisChunk; k += 4) {\n          if (transferMapRed) {\n            dest[k + 0] = transferMapRed[dest[k + 0]];\n          }\n          if (transferMapGreen) {\n            dest[k + 1] = transferMapGreen[dest[k + 1]];\n          }\n          if (transferMapBlue) {\n            dest[k + 2] = transferMapBlue[dest[k + 2]];\n          }\n        }\n      }\n\n      ctx.putImageData(chunkImgData, 0, j);\n    }\n  } else if (imgData.kind === ImageKind.RGB_24BPP) {\n    // RGB, 24-bits per pixel.\n    const hasTransferMaps = !!(\n      transferMapRed ||\n      transferMapGreen ||\n      transferMapBlue\n    );\n\n    thisChunkHeight = FULL_CHUNK_HEIGHT;\n    elemsInThisChunk = width * thisChunkHeight;\n    for (i = 0; i < totalChunks; i++) {\n      if (i >= fullChunks) {\n        thisChunkHeight = partialChunkHeight;\n        elemsInThisChunk = width * thisChunkHeight;\n      }\n\n      destPos = 0;\n      for (j = elemsInThisChunk; j--; ) {\n        dest[destPos++] = src[srcPos++];\n        dest[destPos++] = src[srcPos++];\n        dest[destPos++] = src[srcPos++];\n        dest[destPos++] = 255;\n      }\n\n      if (hasTransferMaps) {\n        for (let k = 0; k < destPos; k += 4) {\n          if (transferMapRed) {\n            dest[k + 0] = transferMapRed[dest[k + 0]];\n          }\n          if (transferMapGreen) {\n            dest[k + 1] = transferMapGreen[dest[k + 1]];\n          }\n          if (transferMapBlue) {\n            dest[k + 2] = transferMapBlue[dest[k + 2]];\n          }\n        }\n      }\n\n      ctx.putImageData(chunkImgData, 0, i * FULL_CHUNK_HEIGHT);\n    }\n  } else {\n    throw new Error(`bad image kind: ${imgData.kind}`);\n  }\n}\n\nfunction putBinaryImageMask(ctx, imgData) {\n  const height = imgData.height,\n    width = imgData.width;\n  const partialChunkHeight = height % FULL_CHUNK_HEIGHT;\n  const fullChunks = (height - partialChunkHeight) / FULL_CHUNK_HEIGHT;\n  const totalChunks = partialChunkHeight === 0 ? fullChunks : fullChunks + 1;\n\n  const chunkImgData = ctx.createImageData(width, FULL_CHUNK_HEIGHT);\n  let srcPos = 0;\n  const src = imgData.data;\n  const dest = chunkImgData.data;\n\n  for (let i = 0; i < totalChunks; i++) {\n    const thisChunkHeight =\n      i < fullChunks ? FULL_CHUNK_HEIGHT : partialChunkHeight;\n\n    // Expand the mask so it can be used by the canvas.  Any required\n    // inversion has already been handled.\n    let destPos = 3; // alpha component offset\n    for (let j = 0; j < thisChunkHeight; j++) {\n      let elem,\n        mask = 0;\n      for (let k = 0; k < width; k++) {\n        if (!mask) {\n          elem = src[srcPos++];\n          mask = 128;\n        }\n        dest[destPos] = elem & mask ? 0 : 255;\n        destPos += 4;\n        mask >>= 1;\n      }\n    }\n    ctx.putImageData(chunkImgData, 0, i * FULL_CHUNK_HEIGHT);\n  }\n}\n\nfunction copyCtxState(sourceCtx, destCtx) {\n  const properties = [\n    \"strokeStyle\",\n    \"fillStyle\",\n    \"fillRule\",\n    \"globalAlpha\",\n    \"lineWidth\",\n    \"lineCap\",\n    \"lineJoin\",\n    \"miterLimit\",\n    \"globalCompositeOperation\",\n    \"font\",\n  ];\n  for (let i = 0, ii = properties.length; i < ii; i++) {\n    const property = properties[i];\n    if (sourceCtx[property] !== undefined) {\n      destCtx[property] = sourceCtx[property];\n    }\n  }\n  if (sourceCtx.setLineDash !== undefined) {\n    destCtx.setLineDash(sourceCtx.getLineDash());\n    destCtx.lineDashOffset = sourceCtx.lineDashOffset;\n  }\n}\n\nfunction resetCtxToDefault(ctx) {\n  ctx.strokeStyle = \"#000000\";\n  ctx.fillStyle = \"#000000\";\n  ctx.fillRule = \"nonzero\";\n  ctx.globalAlpha = 1;\n  ctx.lineWidth = 1;\n  ctx.lineCap = \"butt\";\n  ctx.lineJoin = \"miter\";\n  ctx.miterLimit = 10;\n  ctx.globalCompositeOperation = \"source-over\";\n  ctx.font = \"10px sans-serif\";\n  if (ctx.setLineDash !== undefined) {\n    ctx.setLineDash([]);\n    ctx.lineDashOffset = 0;\n  }\n}\n\nfunction composeSMaskBackdrop(bytes, r0, g0, b0) {\n  const length = bytes.length;\n  for (let i = 3; i < length; i += 4) {\n    const alpha = bytes[i];\n    if (alpha === 0) {\n      bytes[i - 3] = r0;\n      bytes[i - 2] = g0;\n      bytes[i - 1] = b0;\n    } else if (alpha < 255) {\n      const alpha_ = 255 - alpha;\n      bytes[i - 3] = (bytes[i - 3] * alpha + r0 * alpha_) >> 8;\n      bytes[i - 2] = (bytes[i - 2] * alpha + g0 * alpha_) >> 8;\n      bytes[i - 1] = (bytes[i - 1] * alpha + b0 * alpha_) >> 8;\n    }\n  }\n}\n\nfunction composeSMaskAlpha(maskData, layerData, transferMap) {\n  const length = maskData.length;\n  const scale = 1 / 255;\n  for (let i = 3; i < length; i += 4) {\n    const alpha = transferMap ? transferMap[maskData[i]] : maskData[i];\n    layerData[i] = (layerData[i] * alpha * scale) | 0;\n  }\n}\n\nfunction composeSMaskLuminosity(maskData, layerData, transferMap) {\n  const length = maskData.length;\n  for (let i = 3; i < length; i += 4) {\n    const y =\n      maskData[i - 3] * 77 + // * 0.3 / 255 * 0x10000\n      maskData[i - 2] * 152 + // * 0.59 ....\n      maskData[i - 1] * 28; // * 0.11 ....\n    layerData[i] = transferMap\n      ? (layerData[i] * transferMap[y >> 8]) >> 8\n      : (layerData[i] * y) >> 16;\n  }\n}\n\nfunction genericComposeSMask(\n  maskCtx,\n  layerCtx,\n  width,\n  height,\n  subtype,\n  backdrop,\n  transferMap,\n  layerOffsetX,\n  layerOffsetY,\n  maskOffsetX,\n  maskOffsetY\n) {\n  const hasBackdrop = !!backdrop;\n  const r0 = hasBackdrop ? backdrop[0] : 0;\n  const g0 = hasBackdrop ? backdrop[1] : 0;\n  const b0 = hasBackdrop ? backdrop[2] : 0;\n\n  let composeFn;\n  if (subtype === \"Luminosity\") {\n    composeFn = composeSMaskLuminosity;\n  } else {\n    composeFn = composeSMaskAlpha;\n  }\n\n  // processing image in chunks to save memory\n  const PIXELS_TO_PROCESS = 1048576;\n  const chunkSize = Math.min(height, Math.ceil(PIXELS_TO_PROCESS / width));\n  for (let row = 0; row < height; row += chunkSize) {\n    const chunkHeight = Math.min(chunkSize, height - row);\n    const maskData = maskCtx.getImageData(\n      layerOffsetX - maskOffsetX,\n      row + (layerOffsetY - maskOffsetY),\n      width,\n      chunkHeight\n    );\n    const layerData = layerCtx.getImageData(\n      layerOffsetX,\n      row + layerOffsetY,\n      width,\n      chunkHeight\n    );\n\n    if (hasBackdrop) {\n      composeSMaskBackdrop(maskData.data, r0, g0, b0);\n    }\n    composeFn(maskData.data, layerData.data, transferMap);\n\n    layerCtx.putImageData(layerData, layerOffsetX, row + layerOffsetY);\n  }\n}\n\nfunction composeSMask(ctx, smask, layerCtx, layerBox) {\n  const layerOffsetX = layerBox[0];\n  const layerOffsetY = layerBox[1];\n  const layerWidth = layerBox[2] - layerOffsetX;\n  const layerHeight = layerBox[3] - layerOffsetY;\n  if (layerWidth === 0 || layerHeight === 0) {\n    return;\n  }\n  genericComposeSMask(\n    smask.context,\n    layerCtx,\n    layerWidth,\n    layerHeight,\n    smask.subtype,\n    smask.backdrop,\n    smask.transferMap,\n    layerOffsetX,\n    layerOffsetY,\n    smask.offsetX,\n    smask.offsetY\n  );\n  ctx.save();\n  ctx.globalAlpha = 1;\n  ctx.globalCompositeOperation = \"source-over\";\n  ctx.setTransform(1, 0, 0, 1, 0, 0);\n  ctx.drawImage(layerCtx.canvas, 0, 0);\n  ctx.restore();\n}\n\nfunction getImageSmoothingEnabled(transform, interpolate) {\n  const scale = Util.singularValueDecompose2dScale(transform);\n  // Round to a 32bit float so that `<=` check below will pass for numbers that\n  // are very close, but not exactly the same 64bit floats.\n  scale[0] = Math.fround(scale[0]);\n  scale[1] = Math.fround(scale[1]);\n  const actualScale = Math.fround(\n    (globalThis.devicePixelRatio || 1) * PixelsPerInch.PDF_TO_CSS_UNITS\n  );\n  if (interpolate !== undefined) {\n    // If the value is explicitly set use it.\n    return interpolate;\n  } else if (scale[0] <= actualScale || scale[1] <= actualScale) {\n    // Smooth when downscaling.\n    return true;\n  }\n  // Don't smooth when upscaling.\n  return false;\n}\n\nconst LINE_CAP_STYLES = [\"butt\", \"round\", \"square\"];\nconst LINE_JOIN_STYLES = [\"miter\", \"round\", \"bevel\"];\nconst NORMAL_CLIP = {};\nconst EO_CLIP = {};\n\nclass CanvasGraphics {\n  constructor(\n    canvasCtx,\n    commonObjs,\n    objs,\n    canvasFactory,\n    imageLayer,\n    optionalContentConfig,\n    annotationCanvasMap\n  ) {\n    this.ctx = canvasCtx;\n    this.current = new CanvasExtraState(\n      this.ctx.canvas.width,\n      this.ctx.canvas.height\n    );\n    this.stateStack = [];\n    this.pendingClip = null;\n    this.pendingEOFill = false;\n    this.res = null;\n    this.xobjs = null;\n    this.commonObjs = commonObjs;\n    this.objs = objs;\n    this.canvasFactory = canvasFactory;\n    this.imageLayer = imageLayer;\n    this.groupStack = [];\n    this.processingType3 = null;\n    // Patterns are painted relative to the initial page/form transform, see\n    // PDF spec 8.7.2 NOTE 1.\n    this.baseTransform = null;\n    this.baseTransformStack = [];\n    this.groupLevel = 0;\n    this.smaskStack = [];\n    this.smaskCounter = 0;\n    this.tempSMask = null;\n    this.suspendedCtx = null;\n    this.contentVisible = true;\n    this.markedContentStack = [];\n    this.optionalContentConfig = optionalContentConfig;\n    this.cachedCanvases = new CachedCanvases(this.canvasFactory);\n    this.cachedPatterns = new Map();\n    this.annotationCanvasMap = annotationCanvasMap;\n    this.viewportScale = 1;\n    this.outputScaleX = 1;\n    this.outputScaleY = 1;\n    if (canvasCtx) {\n      // NOTE: if mozCurrentTransform is polyfilled, then the current state of\n      // the transformation must already be set in canvasCtx._transformMatrix.\n      addContextCurrentTransform(canvasCtx);\n    }\n    this._cachedGetSinglePixelWidth = null;\n  }\n\n  beginDrawing({\n    transform,\n    viewport,\n    transparency = false,\n    background = null,\n  }) {\n    // For pdfs that use blend modes we have to clear the canvas else certain\n    // blend modes can look wrong since we'd be blending with a white\n    // backdrop. The problem with a transparent backdrop though is we then\n    // don't get sub pixel anti aliasing on text, creating temporary\n    // transparent canvas when we have blend modes.\n    const width = this.ctx.canvas.width;\n    const height = this.ctx.canvas.height;\n\n    this.ctx.save();\n    this.ctx.fillStyle = background || \"rgb(255, 255, 255)\";\n    this.ctx.fillRect(0, 0, width, height);\n    this.ctx.restore();\n\n    if (transparency) {\n      const transparentCanvas = this.cachedCanvases.getCanvas(\n        \"transparent\",\n        width,\n        height,\n        true\n      );\n      this.compositeCtx = this.ctx;\n      this.transparentCanvas = transparentCanvas.canvas;\n      this.ctx = transparentCanvas.context;\n      this.ctx.save();\n      // The transform can be applied before rendering, transferring it to\n      // the new canvas.\n      this.ctx.transform.apply(this.ctx, this.compositeCtx.mozCurrentTransform);\n    }\n\n    this.ctx.save();\n    resetCtxToDefault(this.ctx);\n    if (transform) {\n      this.ctx.transform.apply(this.ctx, transform);\n      this.outputScaleX = transform[0];\n      this.outputScaleY = transform[0];\n    }\n    this.ctx.transform.apply(this.ctx, viewport.transform);\n    this.viewportScale = viewport.scale;\n\n    this.baseTransform = this.ctx.mozCurrentTransform.slice();\n    this._combinedScaleFactor = Math.hypot(\n      this.baseTransform[0],\n      this.baseTransform[2]\n    );\n\n    if (this.imageLayer) {\n      this.imageLayer.beginLayout();\n    }\n  }\n\n  executeOperatorList(\n    operatorList,\n    executionStartIdx,\n    continueCallback,\n    stepper\n  ) {\n    const argsArray = operatorList.argsArray;\n    const fnArray = operatorList.fnArray;\n    let i = executionStartIdx || 0;\n    const argsArrayLen = argsArray.length;\n\n    // Sometimes the OperatorList to execute is empty.\n    if (argsArrayLen === i) {\n      return i;\n    }\n\n    const chunkOperations =\n      argsArrayLen - i > EXECUTION_STEPS &&\n      typeof continueCallback === \"function\";\n    const endTime = chunkOperations ? Date.now() + EXECUTION_TIME : 0;\n    let steps = 0;\n\n    const commonObjs = this.commonObjs;\n    const objs = this.objs;\n    let fnId;\n\n    while (true) {\n      if (stepper !== undefined && i === stepper.nextBreakPoint) {\n        stepper.breakIt(i, continueCallback);\n        return i;\n      }\n\n      fnId = fnArray[i];\n\n      if (fnId !== OPS.dependency) {\n        this[fnId].apply(this, argsArray[i]);\n      } else {\n        for (const depObjId of argsArray[i]) {\n          const objsPool = depObjId.startsWith(\"g_\") ? commonObjs : objs;\n\n          // If the promise isn't resolved yet, add the continueCallback\n          // to the promise and bail out.\n          if (!objsPool.has(depObjId)) {\n            objsPool.get(depObjId, continueCallback);\n            return i;\n          }\n        }\n      }\n\n      i++;\n\n      // If the entire operatorList was executed, stop as were done.\n      if (i === argsArrayLen) {\n        return i;\n      }\n\n      // If the execution took longer then a certain amount of time and\n      // `continueCallback` is specified, interrupt the execution.\n      if (chunkOperations && ++steps > EXECUTION_STEPS) {\n        if (Date.now() > endTime) {\n          continueCallback();\n          return i;\n        }\n        steps = 0;\n      }\n\n      // If the operatorList isn't executed completely yet OR the execution\n      // time was short enough, do another execution round.\n    }\n  }\n\n  endDrawing() {\n    // Finishing all opened operations such as SMask group painting.\n    while (this.stateStack.length || this.current.activeSMask !== null) {\n      this.restore();\n    }\n\n    this.ctx.restore();\n\n    if (this.transparentCanvas) {\n      this.ctx = this.compositeCtx;\n      this.ctx.save();\n      this.ctx.setTransform(1, 0, 0, 1, 0, 0); // Avoid apply transform twice\n      this.ctx.drawImage(this.transparentCanvas, 0, 0);\n      this.ctx.restore();\n      this.transparentCanvas = null;\n    }\n\n    this.cachedCanvases.clear();\n    this.cachedPatterns.clear();\n\n    if (this.imageLayer) {\n      this.imageLayer.endLayout();\n    }\n  }\n\n  _scaleImage(img, inverseTransform) {\n    // Vertical or horizontal scaling shall not be more than 2 to not lose the\n    // pixels during drawImage operation, painting on the temporary canvas(es)\n    // that are twice smaller in size.\n    const width = img.width;\n    const height = img.height;\n    let widthScale = Math.max(\n      Math.hypot(inverseTransform[0], inverseTransform[1]),\n      1\n    );\n    let heightScale = Math.max(\n      Math.hypot(inverseTransform[2], inverseTransform[3]),\n      1\n    );\n\n    let paintWidth = width,\n      paintHeight = height;\n    let tmpCanvasId = \"prescale1\";\n    let tmpCanvas, tmpCtx;\n    while (\n      (widthScale > 2 && paintWidth > 1) ||\n      (heightScale > 2 && paintHeight > 1)\n    ) {\n      let newWidth = paintWidth,\n        newHeight = paintHeight;\n      if (widthScale > 2 && paintWidth > 1) {\n        newWidth = Math.ceil(paintWidth / 2);\n        widthScale /= paintWidth / newWidth;\n      }\n      if (heightScale > 2 && paintHeight > 1) {\n        newHeight = Math.ceil(paintHeight / 2);\n        heightScale /= paintHeight / newHeight;\n      }\n      tmpCanvas = this.cachedCanvases.getCanvas(\n        tmpCanvasId,\n        newWidth,\n        newHeight\n      );\n      tmpCtx = tmpCanvas.context;\n      tmpCtx.clearRect(0, 0, newWidth, newHeight);\n      tmpCtx.drawImage(\n        img,\n        0,\n        0,\n        paintWidth,\n        paintHeight,\n        0,\n        0,\n        newWidth,\n        newHeight\n      );\n      img = tmpCanvas.canvas;\n      paintWidth = newWidth;\n      paintHeight = newHeight;\n      tmpCanvasId = tmpCanvasId === \"prescale1\" ? \"prescale2\" : \"prescale1\";\n    }\n    return {\n      img,\n      paintWidth,\n      paintHeight,\n    };\n  }\n\n  _createMaskCanvas(img) {\n    const ctx = this.ctx;\n    const width = img.width,\n      height = img.height;\n    const fillColor = this.current.fillColor;\n    const isPatternFill = this.current.patternFill;\n    const maskCanvas = this.cachedCanvases.getCanvas(\n      \"maskCanvas\",\n      width,\n      height\n    );\n    const maskCtx = maskCanvas.context;\n    putBinaryImageMask(maskCtx, img);\n\n    // Create the mask canvas at the size it will be drawn at and also set\n    // its transform to match the current transform so if there are any\n    // patterns applied they will be applied relative to the correct\n    // transform.\n    const objToCanvas = ctx.mozCurrentTransform;\n    let maskToCanvas = Util.transform(objToCanvas, [\n      1 / width,\n      0,\n      0,\n      -1 / height,\n      0,\n      0,\n    ]);\n    maskToCanvas = Util.transform(maskToCanvas, [1, 0, 0, 1, 0, -height]);\n    const cord1 = Util.applyTransform([0, 0], maskToCanvas);\n    const cord2 = Util.applyTransform([width, height], maskToCanvas);\n    const rect = Util.normalizeRect([cord1[0], cord1[1], cord2[0], cord2[1]]);\n    const drawnWidth = Math.ceil(rect[2] - rect[0]);\n    const drawnHeight = Math.ceil(rect[3] - rect[1]);\n    const fillCanvas = this.cachedCanvases.getCanvas(\n      \"fillCanvas\",\n      drawnWidth,\n      drawnHeight,\n      true\n    );\n    const fillCtx = fillCanvas.context;\n    // The offset will be the top-left cordinate mask.\n    const offsetX = Math.min(cord1[0], cord2[0]);\n    const offsetY = Math.min(cord1[1], cord2[1]);\n    fillCtx.translate(-offsetX, -offsetY);\n    fillCtx.transform.apply(fillCtx, maskToCanvas);\n    // Pre-scale if needed to improve image smoothing.\n    const scaled = this._scaleImage(\n      maskCanvas.canvas,\n      fillCtx.mozCurrentTransformInverse\n    );\n    fillCtx.imageSmoothingEnabled = getImageSmoothingEnabled(\n      fillCtx.mozCurrentTransform,\n      img.interpolate\n    );\n    fillCtx.drawImage(\n      scaled.img,\n      0,\n      0,\n      scaled.img.width,\n      scaled.img.height,\n      0,\n      0,\n      width,\n      height\n    );\n    fillCtx.globalCompositeOperation = \"source-in\";\n\n    const inverse = Util.transform(fillCtx.mozCurrentTransformInverse, [\n      1,\n      0,\n      0,\n      1,\n      -offsetX,\n      -offsetY,\n    ]);\n    fillCtx.fillStyle = isPatternFill\n      ? fillColor.getPattern(ctx, this, inverse, PathType.FILL)\n      : fillColor;\n\n    fillCtx.fillRect(0, 0, width, height);\n\n    // Round the offsets to avoid drawing fractional pixels.\n    return {\n      canvas: fillCanvas.canvas,\n      offsetX: Math.round(offsetX),\n      offsetY: Math.round(offsetY),\n    };\n  }\n\n  // Graphics state\n  setLineWidth(width) {\n    this.current.lineWidth = width;\n    this.ctx.lineWidth = width;\n  }\n\n  setLineCap(style) {\n    this.ctx.lineCap = LINE_CAP_STYLES[style];\n  }\n\n  setLineJoin(style) {\n    this.ctx.lineJoin = LINE_JOIN_STYLES[style];\n  }\n\n  setMiterLimit(limit) {\n    this.ctx.miterLimit = limit;\n  }\n\n  setDash(dashArray, dashPhase) {\n    const ctx = this.ctx;\n    if (ctx.setLineDash !== undefined) {\n      ctx.setLineDash(dashArray);\n      ctx.lineDashOffset = dashPhase;\n    }\n  }\n\n  setRenderingIntent(intent) {\n    // This operation is ignored since we haven't found a use case for it yet.\n  }\n\n  setFlatness(flatness) {\n    // This operation is ignored since we haven't found a use case for it yet.\n  }\n\n  setGState(states) {\n    for (let i = 0, ii = states.length; i < ii; i++) {\n      const state = states[i];\n      const key = state[0];\n      const value = state[1];\n\n      switch (key) {\n        case \"LW\":\n          this.setLineWidth(value);\n          break;\n        case \"LC\":\n          this.setLineCap(value);\n          break;\n        case \"LJ\":\n          this.setLineJoin(value);\n          break;\n        case \"ML\":\n          this.setMiterLimit(value);\n          break;\n        case \"D\":\n          this.setDash(value[0], value[1]);\n          break;\n        case \"RI\":\n          this.setRenderingIntent(value);\n          break;\n        case \"FL\":\n          this.setFlatness(value);\n          break;\n        case \"Font\":\n          this.setFont(value[0], value[1]);\n          break;\n        case \"CA\":\n          this.current.strokeAlpha = state[1];\n          break;\n        case \"ca\":\n          this.current.fillAlpha = state[1];\n          this.ctx.globalAlpha = state[1];\n          break;\n        case \"BM\":\n          this.ctx.globalCompositeOperation = value;\n          break;\n        case \"SMask\":\n          this.current.activeSMask = value ? this.tempSMask : null;\n          this.tempSMask = null;\n          this.checkSMaskState();\n          break;\n        case \"TR\":\n          this.current.transferMaps = value;\n      }\n    }\n  }\n\n  checkSMaskState() {\n    const inSMaskMode = !!this.suspendedCtx;\n    if (this.current.activeSMask && !inSMaskMode) {\n      this.beginSMaskMode();\n    } else if (!this.current.activeSMask && inSMaskMode) {\n      this.endSMaskMode();\n    }\n    // Else, the state is okay and nothing needs to be done.\n  }\n\n  /**\n   * Soft mask mode takes the current main drawing canvas and replaces it with\n   * a temporary canvas. Any drawing operations that happen on the temporary\n   * canvas need to be composed with the main canvas that was suspended (see\n   * `compose()`). The temporary canvas also duplicates many of its operations\n   * on the suspended canvas to keep them in sync, so that when the soft mask\n   * mode ends any clipping paths or transformations will still be active and in\n   * the right order on the canvas' graphics state stack.\n   */\n  beginSMaskMode() {\n    if (this.suspendedCtx) {\n      throw new Error(\"beginSMaskMode called while already in smask mode\");\n    }\n    const drawnWidth = this.ctx.canvas.width;\n    const drawnHeight = this.ctx.canvas.height;\n    const cacheId = \"smaskGroupAt\" + this.groupLevel;\n    const scratchCanvas = this.cachedCanvases.getCanvas(\n      cacheId,\n      drawnWidth,\n      drawnHeight,\n      true\n    );\n    this.suspendedCtx = this.ctx;\n    this.ctx = scratchCanvas.context;\n    const ctx = this.ctx;\n    ctx.setTransform.apply(ctx, this.suspendedCtx.mozCurrentTransform);\n    copyCtxState(this.suspendedCtx, ctx);\n    mirrorContextOperations(ctx, this.suspendedCtx);\n\n    this.setGState([\n      [\"BM\", \"source-over\"],\n      [\"ca\", 1],\n      [\"CA\", 1],\n    ]);\n  }\n\n  endSMaskMode() {\n    if (!this.suspendedCtx) {\n      throw new Error(\"endSMaskMode called while not in smask mode\");\n    }\n    // The soft mask is done, now restore the suspended canvas as the main\n    // drawing canvas.\n    this.ctx._removeMirroring();\n    copyCtxState(this.ctx, this.suspendedCtx);\n    this.ctx = this.suspendedCtx;\n\n    this.current.activeSMask = null;\n    this.suspendedCtx = null;\n  }\n\n  compose(dirtyBox) {\n    if (!this.current.activeSMask) {\n      return;\n    }\n\n    if (!dirtyBox) {\n      dirtyBox = [0, 0, this.ctx.canvas.width, this.ctx.canvas.height];\n    } else {\n      dirtyBox[0] = Math.floor(dirtyBox[0]);\n      dirtyBox[1] = Math.floor(dirtyBox[1]);\n      dirtyBox[2] = Math.ceil(dirtyBox[2]);\n      dirtyBox[3] = Math.ceil(dirtyBox[3]);\n    }\n    const smask = this.current.activeSMask;\n    const suspendedCtx = this.suspendedCtx;\n\n    composeSMask(suspendedCtx, smask, this.ctx, dirtyBox);\n    // Whatever was drawn has been moved to the suspended canvas, now clear it\n    // out of the current canvas.\n    this.ctx.save();\n    this.ctx.setTransform(1, 0, 0, 1, 0, 0);\n    this.ctx.clearRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\n    this.ctx.restore();\n  }\n\n  save() {\n    this.ctx.save();\n    const old = this.current;\n    this.stateStack.push(old);\n    this.current = old.clone();\n  }\n\n  restore() {\n    if (this.stateStack.length === 0 && this.current.activeSMask) {\n      this.endSMaskMode();\n    }\n\n    if (this.stateStack.length !== 0) {\n      this.current = this.stateStack.pop();\n      this.ctx.restore();\n      this.checkSMaskState();\n\n      // Ensure that the clipping path is reset (fixes issue6413.pdf).\n      this.pendingClip = null;\n\n      this._cachedGetSinglePixelWidth = null;\n    }\n  }\n\n  transform(a, b, c, d, e, f) {\n    this.ctx.transform(a, b, c, d, e, f);\n\n    this._cachedGetSinglePixelWidth = null;\n  }\n\n  // Path\n  constructPath(ops, args) {\n    const ctx = this.ctx;\n    const current = this.current;\n    let x = current.x,\n      y = current.y;\n    let startX, startY;\n    for (let i = 0, j = 0, ii = ops.length; i < ii; i++) {\n      switch (ops[i] | 0) {\n        case OPS.rectangle:\n          x = args[j++];\n          y = args[j++];\n          const width = args[j++];\n          const height = args[j++];\n\n          const xw = x + width;\n          const yh = y + height;\n          ctx.moveTo(x, y);\n          if (width === 0 || height === 0) {\n            ctx.lineTo(xw, yh);\n          } else {\n            ctx.lineTo(xw, y);\n            ctx.lineTo(xw, yh);\n            ctx.lineTo(x, yh);\n          }\n          current.updatePathMinMax(ctx.mozCurrentTransform, x, y);\n          current.updatePathMinMax(ctx.mozCurrentTransform, xw, yh);\n          ctx.closePath();\n          break;\n        case OPS.moveTo:\n          x = args[j++];\n          y = args[j++];\n          ctx.moveTo(x, y);\n          current.updatePathMinMax(ctx.mozCurrentTransform, x, y);\n          break;\n        case OPS.lineTo:\n          x = args[j++];\n          y = args[j++];\n          ctx.lineTo(x, y);\n          current.updatePathMinMax(ctx.mozCurrentTransform, x, y);\n          break;\n        case OPS.curveTo:\n          startX = x;\n          startY = y;\n          x = args[j + 4];\n          y = args[j + 5];\n          ctx.bezierCurveTo(\n            args[j],\n            args[j + 1],\n            args[j + 2],\n            args[j + 3],\n            x,\n            y\n          );\n          current.updateCurvePathMinMax(\n            ctx.mozCurrentTransform,\n            startX,\n            startY,\n            args[j],\n            args[j + 1],\n            args[j + 2],\n            args[j + 3],\n            x,\n            y\n          );\n          j += 6;\n          break;\n        case OPS.curveTo2:\n          startX = x;\n          startY = y;\n          ctx.bezierCurveTo(\n            x,\n            y,\n            args[j],\n            args[j + 1],\n            args[j + 2],\n            args[j + 3]\n          );\n          current.updateCurvePathMinMax(\n            ctx.mozCurrentTransform,\n            startX,\n            startY,\n            x,\n            y,\n            args[j],\n            args[j + 1],\n            args[j + 2],\n            args[j + 3]\n          );\n          x = args[j + 2];\n          y = args[j + 3];\n          j += 4;\n          break;\n        case OPS.curveTo3:\n          startX = x;\n          startY = y;\n          x = args[j + 2];\n          y = args[j + 3];\n          ctx.bezierCurveTo(args[j], args[j + 1], x, y, x, y);\n          current.updateCurvePathMinMax(\n            ctx.mozCurrentTransform,\n            startX,\n            startY,\n            args[j],\n            args[j + 1],\n            x,\n            y,\n            x,\n            y\n          );\n          j += 4;\n          break;\n        case OPS.closePath:\n          ctx.closePath();\n          break;\n      }\n    }\n    current.setCurrentPoint(x, y);\n  }\n\n  closePath() {\n    this.ctx.closePath();\n  }\n\n  stroke(consumePath) {\n    consumePath = typeof consumePath !== \"undefined\" ? consumePath : true;\n    const ctx = this.ctx;\n    const strokeColor = this.current.strokeColor;\n    // For stroke we want to temporarily change the global alpha to the\n    // stroking alpha.\n    ctx.globalAlpha = this.current.strokeAlpha;\n    if (this.contentVisible) {\n      if (typeof strokeColor === \"object\" && strokeColor?.getPattern) {\n        const lineWidth = this.getSinglePixelWidth();\n        ctx.save();\n        ctx.strokeStyle = strokeColor.getPattern(\n          ctx,\n          this,\n          ctx.mozCurrentTransformInverse,\n          PathType.STROKE\n        );\n        // Prevent drawing too thin lines by enforcing a minimum line width.\n        ctx.lineWidth = Math.max(lineWidth, this.current.lineWidth);\n        ctx.stroke();\n        ctx.restore();\n      } else {\n        const lineWidth = this.getSinglePixelWidth();\n        if (lineWidth < 0 && -lineWidth >= this.current.lineWidth) {\n          // The current transform will transform a square pixel into a\n          // parallelogram where both heights are lower than 1 and not equal.\n          ctx.save();\n          ctx.resetTransform();\n          ctx.lineWidth = Math.round(this._combinedScaleFactor);\n          ctx.stroke();\n          ctx.restore();\n        } else {\n          // Prevent drawing too thin lines by enforcing a minimum line width.\n          ctx.lineWidth = Math.max(lineWidth, this.current.lineWidth);\n          ctx.stroke();\n        }\n      }\n    }\n    if (consumePath) {\n      this.consumePath(this.current.getClippedPathBoundingBox());\n    }\n    // Restore the global alpha to the fill alpha\n    ctx.globalAlpha = this.current.fillAlpha;\n  }\n\n  closeStroke() {\n    this.closePath();\n    this.stroke();\n  }\n\n  fill(consumePath) {\n    consumePath = typeof consumePath !== \"undefined\" ? consumePath : true;\n    const ctx = this.ctx;\n    const fillColor = this.current.fillColor;\n    const isPatternFill = this.current.patternFill;\n    let needRestore = false;\n\n    if (isPatternFill) {\n      ctx.save();\n      ctx.fillStyle = fillColor.getPattern(\n        ctx,\n        this,\n        ctx.mozCurrentTransformInverse,\n        PathType.FILL\n      );\n      needRestore = true;\n    }\n\n    const intersect = this.current.getClippedPathBoundingBox();\n    if (this.contentVisible && intersect !== null) {\n      if (this.pendingEOFill) {\n        ctx.fill(\"evenodd\");\n        this.pendingEOFill = false;\n      } else {\n        ctx.fill();\n      }\n    }\n\n    if (needRestore) {\n      ctx.restore();\n    }\n    if (consumePath) {\n      this.consumePath(intersect);\n    }\n  }\n\n  eoFill() {\n    this.pendingEOFill = true;\n    this.fill();\n  }\n\n  fillStroke() {\n    this.fill(false);\n    this.stroke(false);\n\n    this.consumePath();\n  }\n\n  eoFillStroke() {\n    this.pendingEOFill = true;\n    this.fillStroke();\n  }\n\n  closeFillStroke() {\n    this.closePath();\n    this.fillStroke();\n  }\n\n  closeEOFillStroke() {\n    this.pendingEOFill = true;\n    this.closePath();\n    this.fillStroke();\n  }\n\n  endPath() {\n    this.consumePath();\n  }\n\n  // Clipping\n  clip() {\n    this.pendingClip = NORMAL_CLIP;\n  }\n\n  eoClip() {\n    this.pendingClip = EO_CLIP;\n  }\n\n  // Text\n  beginText() {\n    this.current.textMatrix = IDENTITY_MATRIX;\n    this.current.textMatrixScale = 1;\n    this.current.x = this.current.lineX = 0;\n    this.current.y = this.current.lineY = 0;\n  }\n\n  endText() {\n    const paths = this.pendingTextPaths;\n    const ctx = this.ctx;\n    if (paths === undefined) {\n      ctx.beginPath();\n      return;\n    }\n\n    ctx.save();\n    ctx.beginPath();\n    for (let i = 0; i < paths.length; i++) {\n      const path = paths[i];\n      ctx.setTransform.apply(ctx, path.transform);\n      ctx.translate(path.x, path.y);\n      path.addToPath(ctx, path.fontSize);\n    }\n    ctx.restore();\n    ctx.clip();\n    ctx.beginPath();\n    delete this.pendingTextPaths;\n  }\n\n  setCharSpacing(spacing) {\n    this.current.charSpacing = spacing;\n  }\n\n  setWordSpacing(spacing) {\n    this.current.wordSpacing = spacing;\n  }\n\n  setHScale(scale) {\n    this.current.textHScale = scale / 100;\n  }\n\n  setLeading(leading) {\n    this.current.leading = -leading;\n  }\n\n  setFont(fontRefName, size) {\n    const fontObj = this.commonObjs.get(fontRefName);\n    const current = this.current;\n\n    if (!fontObj) {\n      throw new Error(`Can't find font for ${fontRefName}`);\n    }\n    current.fontMatrix = fontObj.fontMatrix || FONT_IDENTITY_MATRIX;\n\n    // A valid matrix needs all main diagonal elements to be non-zero\n    // This also ensures we bypass FF bugzilla bug #719844.\n    if (current.fontMatrix[0] === 0 || current.fontMatrix[3] === 0) {\n      warn(\"Invalid font matrix for font \" + fontRefName);\n    }\n\n    // The spec for Tf (setFont) says that 'size' specifies the font 'scale',\n    // and in some docs this can be negative (inverted x-y axes).\n    if (size < 0) {\n      size = -size;\n      current.fontDirection = -1;\n    } else {\n      current.fontDirection = 1;\n    }\n\n    this.current.font = fontObj;\n    this.current.fontSize = size;\n\n    if (fontObj.isType3Font) {\n      return; // we don't need ctx.font for Type3 fonts\n    }\n\n    const name = fontObj.loadedName || \"sans-serif\";\n\n    let bold = \"normal\";\n    if (fontObj.black) {\n      bold = \"900\";\n    } else if (fontObj.bold) {\n      bold = \"bold\";\n    }\n    const italic = fontObj.italic ? \"italic\" : \"normal\";\n    const typeface = `\"${name}\", ${fontObj.fallbackName}`;\n\n    // Some font backends cannot handle fonts below certain size.\n    // Keeping the font at minimal size and using the fontSizeScale to change\n    // the current transformation matrix before the fillText/strokeText.\n    // See https://bugzilla.mozilla.org/show_bug.cgi?id=726227\n    let browserFontSize = size;\n    if (size < MIN_FONT_SIZE) {\n      browserFontSize = MIN_FONT_SIZE;\n    } else if (size > MAX_FONT_SIZE) {\n      browserFontSize = MAX_FONT_SIZE;\n    }\n    this.current.fontSizeScale = size / browserFontSize;\n\n    this.ctx.font = `${italic} ${bold} ${browserFontSize}px ${typeface}`;\n  }\n\n  setTextRenderingMode(mode) {\n    this.current.textRenderingMode = mode;\n  }\n\n  setTextRise(rise) {\n    this.current.textRise = rise;\n  }\n\n  moveText(x, y) {\n    this.current.x = this.current.lineX += x;\n    this.current.y = this.current.lineY += y;\n  }\n\n  setLeadingMoveText(x, y) {\n    this.setLeading(-y);\n    this.moveText(x, y);\n  }\n\n  setTextMatrix(a, b, c, d, e, f) {\n    this.current.textMatrix = [a, b, c, d, e, f];\n    this.current.textMatrixScale = Math.hypot(a, b);\n\n    this.current.x = this.current.lineX = 0;\n    this.current.y = this.current.lineY = 0;\n  }\n\n  nextLine() {\n    this.moveText(0, this.current.leading);\n  }\n\n  paintChar(character, x, y, patternTransform, resetLineWidthToOne) {\n    const ctx = this.ctx;\n    const current = this.current;\n    const font = current.font;\n    const textRenderingMode = current.textRenderingMode;\n    const fontSize = current.fontSize / current.fontSizeScale;\n    const fillStrokeMode =\n      textRenderingMode & TextRenderingMode.FILL_STROKE_MASK;\n    const isAddToPathSet = !!(\n      textRenderingMode & TextRenderingMode.ADD_TO_PATH_FLAG\n    );\n    const patternFill = current.patternFill && !font.missingFile;\n\n    let addToPath;\n    if (font.disableFontFace || isAddToPathSet || patternFill) {\n      addToPath = font.getPathGenerator(this.commonObjs, character);\n    }\n\n    if (font.disableFontFace || patternFill) {\n      ctx.save();\n      ctx.translate(x, y);\n      ctx.beginPath();\n      addToPath(ctx, fontSize);\n      if (patternTransform) {\n        ctx.setTransform.apply(ctx, patternTransform);\n      }\n      if (\n        fillStrokeMode === TextRenderingMode.FILL ||\n        fillStrokeMode === TextRenderingMode.FILL_STROKE\n      ) {\n        ctx.fill();\n      }\n      if (\n        fillStrokeMode === TextRenderingMode.STROKE ||\n        fillStrokeMode === TextRenderingMode.FILL_STROKE\n      ) {\n        if (resetLineWidthToOne) {\n          ctx.resetTransform();\n          ctx.lineWidth = Math.round(this._combinedScaleFactor);\n        }\n        ctx.stroke();\n      }\n      ctx.restore();\n    } else {\n      if (\n        fillStrokeMode === TextRenderingMode.FILL ||\n        fillStrokeMode === TextRenderingMode.FILL_STROKE\n      ) {\n        ctx.fillText(character, x, y);\n      }\n      if (\n        fillStrokeMode === TextRenderingMode.STROKE ||\n        fillStrokeMode === TextRenderingMode.FILL_STROKE\n      ) {\n        if (resetLineWidthToOne) {\n          ctx.save();\n          ctx.moveTo(x, y);\n          ctx.resetTransform();\n          ctx.lineWidth = Math.round(this._combinedScaleFactor);\n          ctx.strokeText(character, 0, 0);\n          ctx.restore();\n        } else {\n          ctx.strokeText(character, x, y);\n        }\n      }\n    }\n\n    if (isAddToPathSet) {\n      const paths = this.pendingTextPaths || (this.pendingTextPaths = []);\n      paths.push({\n        transform: ctx.mozCurrentTransform,\n        x,\n        y,\n        fontSize,\n        addToPath,\n      });\n    }\n  }\n\n  get isFontSubpixelAAEnabled() {\n    // Checks if anti-aliasing is enabled when scaled text is painted.\n    // On Windows GDI scaled fonts looks bad.\n    const { context: ctx } = this.cachedCanvases.getCanvas(\n      \"isFontSubpixelAAEnabled\",\n      10,\n      10\n    );\n    ctx.scale(1.5, 1);\n    ctx.fillText(\"I\", 0, 10);\n    const data = ctx.getImageData(0, 0, 10, 10).data;\n    let enabled = false;\n    for (let i = 3; i < data.length; i += 4) {\n      if (data[i] > 0 && data[i] < 255) {\n        enabled = true;\n        break;\n      }\n    }\n    return shadow(this, \"isFontSubpixelAAEnabled\", enabled);\n  }\n\n  showText(glyphs) {\n    const current = this.current;\n    const font = current.font;\n    if (font.isType3Font) {\n      return this.showType3Text(glyphs);\n    }\n\n    const fontSize = current.fontSize;\n    if (fontSize === 0) {\n      return undefined;\n    }\n\n    const ctx = this.ctx;\n    const fontSizeScale = current.fontSizeScale;\n    const charSpacing = current.charSpacing;\n    const wordSpacing = current.wordSpacing;\n    const fontDirection = current.fontDirection;\n    const textHScale = current.textHScale * fontDirection;\n    const glyphsLength = glyphs.length;\n    const vertical = font.vertical;\n    const spacingDir = vertical ? 1 : -1;\n    const defaultVMetrics = font.defaultVMetrics;\n    const widthAdvanceScale = fontSize * current.fontMatrix[0];\n\n    const simpleFillText =\n      current.textRenderingMode === TextRenderingMode.FILL &&\n      !font.disableFontFace &&\n      !current.patternFill;\n\n    ctx.save();\n    ctx.transform.apply(ctx, current.textMatrix);\n    ctx.translate(current.x, current.y + current.textRise);\n\n    if (fontDirection > 0) {\n      ctx.scale(textHScale, -1);\n    } else {\n      ctx.scale(textHScale, 1);\n    }\n\n    let patternTransform;\n    if (current.patternFill) {\n      ctx.save();\n      const pattern = current.fillColor.getPattern(\n        ctx,\n        this,\n        ctx.mozCurrentTransformInverse,\n        PathType.FILL\n      );\n      patternTransform = ctx.mozCurrentTransform;\n      ctx.restore();\n      ctx.fillStyle = pattern;\n    }\n\n    let lineWidth = current.lineWidth;\n    let resetLineWidthToOne = false;\n    const scale = current.textMatrixScale;\n    if (scale === 0 || lineWidth === 0) {\n      const fillStrokeMode =\n        current.textRenderingMode & TextRenderingMode.FILL_STROKE_MASK;\n      if (\n        fillStrokeMode === TextRenderingMode.STROKE ||\n        fillStrokeMode === TextRenderingMode.FILL_STROKE\n      ) {\n        this._cachedGetSinglePixelWidth = null;\n        lineWidth = this.getSinglePixelWidth();\n        resetLineWidthToOne = lineWidth < 0;\n      }\n    } else {\n      lineWidth /= scale;\n    }\n\n    if (fontSizeScale !== 1.0) {\n      ctx.scale(fontSizeScale, fontSizeScale);\n      lineWidth /= fontSizeScale;\n    }\n\n    ctx.lineWidth = lineWidth;\n\n    let x = 0,\n      i;\n    for (i = 0; i < glyphsLength; ++i) {\n      const glyph = glyphs[i];\n      if (isNum(glyph)) {\n        x += (spacingDir * glyph * fontSize) / 1000;\n        continue;\n      }\n\n      let restoreNeeded = false;\n      const spacing = (glyph.isSpace ? wordSpacing : 0) + charSpacing;\n      const character = glyph.fontChar;\n      const accent = glyph.accent;\n      let scaledX, scaledY;\n      let width = glyph.width;\n      if (vertical) {\n        const vmetric = glyph.vmetric || defaultVMetrics;\n        const vx =\n          -(glyph.vmetric ? vmetric[1] : width * 0.5) * widthAdvanceScale;\n        const vy = vmetric[2] * widthAdvanceScale;\n\n        width = vmetric ? -vmetric[0] : width;\n        scaledX = vx / fontSizeScale;\n        scaledY = (x + vy) / fontSizeScale;\n      } else {\n        scaledX = x / fontSizeScale;\n        scaledY = 0;\n      }\n\n      if (font.remeasure && width > 0) {\n        // Some standard fonts may not have the exact width: rescale per\n        // character if measured width is greater than expected glyph width\n        // and subpixel-aa is enabled, otherwise just center the glyph.\n        const measuredWidth =\n          ((ctx.measureText(character).width * 1000) / fontSize) *\n          fontSizeScale;\n        if (width < measuredWidth && this.isFontSubpixelAAEnabled) {\n          const characterScaleX = width / measuredWidth;\n          restoreNeeded = true;\n          ctx.save();\n          ctx.scale(characterScaleX, 1);\n          scaledX /= characterScaleX;\n        } else if (width !== measuredWidth) {\n          scaledX +=\n            (((width - measuredWidth) / 2000) * fontSize) / fontSizeScale;\n        }\n      }\n\n      // Only attempt to draw the glyph if it is actually in the embedded font\n      // file or if there isn't a font file so the fallback font is shown.\n      if (this.contentVisible && (glyph.isInFont || font.missingFile)) {\n        if (simpleFillText && !accent) {\n          // common case\n          ctx.fillText(character, scaledX, scaledY);\n        } else {\n          this.paintChar(\n            character,\n            scaledX,\n            scaledY,\n            patternTransform,\n            resetLineWidthToOne\n          );\n          if (accent) {\n            const scaledAccentX =\n              scaledX + (fontSize * accent.offset.x) / fontSizeScale;\n            const scaledAccentY =\n              scaledY - (fontSize * accent.offset.y) / fontSizeScale;\n            this.paintChar(\n              accent.fontChar,\n              scaledAccentX,\n              scaledAccentY,\n              patternTransform,\n              resetLineWidthToOne\n            );\n          }\n        }\n      }\n\n      let charWidth;\n      if (vertical) {\n        charWidth = width * widthAdvanceScale - spacing * fontDirection;\n      } else {\n        charWidth = width * widthAdvanceScale + spacing * fontDirection;\n      }\n      x += charWidth;\n\n      if (restoreNeeded) {\n        ctx.restore();\n      }\n    }\n    if (vertical) {\n      current.y -= x;\n    } else {\n      current.x += x * textHScale;\n    }\n    ctx.restore();\n    this.compose();\n    return undefined;\n  }\n\n  showType3Text(glyphs) {\n    // Type3 fonts - each glyph is a \"mini-PDF\"\n    const ctx = this.ctx;\n    const current = this.current;\n    const font = current.font;\n    const fontSize = current.fontSize;\n    const fontDirection = current.fontDirection;\n    const spacingDir = font.vertical ? 1 : -1;\n    const charSpacing = current.charSpacing;\n    const wordSpacing = current.wordSpacing;\n    const textHScale = current.textHScale * fontDirection;\n    const fontMatrix = current.fontMatrix || FONT_IDENTITY_MATRIX;\n    const glyphsLength = glyphs.length;\n    const isTextInvisible =\n      current.textRenderingMode === TextRenderingMode.INVISIBLE;\n    let i, glyph, width, spacingLength;\n\n    if (isTextInvisible || fontSize === 0) {\n      return;\n    }\n    this._cachedGetSinglePixelWidth = null;\n\n    ctx.save();\n    ctx.transform.apply(ctx, current.textMatrix);\n    ctx.translate(current.x, current.y);\n\n    ctx.scale(textHScale, fontDirection);\n\n    for (i = 0; i < glyphsLength; ++i) {\n      glyph = glyphs[i];\n      if (isNum(glyph)) {\n        spacingLength = (spacingDir * glyph * fontSize) / 1000;\n        this.ctx.translate(spacingLength, 0);\n        current.x += spacingLength * textHScale;\n        continue;\n      }\n\n      const spacing = (glyph.isSpace ? wordSpacing : 0) + charSpacing;\n      const operatorList = font.charProcOperatorList[glyph.operatorListId];\n      if (!operatorList) {\n        warn(`Type3 character \"${glyph.operatorListId}\" is not available.`);\n        continue;\n      }\n      if (this.contentVisible) {\n        this.processingType3 = glyph;\n        this.save();\n        ctx.scale(fontSize, fontSize);\n        ctx.transform.apply(ctx, fontMatrix);\n        this.executeOperatorList(operatorList);\n        this.restore();\n      }\n\n      const transformed = Util.applyTransform([glyph.width, 0], fontMatrix);\n      width = transformed[0] * fontSize + spacing;\n\n      ctx.translate(width, 0);\n      current.x += width * textHScale;\n    }\n    ctx.restore();\n    this.processingType3 = null;\n  }\n\n  // Type3 fonts\n  setCharWidth(xWidth, yWidth) {\n    // We can safely ignore this since the width should be the same\n    // as the width in the Widths array.\n  }\n\n  setCharWidthAndBounds(xWidth, yWidth, llx, lly, urx, ury) {\n    // TODO According to the spec we're also suppose to ignore any operators\n    // that set color or include images while processing this type3 font.\n    this.ctx.rect(llx, lly, urx - llx, ury - lly);\n    this.clip();\n    this.endPath();\n  }\n\n  // Color\n  getColorN_Pattern(IR) {\n    let pattern;\n    if (IR[0] === \"TilingPattern\") {\n      const color = IR[1];\n      const baseTransform =\n        this.baseTransform || this.ctx.mozCurrentTransform.slice();\n      const canvasGraphicsFactory = {\n        createCanvasGraphics: ctx => {\n          return new CanvasGraphics(\n            ctx,\n            this.commonObjs,\n            this.objs,\n            this.canvasFactory\n          );\n        },\n      };\n      pattern = new TilingPattern(\n        IR,\n        color,\n        this.ctx,\n        canvasGraphicsFactory,\n        baseTransform\n      );\n    } else {\n      pattern = this._getPattern(IR[1], IR[2]);\n    }\n    return pattern;\n  }\n\n  setStrokeColorN() {\n    this.current.strokeColor = this.getColorN_Pattern(arguments);\n  }\n\n  setFillColorN() {\n    this.current.fillColor = this.getColorN_Pattern(arguments);\n    this.current.patternFill = true;\n  }\n\n  setStrokeRGBColor(r, g, b) {\n    const color = Util.makeHexColor(r, g, b);\n    this.ctx.strokeStyle = color;\n    this.current.strokeColor = color;\n  }\n\n  setFillRGBColor(r, g, b) {\n    const color = Util.makeHexColor(r, g, b);\n    this.ctx.fillStyle = color;\n    this.current.fillColor = color;\n    this.current.patternFill = false;\n  }\n\n  _getPattern(objId, matrix = null) {\n    let pattern;\n    if (this.cachedPatterns.has(objId)) {\n      pattern = this.cachedPatterns.get(objId);\n    } else {\n      pattern = getShadingPattern(this.objs.get(objId));\n      this.cachedPatterns.set(objId, pattern);\n    }\n    if (matrix) {\n      pattern.matrix = matrix;\n    }\n    return pattern;\n  }\n\n  shadingFill(objId) {\n    if (!this.contentVisible) {\n      return;\n    }\n    const ctx = this.ctx;\n\n    this.save();\n    const pattern = this._getPattern(objId);\n    ctx.fillStyle = pattern.getPattern(\n      ctx,\n      this,\n      ctx.mozCurrentTransformInverse,\n      PathType.SHADING\n    );\n\n    const inv = ctx.mozCurrentTransformInverse;\n    if (inv) {\n      const canvas = ctx.canvas;\n      const width = canvas.width;\n      const height = canvas.height;\n\n      const bl = Util.applyTransform([0, 0], inv);\n      const br = Util.applyTransform([0, height], inv);\n      const ul = Util.applyTransform([width, 0], inv);\n      const ur = Util.applyTransform([width, height], inv);\n\n      const x0 = Math.min(bl[0], br[0], ul[0], ur[0]);\n      const y0 = Math.min(bl[1], br[1], ul[1], ur[1]);\n      const x1 = Math.max(bl[0], br[0], ul[0], ur[0]);\n      const y1 = Math.max(bl[1], br[1], ul[1], ur[1]);\n\n      this.ctx.fillRect(x0, y0, x1 - x0, y1 - y0);\n    } else {\n      // HACK to draw the gradient onto an infinite rectangle.\n      // PDF gradients are drawn across the entire image while\n      // Canvas only allows gradients to be drawn in a rectangle\n      // The following bug should allow us to remove this.\n      // https://bugzilla.mozilla.org/show_bug.cgi?id=664884\n\n      this.ctx.fillRect(-1e10, -1e10, 2e10, 2e10);\n    }\n\n    this.compose(this.current.getClippedPathBoundingBox());\n    this.restore();\n  }\n\n  // Images\n  beginInlineImage() {\n    unreachable(\"Should not call beginInlineImage\");\n  }\n\n  beginImageData() {\n    unreachable(\"Should not call beginImageData\");\n  }\n\n  paintFormXObjectBegin(matrix, bbox) {\n    if (!this.contentVisible) {\n      return;\n    }\n    this.save();\n    this.baseTransformStack.push(this.baseTransform);\n\n    if (Array.isArray(matrix) && matrix.length === 6) {\n      this.transform.apply(this, matrix);\n    }\n\n    this.baseTransform = this.ctx.mozCurrentTransform;\n\n    if (bbox) {\n      const width = bbox[2] - bbox[0];\n      const height = bbox[3] - bbox[1];\n      this.ctx.rect(bbox[0], bbox[1], width, height);\n      this.current.updatePathMinMax(\n        this.ctx.mozCurrentTransform,\n        bbox[0],\n        bbox[1]\n      );\n      this.current.updatePathMinMax(\n        this.ctx.mozCurrentTransform,\n        bbox[2],\n        bbox[3]\n      );\n      this.clip();\n      this.endPath();\n    }\n  }\n\n  paintFormXObjectEnd() {\n    if (!this.contentVisible) {\n      return;\n    }\n    this.restore();\n    this.baseTransform = this.baseTransformStack.pop();\n  }\n\n  beginGroup(group) {\n    if (!this.contentVisible) {\n      return;\n    }\n\n    this.save();\n    // If there's an active soft mask we don't want it enabled for the group, so\n    // clear it out. The mask and suspended canvas will be restored in endGroup.\n    const suspendedCtx = this.suspendedCtx;\n    if (this.current.activeSMask) {\n      this.suspendedCtx = null;\n      this.current.activeSMask = null;\n    }\n\n    const currentCtx = this.ctx;\n    // TODO non-isolated groups - according to Rik at adobe non-isolated\n    // group results aren't usually that different and they even have tools\n    // that ignore this setting. Notes from Rik on implementing:\n    // - When you encounter an transparency group, create a new canvas with\n    // the dimensions of the bbox\n    // - copy the content from the previous canvas to the new canvas\n    // - draw as usual\n    // - remove the backdrop alpha:\n    // alphaNew = 1 - (1 - alpha)/(1 - alphaBackdrop) with 'alpha' the alpha\n    // value of your transparency group and 'alphaBackdrop' the alpha of the\n    // backdrop\n    // - remove background color:\n    // colorNew = color - alphaNew *colorBackdrop /(1 - alphaNew)\n    if (!group.isolated) {\n      info(\"TODO: Support non-isolated groups.\");\n    }\n\n    // TODO knockout - supposedly possible with the clever use of compositing\n    // modes.\n    if (group.knockout) {\n      warn(\"Knockout groups not supported.\");\n    }\n\n    const currentTransform = currentCtx.mozCurrentTransform;\n    if (group.matrix) {\n      currentCtx.transform.apply(currentCtx, group.matrix);\n    }\n    if (!group.bbox) {\n      throw new Error(\"Bounding box is required.\");\n    }\n\n    // Based on the current transform figure out how big the bounding box\n    // will actually be.\n    let bounds = Util.getAxialAlignedBoundingBox(\n      group.bbox,\n      currentCtx.mozCurrentTransform\n    );\n    // Clip the bounding box to the current canvas.\n    const canvasBounds = [\n      0,\n      0,\n      currentCtx.canvas.width,\n      currentCtx.canvas.height,\n    ];\n    bounds = Util.intersect(bounds, canvasBounds) || [0, 0, 0, 0];\n    // Use ceil in case we're between sizes so we don't create canvas that is\n    // too small and make the canvas at least 1x1 pixels.\n    const offsetX = Math.floor(bounds[0]);\n    const offsetY = Math.floor(bounds[1]);\n    let drawnWidth = Math.max(Math.ceil(bounds[2]) - offsetX, 1);\n    let drawnHeight = Math.max(Math.ceil(bounds[3]) - offsetY, 1);\n    let scaleX = 1,\n      scaleY = 1;\n    if (drawnWidth > MAX_GROUP_SIZE) {\n      scaleX = drawnWidth / MAX_GROUP_SIZE;\n      drawnWidth = MAX_GROUP_SIZE;\n    }\n    if (drawnHeight > MAX_GROUP_SIZE) {\n      scaleY = drawnHeight / MAX_GROUP_SIZE;\n      drawnHeight = MAX_GROUP_SIZE;\n    }\n\n    this.current.startNewPathAndClipBox([0, 0, drawnWidth, drawnHeight]);\n\n    let cacheId = \"groupAt\" + this.groupLevel;\n    if (group.smask) {\n      // Using two cache entries is case if masks are used one after another.\n      cacheId += \"_smask_\" + (this.smaskCounter++ % 2);\n    }\n    const scratchCanvas = this.cachedCanvases.getCanvas(\n      cacheId,\n      drawnWidth,\n      drawnHeight,\n      true\n    );\n    const groupCtx = scratchCanvas.context;\n\n    // Since we created a new canvas that is just the size of the bounding box\n    // we have to translate the group ctx.\n    groupCtx.scale(1 / scaleX, 1 / scaleY);\n    groupCtx.translate(-offsetX, -offsetY);\n    groupCtx.transform.apply(groupCtx, currentTransform);\n\n    if (group.smask) {\n      // Saving state and cached mask to be used in setGState.\n      this.smaskStack.push({\n        canvas: scratchCanvas.canvas,\n        context: groupCtx,\n        offsetX,\n        offsetY,\n        scaleX,\n        scaleY,\n        subtype: group.smask.subtype,\n        backdrop: group.smask.backdrop,\n        transferMap: group.smask.transferMap || null,\n        startTransformInverse: null, // used during suspend operation\n      });\n    } else {\n      // Setup the current ctx so when the group is popped we draw it at the\n      // right location.\n      currentCtx.setTransform(1, 0, 0, 1, 0, 0);\n      currentCtx.translate(offsetX, offsetY);\n      currentCtx.scale(scaleX, scaleY);\n      currentCtx.save();\n    }\n    // The transparency group inherits all off the current graphics state\n    // except the blend mode, soft mask, and alpha constants.\n    copyCtxState(currentCtx, groupCtx);\n    this.ctx = groupCtx;\n    this.setGState([\n      [\"BM\", \"source-over\"],\n      [\"ca\", 1],\n      [\"CA\", 1],\n    ]);\n    this.groupStack.push({\n      ctx: currentCtx,\n      suspendedCtx,\n    });\n    this.groupLevel++;\n  }\n\n  endGroup(group) {\n    if (!this.contentVisible) {\n      return;\n    }\n    this.groupLevel--;\n    const groupCtx = this.ctx;\n    const { ctx, suspendedCtx } = this.groupStack.pop();\n    this.ctx = ctx;\n    // Turn off image smoothing to avoid sub pixel interpolation which can\n    // look kind of blurry for some pdfs.\n    this.ctx.imageSmoothingEnabled = false;\n\n    if (suspendedCtx) {\n      this.suspendedCtx = suspendedCtx;\n    }\n\n    if (group.smask) {\n      this.tempSMask = this.smaskStack.pop();\n      this.restore();\n    } else {\n      this.ctx.restore();\n      const currentMtx = this.ctx.mozCurrentTransform;\n      this.restore();\n      this.ctx.save();\n      this.ctx.setTransform.apply(this.ctx, currentMtx);\n      const dirtyBox = Util.getAxialAlignedBoundingBox(\n        [0, 0, groupCtx.canvas.width, groupCtx.canvas.height],\n        currentMtx\n      );\n      this.ctx.drawImage(groupCtx.canvas, 0, 0);\n      this.ctx.restore();\n      this.compose(dirtyBox);\n    }\n  }\n\n  beginAnnotations() {\n    this.save();\n    if (this.baseTransform) {\n      this.ctx.setTransform.apply(this.ctx, this.baseTransform);\n    }\n  }\n\n  endAnnotations() {\n    this.restore();\n  }\n\n  beginAnnotation(id, rect, transform, matrix, hasOwnCanvas) {\n    this.save();\n\n    if (Array.isArray(rect) && rect.length === 4) {\n      const width = rect[2] - rect[0];\n      const height = rect[3] - rect[1];\n\n      if (hasOwnCanvas && this.annotationCanvasMap) {\n        transform = transform.slice();\n        transform[4] -= rect[0];\n        transform[5] -= rect[1];\n\n        rect = rect.slice();\n        rect[0] = rect[1] = 0;\n        rect[2] = width;\n        rect[3] = height;\n\n        const [scaleX, scaleY] = Util.singularValueDecompose2dScale(\n          this.ctx.mozCurrentTransform\n        );\n        const { viewportScale } = this;\n        const canvasWidth = Math.ceil(\n          width * this.outputScaleX * viewportScale\n        );\n        const canvasHeight = Math.ceil(\n          height * this.outputScaleY * viewportScale\n        );\n\n        this.annotationCanvas = this.canvasFactory.create(\n          canvasWidth,\n          canvasHeight\n        );\n        const { canvas, context } = this.annotationCanvas;\n        canvas.style.width = `calc(${width}px * var(--viewport-scale-factor))`;\n        canvas.style.height = `calc(${height}px * var(--viewport-scale-factor))`;\n        this.annotationCanvasMap.set(id, canvas);\n        this.annotationCanvas.savedCtx = this.ctx;\n        this.ctx = context;\n        this.ctx.setTransform(scaleX, 0, 0, -scaleY, 0, height * scaleY);\n        addContextCurrentTransform(this.ctx);\n\n        resetCtxToDefault(this.ctx);\n      } else {\n        resetCtxToDefault(this.ctx);\n\n        this.ctx.rect(rect[0], rect[1], width, height);\n        this.clip();\n        this.endPath();\n      }\n    }\n\n    this.current = new CanvasExtraState(\n      this.ctx.canvas.width,\n      this.ctx.canvas.height\n    );\n\n    this.transform.apply(this, transform);\n    this.transform.apply(this, matrix);\n  }\n\n  endAnnotation() {\n    if (this.annotationCanvas) {\n      this.ctx = this.annotationCanvas.savedCtx;\n      delete this.annotationCanvas.savedCtx;\n      delete this.annotationCanvas;\n    }\n    this.restore();\n  }\n\n  paintImageMaskXObject(img) {\n    if (!this.contentVisible) {\n      return;\n    }\n    const ctx = this.ctx;\n    const width = img.width,\n      height = img.height;\n\n    const glyph = this.processingType3;\n\n    if (COMPILE_TYPE3_GLYPHS && glyph && glyph.compiled === undefined) {\n      if (width <= MAX_SIZE_TO_COMPILE && height <= MAX_SIZE_TO_COMPILE) {\n        glyph.compiled = compileType3Glyph({ data: img.data, width, height });\n      } else {\n        glyph.compiled = null;\n      }\n    }\n\n    if (glyph?.compiled) {\n      glyph.compiled(ctx);\n      return;\n    }\n    const mask = this._createMaskCanvas(img);\n    const maskCanvas = mask.canvas;\n\n    ctx.save();\n    // The mask is drawn with the transform applied. Reset the current\n    // transform to draw to the identity.\n    ctx.setTransform(1, 0, 0, 1, 0, 0);\n    ctx.drawImage(maskCanvas, mask.offsetX, mask.offsetY);\n    ctx.restore();\n    this.compose();\n  }\n\n  paintImageMaskXObjectRepeat(\n    imgData,\n    scaleX,\n    skewX = 0,\n    skewY = 0,\n    scaleY,\n    positions\n  ) {\n    if (!this.contentVisible) {\n      return;\n    }\n    const ctx = this.ctx;\n    ctx.save();\n    const currentTransform = ctx.mozCurrentTransform;\n    ctx.transform(scaleX, skewX, skewY, scaleY, 0, 0);\n    const mask = this._createMaskCanvas(imgData);\n\n    ctx.setTransform(1, 0, 0, 1, 0, 0);\n    for (let i = 0, ii = positions.length; i < ii; i += 2) {\n      const trans = Util.transform(currentTransform, [\n        scaleX,\n        skewX,\n        skewY,\n        scaleY,\n        positions[i],\n        positions[i + 1],\n      ]);\n\n      const [x, y] = Util.applyTransform([0, 0], trans);\n      ctx.drawImage(mask.canvas, x, y);\n    }\n    ctx.restore();\n    this.compose();\n  }\n\n  paintImageMaskXObjectGroup(images) {\n    if (!this.contentVisible) {\n      return;\n    }\n    const ctx = this.ctx;\n\n    const fillColor = this.current.fillColor;\n    const isPatternFill = this.current.patternFill;\n    for (let i = 0, ii = images.length; i < ii; i++) {\n      const image = images[i];\n      const width = image.width,\n        height = image.height;\n\n      const maskCanvas = this.cachedCanvases.getCanvas(\n        \"maskCanvas\",\n        width,\n        height\n      );\n      const maskCtx = maskCanvas.context;\n      maskCtx.save();\n\n      putBinaryImageMask(maskCtx, image);\n\n      maskCtx.globalCompositeOperation = \"source-in\";\n\n      maskCtx.fillStyle = isPatternFill\n        ? fillColor.getPattern(\n            maskCtx,\n            this,\n            ctx.mozCurrentTransformInverse,\n            PathType.FILL\n          )\n        : fillColor;\n      maskCtx.fillRect(0, 0, width, height);\n\n      maskCtx.restore();\n\n      ctx.save();\n      ctx.transform.apply(ctx, image.transform);\n      ctx.scale(1, -1);\n      ctx.drawImage(maskCanvas.canvas, 0, 0, width, height, 0, -1, 1, 1);\n      ctx.restore();\n    }\n    this.compose();\n  }\n\n  paintImageXObject(objId) {\n    if (!this.contentVisible) {\n      return;\n    }\n    const imgData = objId.startsWith(\"g_\")\n      ? this.commonObjs.get(objId)\n      : this.objs.get(objId);\n    if (!imgData) {\n      warn(\"Dependent image isn't ready yet\");\n      return;\n    }\n\n    this.paintInlineImageXObject(imgData);\n  }\n\n  paintImageXObjectRepeat(objId, scaleX, scaleY, positions) {\n    if (!this.contentVisible) {\n      return;\n    }\n    const imgData = objId.startsWith(\"g_\")\n      ? this.commonObjs.get(objId)\n      : this.objs.get(objId);\n    if (!imgData) {\n      warn(\"Dependent image isn't ready yet\");\n      return;\n    }\n\n    const width = imgData.width;\n    const height = imgData.height;\n    const map = [];\n    for (let i = 0, ii = positions.length; i < ii; i += 2) {\n      map.push({\n        transform: [scaleX, 0, 0, scaleY, positions[i], positions[i + 1]],\n        x: 0,\n        y: 0,\n        w: width,\n        h: height,\n      });\n    }\n    this.paintInlineImageXObjectGroup(imgData, map);\n  }\n\n  paintInlineImageXObject(imgData) {\n    if (!this.contentVisible) {\n      return;\n    }\n    const width = imgData.width;\n    const height = imgData.height;\n    const ctx = this.ctx;\n\n    this.save();\n    // scale the image to the unit square\n    ctx.scale(1 / width, -1 / height);\n\n    let imgToPaint;\n    // typeof check is needed due to node.js support, see issue #8489\n    if (\n      (typeof HTMLElement === \"function\" && imgData instanceof HTMLElement) ||\n      !imgData.data\n    ) {\n      imgToPaint = imgData;\n    } else {\n      const tmpCanvas = this.cachedCanvases.getCanvas(\n        \"inlineImage\",\n        width,\n        height\n      );\n      const tmpCtx = tmpCanvas.context;\n      putBinaryImageData(tmpCtx, imgData, this.current.transferMaps);\n      imgToPaint = tmpCanvas.canvas;\n    }\n\n    const scaled = this._scaleImage(imgToPaint, ctx.mozCurrentTransformInverse);\n    ctx.imageSmoothingEnabled = getImageSmoothingEnabled(\n      ctx.mozCurrentTransform,\n      imgData.interpolate\n    );\n    ctx.drawImage(\n      scaled.img,\n      0,\n      0,\n      scaled.paintWidth,\n      scaled.paintHeight,\n      0,\n      -height,\n      width,\n      height\n    );\n\n    if (this.imageLayer) {\n      const position = this.getCanvasPosition(0, -height);\n      this.imageLayer.appendImage({\n        imgData,\n        left: position[0],\n        top: position[1],\n        width: width / ctx.mozCurrentTransformInverse[0],\n        height: height / ctx.mozCurrentTransformInverse[3],\n      });\n    }\n    this.compose();\n    this.restore();\n  }\n\n  paintInlineImageXObjectGroup(imgData, map) {\n    if (!this.contentVisible) {\n      return;\n    }\n    const ctx = this.ctx;\n    const w = imgData.width;\n    const h = imgData.height;\n\n    const tmpCanvas = this.cachedCanvases.getCanvas(\"inlineImage\", w, h);\n    const tmpCtx = tmpCanvas.context;\n    putBinaryImageData(tmpCtx, imgData, this.current.transferMaps);\n\n    for (let i = 0, ii = map.length; i < ii; i++) {\n      const entry = map[i];\n      ctx.save();\n      ctx.transform.apply(ctx, entry.transform);\n      ctx.scale(1, -1);\n      ctx.drawImage(\n        tmpCanvas.canvas,\n        entry.x,\n        entry.y,\n        entry.w,\n        entry.h,\n        0,\n        -1,\n        1,\n        1\n      );\n      if (this.imageLayer) {\n        const position = this.getCanvasPosition(entry.x, entry.y);\n        this.imageLayer.appendImage({\n          imgData,\n          left: position[0],\n          top: position[1],\n          width: w,\n          height: h,\n        });\n      }\n      ctx.restore();\n    }\n    this.compose();\n  }\n\n  paintSolidColorImageMask() {\n    if (!this.contentVisible) {\n      return;\n    }\n    this.ctx.fillRect(0, 0, 1, 1);\n    this.compose();\n  }\n\n  // Marked content\n\n  markPoint(tag) {\n    // TODO Marked content.\n  }\n\n  markPointProps(tag, properties) {\n    // TODO Marked content.\n  }\n\n  beginMarkedContent(tag) {\n    this.markedContentStack.push({\n      visible: true,\n    });\n  }\n\n  beginMarkedContentProps(tag, properties) {\n    if (tag === \"OC\") {\n      this.markedContentStack.push({\n        visible: this.optionalContentConfig.isVisible(properties),\n      });\n    } else {\n      this.markedContentStack.push({\n        visible: true,\n      });\n    }\n    this.contentVisible = this.isContentVisible();\n  }\n\n  endMarkedContent() {\n    this.markedContentStack.pop();\n    this.contentVisible = this.isContentVisible();\n  }\n\n  // Compatibility\n\n  beginCompat() {\n    // TODO ignore undefined operators (should we do that anyway?)\n  }\n\n  endCompat() {\n    // TODO stop ignoring undefined operators\n  }\n\n  // Helper functions\n\n  consumePath(clipBox) {\n    if (this.pendingClip) {\n      this.current.updateClipFromPath();\n    }\n    if (!this.pendingClip) {\n      this.compose(clipBox);\n    }\n    const ctx = this.ctx;\n    if (this.pendingClip) {\n      if (this.pendingClip === EO_CLIP) {\n        ctx.clip(\"evenodd\");\n      } else {\n        ctx.clip();\n      }\n      this.pendingClip = null;\n    }\n    this.current.startNewPathAndClipBox(this.current.clipBox);\n    ctx.beginPath();\n  }\n\n  getSinglePixelWidth() {\n    if (this._cachedGetSinglePixelWidth === null) {\n      // If transform is [a b] then a pixel (square) is transformed\n      //                 [c d]\n      // into a parallelogram: its area is the abs value of the determinant.\n      // This parallelogram has 2 heights:\n      //  - Area / |col_1|;\n      //  - Area / |col_2|.\n      // so in order to get a height of at least 1, pixel height\n      // must be computed as followed:\n      //  h = max(sqrt(a² + c²) / |det(M)|, sqrt(b² + d²) / |det(M)|).\n      // This is equivalent to:\n      //  h = max(|line_1_inv(M)|, |line_2_inv(M)|)\n      const m = this.ctx.mozCurrentTransform;\n\n      const absDet = Math.abs(m[0] * m[3] - m[2] * m[1]);\n      const sqNorm1 = m[0] ** 2 + m[2] ** 2;\n      const sqNorm2 = m[1] ** 2 + m[3] ** 2;\n      const pixelHeight = Math.sqrt(Math.max(sqNorm1, sqNorm2)) / absDet;\n      if (sqNorm1 !== sqNorm2 && this._combinedScaleFactor * pixelHeight > 1) {\n        // The parallelogram isn't a square and at least one height\n        // is lower than 1 so the resulting line width must be 1\n        // but it cannot be achieved with one scale: when scaling a pixel\n        // we'll get a rectangle (see issue #12295).\n        // For example with matrix [0.001 0, 0, 100], a pixel is transformed\n        // in a rectangle 0.001x100. If we just scale by 1000 (to have a 1)\n        // then we'll get a rectangle 1x1e5 which is wrong.\n        // In this case, we must reset the transform, set linewidth to 1\n        // and then stroke.\n        this._cachedGetSinglePixelWidth = -(\n          this._combinedScaleFactor * pixelHeight\n        );\n      } else if (absDet > Number.EPSILON) {\n        this._cachedGetSinglePixelWidth = pixelHeight;\n      } else {\n        // Matrix is non-invertible.\n        this._cachedGetSinglePixelWidth = 1;\n      }\n    }\n\n    return this._cachedGetSinglePixelWidth;\n  }\n\n  getCanvasPosition(x, y) {\n    const transform = this.ctx.mozCurrentTransform;\n    return [\n      transform[0] * x + transform[2] * y + transform[4],\n      transform[1] * x + transform[3] * y + transform[5],\n    ];\n  }\n\n  isContentVisible() {\n    for (let i = this.markedContentStack.length - 1; i >= 0; i--) {\n      if (!this.markedContentStack[i].visible) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n\nfor (const op in OPS) {\n  if (CanvasGraphics.prototype[op] !== undefined) {\n    CanvasGraphics.prototype[OPS[op]] = CanvasGraphics.prototype[op];\n  }\n}\n\nexport { CanvasGraphics };\n","/* Copyright 2014 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FormatError,\n  info,\n  shadow,\n  unreachable,\n  Util,\n  warn,\n} from \"../shared/util.js\";\n\nconst PathType = {\n  FILL: \"Fill\",\n  STROKE: \"Stroke\",\n  SHADING: \"Shading\",\n};\n\nfunction applyBoundingBox(ctx, bbox) {\n  if (!bbox || typeof Path2D === \"undefined\") {\n    return;\n  }\n  const width = bbox[2] - bbox[0];\n  const height = bbox[3] - bbox[1];\n  const region = new Path2D();\n  region.rect(bbox[0], bbox[1], width, height);\n  ctx.clip(region);\n}\n\nclass BaseShadingPattern {\n  constructor() {\n    if (this.constructor === BaseShadingPattern) {\n      unreachable(\"Cannot initialize BaseShadingPattern.\");\n    }\n  }\n\n  getPattern() {\n    unreachable(\"Abstract method `getPattern` called.\");\n  }\n}\n\nclass RadialAxialShadingPattern extends BaseShadingPattern {\n  constructor(IR) {\n    super();\n    this._type = IR[1];\n    this._bbox = IR[2];\n    this._colorStops = IR[3];\n    this._p0 = IR[4];\n    this._p1 = IR[5];\n    this._r0 = IR[6];\n    this._r1 = IR[7];\n    this.matrix = null;\n  }\n\n  _createGradient(ctx) {\n    let grad;\n    if (this._type === \"axial\") {\n      grad = ctx.createLinearGradient(\n        this._p0[0],\n        this._p0[1],\n        this._p1[0],\n        this._p1[1]\n      );\n    } else if (this._type === \"radial\") {\n      grad = ctx.createRadialGradient(\n        this._p0[0],\n        this._p0[1],\n        this._r0,\n        this._p1[0],\n        this._p1[1],\n        this._r1\n      );\n    }\n\n    for (const colorStop of this._colorStops) {\n      grad.addColorStop(colorStop[0], colorStop[1]);\n    }\n    return grad;\n  }\n\n  getPattern(ctx, owner, inverse, pathType) {\n    let pattern;\n    if (pathType === PathType.STROKE || pathType === PathType.FILL) {\n      const ownerBBox = owner.current.getClippedPathBoundingBox(\n        pathType,\n        ctx.mozCurrentTransform\n      ) || [0, 0, 0, 0];\n      // Create a canvas that is only as big as the current path. This doesn't\n      // allow us to cache the pattern, but it generally creates much smaller\n      // canvases and saves memory use. See bug 1722807 for an example.\n      const width = Math.ceil(ownerBBox[2] - ownerBBox[0]) || 1;\n      const height = Math.ceil(ownerBBox[3] - ownerBBox[1]) || 1;\n\n      const tmpCanvas = owner.cachedCanvases.getCanvas(\n        \"pattern\",\n        width,\n        height,\n        true\n      );\n\n      const tmpCtx = tmpCanvas.context;\n      tmpCtx.clearRect(0, 0, tmpCtx.canvas.width, tmpCtx.canvas.height);\n      tmpCtx.beginPath();\n      tmpCtx.rect(0, 0, tmpCtx.canvas.width, tmpCtx.canvas.height);\n      // Non shading fill patterns are positioned relative to the base transform\n      // (usually the page's initial transform), but we may have created a\n      // smaller canvas based on the path, so we must account for the shift.\n      tmpCtx.translate(-ownerBBox[0], -ownerBBox[1]);\n      inverse = Util.transform(inverse, [\n        1,\n        0,\n        0,\n        1,\n        ownerBBox[0],\n        ownerBBox[1],\n      ]);\n\n      tmpCtx.transform.apply(tmpCtx, owner.baseTransform);\n      if (this.matrix) {\n        tmpCtx.transform.apply(tmpCtx, this.matrix);\n      }\n      applyBoundingBox(tmpCtx, this._bbox);\n\n      tmpCtx.fillStyle = this._createGradient(tmpCtx);\n      tmpCtx.fill();\n\n      pattern = ctx.createPattern(tmpCanvas.canvas, \"no-repeat\");\n      const domMatrix = new DOMMatrix(inverse);\n      try {\n        pattern.setTransform(domMatrix);\n      } catch (ex) {\n        // Avoid rendering breaking completely in Firefox 78 ESR,\n        // and in Node.js (see issue 13724).\n        warn(`RadialAxialShadingPattern.getPattern: \"${ex?.message}\".`);\n      }\n    } else {\n      // Shading fills are applied relative to the current matrix which is also\n      // how canvas gradients work, so there's no need to do anything special\n      // here.\n      applyBoundingBox(ctx, this._bbox);\n      pattern = this._createGradient(ctx);\n    }\n    return pattern;\n  }\n}\n\nfunction drawTriangle(data, context, p1, p2, p3, c1, c2, c3) {\n  // Very basic Gouraud-shaded triangle rasterization algorithm.\n  const coords = context.coords,\n    colors = context.colors;\n  const bytes = data.data,\n    rowSize = data.width * 4;\n  let tmp;\n  if (coords[p1 + 1] > coords[p2 + 1]) {\n    tmp = p1;\n    p1 = p2;\n    p2 = tmp;\n    tmp = c1;\n    c1 = c2;\n    c2 = tmp;\n  }\n  if (coords[p2 + 1] > coords[p3 + 1]) {\n    tmp = p2;\n    p2 = p3;\n    p3 = tmp;\n    tmp = c2;\n    c2 = c3;\n    c3 = tmp;\n  }\n  if (coords[p1 + 1] > coords[p2 + 1]) {\n    tmp = p1;\n    p1 = p2;\n    p2 = tmp;\n    tmp = c1;\n    c1 = c2;\n    c2 = tmp;\n  }\n  const x1 = (coords[p1] + context.offsetX) * context.scaleX;\n  const y1 = (coords[p1 + 1] + context.offsetY) * context.scaleY;\n  const x2 = (coords[p2] + context.offsetX) * context.scaleX;\n  const y2 = (coords[p2 + 1] + context.offsetY) * context.scaleY;\n  const x3 = (coords[p3] + context.offsetX) * context.scaleX;\n  const y3 = (coords[p3 + 1] + context.offsetY) * context.scaleY;\n  if (y1 >= y3) {\n    return;\n  }\n  const c1r = colors[c1],\n    c1g = colors[c1 + 1],\n    c1b = colors[c1 + 2];\n  const c2r = colors[c2],\n    c2g = colors[c2 + 1],\n    c2b = colors[c2 + 2];\n  const c3r = colors[c3],\n    c3g = colors[c3 + 1],\n    c3b = colors[c3 + 2];\n\n  const minY = Math.round(y1),\n    maxY = Math.round(y3);\n  let xa, car, cag, cab;\n  let xb, cbr, cbg, cbb;\n  for (let y = minY; y <= maxY; y++) {\n    if (y < y2) {\n      let k;\n      if (y < y1) {\n        k = 0;\n      } else {\n        k = (y1 - y) / (y1 - y2);\n      }\n      xa = x1 - (x1 - x2) * k;\n      car = c1r - (c1r - c2r) * k;\n      cag = c1g - (c1g - c2g) * k;\n      cab = c1b - (c1b - c2b) * k;\n    } else {\n      let k;\n      if (y > y3) {\n        k = 1;\n      } else if (y2 === y3) {\n        k = 0;\n      } else {\n        k = (y2 - y) / (y2 - y3);\n      }\n      xa = x2 - (x2 - x3) * k;\n      car = c2r - (c2r - c3r) * k;\n      cag = c2g - (c2g - c3g) * k;\n      cab = c2b - (c2b - c3b) * k;\n    }\n\n    let k;\n    if (y < y1) {\n      k = 0;\n    } else if (y > y3) {\n      k = 1;\n    } else {\n      k = (y1 - y) / (y1 - y3);\n    }\n    xb = x1 - (x1 - x3) * k;\n    cbr = c1r - (c1r - c3r) * k;\n    cbg = c1g - (c1g - c3g) * k;\n    cbb = c1b - (c1b - c3b) * k;\n    const x1_ = Math.round(Math.min(xa, xb));\n    const x2_ = Math.round(Math.max(xa, xb));\n    let j = rowSize * y + x1_ * 4;\n    for (let x = x1_; x <= x2_; x++) {\n      k = (xa - x) / (xa - xb);\n      if (k < 0) {\n        k = 0;\n      } else if (k > 1) {\n        k = 1;\n      }\n      bytes[j++] = (car - (car - cbr) * k) | 0;\n      bytes[j++] = (cag - (cag - cbg) * k) | 0;\n      bytes[j++] = (cab - (cab - cbb) * k) | 0;\n      bytes[j++] = 255;\n    }\n  }\n}\n\nfunction drawFigure(data, figure, context) {\n  const ps = figure.coords;\n  const cs = figure.colors;\n  let i, ii;\n  switch (figure.type) {\n    case \"lattice\":\n      const verticesPerRow = figure.verticesPerRow;\n      const rows = Math.floor(ps.length / verticesPerRow) - 1;\n      const cols = verticesPerRow - 1;\n      for (i = 0; i < rows; i++) {\n        let q = i * verticesPerRow;\n        for (let j = 0; j < cols; j++, q++) {\n          drawTriangle(\n            data,\n            context,\n            ps[q],\n            ps[q + 1],\n            ps[q + verticesPerRow],\n            cs[q],\n            cs[q + 1],\n            cs[q + verticesPerRow]\n          );\n          drawTriangle(\n            data,\n            context,\n            ps[q + verticesPerRow + 1],\n            ps[q + 1],\n            ps[q + verticesPerRow],\n            cs[q + verticesPerRow + 1],\n            cs[q + 1],\n            cs[q + verticesPerRow]\n          );\n        }\n      }\n      break;\n    case \"triangles\":\n      for (i = 0, ii = ps.length; i < ii; i += 3) {\n        drawTriangle(\n          data,\n          context,\n          ps[i],\n          ps[i + 1],\n          ps[i + 2],\n          cs[i],\n          cs[i + 1],\n          cs[i + 2]\n        );\n      }\n      break;\n    default:\n      throw new Error(\"illegal figure\");\n  }\n}\n\nclass MeshShadingPattern extends BaseShadingPattern {\n  constructor(IR) {\n    super();\n    this._coords = IR[2];\n    this._colors = IR[3];\n    this._figures = IR[4];\n    this._bounds = IR[5];\n    this._bbox = IR[7];\n    this._background = IR[8];\n    this.matrix = null;\n  }\n\n  _createMeshCanvas(combinedScale, backgroundColor, cachedCanvases) {\n    // we will increase scale on some weird factor to let antialiasing take\n    // care of \"rough\" edges\n    const EXPECTED_SCALE = 1.1;\n    // MAX_PATTERN_SIZE is used to avoid OOM situation.\n    const MAX_PATTERN_SIZE = 3000; // 10in @ 300dpi shall be enough\n    // We need to keep transparent border around our pattern for fill():\n    // createPattern with 'no-repeat' will bleed edges across entire area.\n    const BORDER_SIZE = 2;\n\n    const offsetX = Math.floor(this._bounds[0]);\n    const offsetY = Math.floor(this._bounds[1]);\n    const boundsWidth = Math.ceil(this._bounds[2]) - offsetX;\n    const boundsHeight = Math.ceil(this._bounds[3]) - offsetY;\n\n    const width = Math.min(\n      Math.ceil(Math.abs(boundsWidth * combinedScale[0] * EXPECTED_SCALE)),\n      MAX_PATTERN_SIZE\n    );\n    const height = Math.min(\n      Math.ceil(Math.abs(boundsHeight * combinedScale[1] * EXPECTED_SCALE)),\n      MAX_PATTERN_SIZE\n    );\n    const scaleX = boundsWidth / width;\n    const scaleY = boundsHeight / height;\n\n    const context = {\n      coords: this._coords,\n      colors: this._colors,\n      offsetX: -offsetX,\n      offsetY: -offsetY,\n      scaleX: 1 / scaleX,\n      scaleY: 1 / scaleY,\n    };\n\n    const paddedWidth = width + BORDER_SIZE * 2;\n    const paddedHeight = height + BORDER_SIZE * 2;\n\n    const tmpCanvas = cachedCanvases.getCanvas(\n      \"mesh\",\n      paddedWidth,\n      paddedHeight,\n      false\n    );\n    const tmpCtx = tmpCanvas.context;\n\n    const data = tmpCtx.createImageData(width, height);\n    if (backgroundColor) {\n      const bytes = data.data;\n      for (let i = 0, ii = bytes.length; i < ii; i += 4) {\n        bytes[i] = backgroundColor[0];\n        bytes[i + 1] = backgroundColor[1];\n        bytes[i + 2] = backgroundColor[2];\n        bytes[i + 3] = 255;\n      }\n    }\n    for (const figure of this._figures) {\n      drawFigure(data, figure, context);\n    }\n    tmpCtx.putImageData(data, BORDER_SIZE, BORDER_SIZE);\n    const canvas = tmpCanvas.canvas;\n\n    return {\n      canvas,\n      offsetX: offsetX - BORDER_SIZE * scaleX,\n      offsetY: offsetY - BORDER_SIZE * scaleY,\n      scaleX,\n      scaleY,\n    };\n  }\n\n  getPattern(ctx, owner, inverse, pathType) {\n    applyBoundingBox(ctx, this._bbox);\n    let scale;\n    if (pathType === PathType.SHADING) {\n      scale = Util.singularValueDecompose2dScale(ctx.mozCurrentTransform);\n    } else {\n      // Obtain scale from matrix and current transformation matrix.\n      scale = Util.singularValueDecompose2dScale(owner.baseTransform);\n      if (this.matrix) {\n        const matrixScale = Util.singularValueDecompose2dScale(this.matrix);\n        scale = [scale[0] * matrixScale[0], scale[1] * matrixScale[1]];\n      }\n    }\n\n    // Rasterizing on the main thread since sending/queue large canvases\n    // might cause OOM.\n    const temporaryPatternCanvas = this._createMeshCanvas(\n      scale,\n      pathType === PathType.SHADING ? null : this._background,\n      owner.cachedCanvases\n    );\n\n    if (pathType !== PathType.SHADING) {\n      ctx.setTransform.apply(ctx, owner.baseTransform);\n      if (this.matrix) {\n        ctx.transform.apply(ctx, this.matrix);\n      }\n    }\n\n    ctx.translate(\n      temporaryPatternCanvas.offsetX,\n      temporaryPatternCanvas.offsetY\n    );\n    ctx.scale(temporaryPatternCanvas.scaleX, temporaryPatternCanvas.scaleY);\n\n    return ctx.createPattern(temporaryPatternCanvas.canvas, \"no-repeat\");\n  }\n}\n\nclass DummyShadingPattern extends BaseShadingPattern {\n  getPattern() {\n    return \"hotpink\";\n  }\n}\n\nfunction getShadingPattern(IR) {\n  switch (IR[0]) {\n    case \"RadialAxial\":\n      return new RadialAxialShadingPattern(IR);\n    case \"Mesh\":\n      return new MeshShadingPattern(IR);\n    case \"Dummy\":\n      return new DummyShadingPattern();\n  }\n  throw new Error(`Unknown IR type: ${IR[0]}`);\n}\n\nconst PaintType = {\n  COLORED: 1,\n  UNCOLORED: 2,\n};\n\nclass TilingPattern {\n  // 10in @ 300dpi shall be enough.\n  static get MAX_PATTERN_SIZE() {\n    return shadow(this, \"MAX_PATTERN_SIZE\", 3000);\n  }\n\n  constructor(IR, color, ctx, canvasGraphicsFactory, baseTransform) {\n    this.operatorList = IR[2];\n    this.matrix = IR[3] || [1, 0, 0, 1, 0, 0];\n    this.bbox = IR[4];\n    this.xstep = IR[5];\n    this.ystep = IR[6];\n    this.paintType = IR[7];\n    this.tilingType = IR[8];\n    this.color = color;\n    this.ctx = ctx;\n    this.canvasGraphicsFactory = canvasGraphicsFactory;\n    this.baseTransform = baseTransform;\n  }\n\n  createPatternCanvas(owner) {\n    const operatorList = this.operatorList;\n    const bbox = this.bbox;\n    const xstep = this.xstep;\n    const ystep = this.ystep;\n    const paintType = this.paintType;\n    const tilingType = this.tilingType;\n    const color = this.color;\n    const canvasGraphicsFactory = this.canvasGraphicsFactory;\n\n    info(\"TilingType: \" + tilingType);\n\n    // A tiling pattern as defined by PDF spec 8.7.2 is a cell whose size is\n    // described by bbox, and may repeat regularly by shifting the cell by\n    // xstep and ystep.\n    // Because the HTML5 canvas API does not support pattern repetition with\n    // gaps in between, we use the xstep/ystep instead of the bbox's size.\n    //\n    // This has the following consequences (similarly for ystep):\n    //\n    // - If xstep is the same as bbox, then there is no observable difference.\n    //\n    // - If xstep is larger than bbox, then the pattern canvas is partially\n    //   empty: the area bounded by bbox is painted, the outside area is void.\n    //\n    // - If xstep is smaller than bbox, then the pixels between xstep and the\n    //   bbox boundary will be missing. This is INCORRECT behavior.\n    //   \"Figures on adjacent tiles should not overlap\" (PDF spec 8.7.3.1),\n    //   but overlapping cells without common pixels are still valid.\n    //   TODO: Fix the implementation, to allow this scenario to be painted\n    //   correctly.\n\n    const x0 = bbox[0],\n      y0 = bbox[1],\n      x1 = bbox[2],\n      y1 = bbox[3];\n\n    // Obtain scale from matrix and current transformation matrix.\n    const matrixScale = Util.singularValueDecompose2dScale(this.matrix);\n    const curMatrixScale = Util.singularValueDecompose2dScale(\n      this.baseTransform\n    );\n    const combinedScale = [\n      matrixScale[0] * curMatrixScale[0],\n      matrixScale[1] * curMatrixScale[1],\n    ];\n\n    // Use width and height values that are as close as possible to the end\n    // result when the pattern is used. Too low value makes the pattern look\n    // blurry. Too large value makes it look too crispy.\n    const dimx = this.getSizeAndScale(\n      xstep,\n      this.ctx.canvas.width,\n      combinedScale[0]\n    );\n    const dimy = this.getSizeAndScale(\n      ystep,\n      this.ctx.canvas.height,\n      combinedScale[1]\n    );\n\n    const tmpCanvas = owner.cachedCanvases.getCanvas(\n      \"pattern\",\n      dimx.size,\n      dimy.size,\n      true\n    );\n    const tmpCtx = tmpCanvas.context;\n    const graphics = canvasGraphicsFactory.createCanvasGraphics(tmpCtx);\n    graphics.groupLevel = owner.groupLevel;\n\n    this.setFillAndStrokeStyleToContext(graphics, paintType, color);\n\n    let adjustedX0 = x0;\n    let adjustedY0 = y0;\n    let adjustedX1 = x1;\n    let adjustedY1 = y1;\n    // Some bounding boxes have negative x0/y0 cordinates which will cause the\n    // some of the drawing to be off of the canvas. To avoid this shift the\n    // bounding box over.\n    if (x0 < 0) {\n      adjustedX0 = 0;\n      adjustedX1 += Math.abs(x0);\n    }\n    if (y0 < 0) {\n      adjustedY0 = 0;\n      adjustedY1 += Math.abs(y0);\n    }\n    tmpCtx.translate(-(dimx.scale * adjustedX0), -(dimy.scale * adjustedY0));\n    graphics.transform(dimx.scale, 0, 0, dimy.scale, 0, 0);\n\n    this.clipBbox(graphics, adjustedX0, adjustedY0, adjustedX1, adjustedY1);\n\n    graphics.baseTransform = graphics.ctx.mozCurrentTransform.slice();\n\n    graphics.executeOperatorList(operatorList);\n\n    graphics.endDrawing();\n\n    return {\n      canvas: tmpCanvas.canvas,\n      scaleX: dimx.scale,\n      scaleY: dimy.scale,\n      offsetX: adjustedX0,\n      offsetY: adjustedY0,\n    };\n  }\n\n  getSizeAndScale(step, realOutputSize, scale) {\n    // xstep / ystep may be negative -- normalize.\n    step = Math.abs(step);\n    // MAX_PATTERN_SIZE is used to avoid OOM situation.\n    // Use the destination canvas's size if it is bigger than the hard-coded\n    // limit of MAX_PATTERN_SIZE to avoid clipping patterns that cover the\n    // whole canvas.\n    const maxSize = Math.max(TilingPattern.MAX_PATTERN_SIZE, realOutputSize);\n    let size = Math.ceil(step * scale);\n    if (size >= maxSize) {\n      size = maxSize;\n    } else {\n      scale = size / step;\n    }\n    return { scale, size };\n  }\n\n  clipBbox(graphics, x0, y0, x1, y1) {\n    const bboxWidth = x1 - x0;\n    const bboxHeight = y1 - y0;\n    graphics.ctx.rect(x0, y0, bboxWidth, bboxHeight);\n    graphics.clip();\n    graphics.endPath();\n  }\n\n  setFillAndStrokeStyleToContext(graphics, paintType, color) {\n    const context = graphics.ctx,\n      current = graphics.current;\n    switch (paintType) {\n      case PaintType.COLORED:\n        const ctx = this.ctx;\n        context.fillStyle = ctx.fillStyle;\n        context.strokeStyle = ctx.strokeStyle;\n        current.fillColor = ctx.fillStyle;\n        current.strokeColor = ctx.strokeStyle;\n        break;\n      case PaintType.UNCOLORED:\n        const cssColor = Util.makeHexColor(color[0], color[1], color[2]);\n        context.fillStyle = cssColor;\n        context.strokeStyle = cssColor;\n        // Set color needed by image masks (fixes issues 3226 and 8741).\n        current.fillColor = cssColor;\n        current.strokeColor = cssColor;\n        break;\n      default:\n        throw new FormatError(`Unsupported paint type: ${paintType}`);\n    }\n  }\n\n  getPattern(ctx, owner, inverse, pathType) {\n    // PDF spec 8.7.2 NOTE 1: pattern's matrix is relative to initial matrix.\n    let matrix = inverse;\n    if (pathType !== PathType.SHADING) {\n      matrix = Util.transform(matrix, owner.baseTransform);\n      if (this.matrix) {\n        matrix = Util.transform(matrix, this.matrix);\n      }\n    }\n\n    const temporaryPatternCanvas = this.createPatternCanvas(owner);\n\n    let domMatrix = new DOMMatrix(matrix);\n    // Rescale and so that the ctx.createPattern call generates a pattern with\n    // the desired size.\n    domMatrix = domMatrix.translate(\n      temporaryPatternCanvas.offsetX,\n      temporaryPatternCanvas.offsetY\n    );\n    domMatrix = domMatrix.scale(\n      1 / temporaryPatternCanvas.scaleX,\n      1 / temporaryPatternCanvas.scaleY\n    );\n\n    const pattern = ctx.createPattern(temporaryPatternCanvas.canvas, \"repeat\");\n    try {\n      pattern.setTransform(domMatrix);\n    } catch (ex) {\n      // Avoid rendering breaking completely in Firefox 78 ESR,\n      // and in Node.js (see issue 13724).\n      warn(`TilingPattern.getPattern: \"${ex?.message}\".`);\n    }\n    return pattern;\n  }\n}\n\nexport { getShadingPattern, PathType, TilingPattern };\n","/* Copyright 2018 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @typedef {Object} GlobalWorkerOptionsType\n * @property {Worker | null} workerPort - Defines global port for worker\n *   process. Overrides the `workerSrc` option.\n * @property {string} workerSrc - A string containing the path and filename\n *   of the worker file.\n *\n *   NOTE: The `workerSrc` option should always be set, in order to prevent any\n *         issues when using the PDF.js library.\n */\n\n/** @type {GlobalWorkerOptionsType} */\nconst GlobalWorkerOptions = Object.create(null);\n\nGlobalWorkerOptions.workerPort =\n  GlobalWorkerOptions.workerPort === undefined\n    ? null\n    : GlobalWorkerOptions.workerPort;\n\nGlobalWorkerOptions.workerSrc =\n  GlobalWorkerOptions.workerSrc === undefined\n    ? \"\"\n    : GlobalWorkerOptions.workerSrc;\n\nexport { GlobalWorkerOptions };\n","/* Copyright 2018 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AbortException,\n  assert,\n  createPromiseCapability,\n  MissingPDFException,\n  PasswordException,\n  UnexpectedResponseException,\n  UnknownErrorException,\n  warn,\n} from \"./util.js\";\n\nconst CallbackKind = {\n  UNKNOWN: 0,\n  DATA: 1,\n  ERROR: 2,\n};\n\nconst StreamKind = {\n  UNKNOWN: 0,\n  CANCEL: 1,\n  CANCEL_COMPLETE: 2,\n  CLOSE: 3,\n  ENQUEUE: 4,\n  ERROR: 5,\n  PULL: 6,\n  PULL_COMPLETE: 7,\n  START_COMPLETE: 8,\n};\n\nfunction wrapReason(reason) {\n  if (\n    !(\n      reason instanceof Error ||\n      (typeof reason === \"object\" && reason !== null)\n    )\n  ) {\n    if (\n      typeof PDFJSDev === \"undefined\" ||\n      PDFJSDev.test(\"!PRODUCTION || TESTING\")\n    ) {\n      throw new Error(\n        'wrapReason: Expected \"reason\" to be a (possibly cloned) Error.'\n      );\n    }\n    warn('wrapReason: Expected \"reason\" to be a (possibly cloned) Error.');\n    return reason;\n  }\n  switch (reason.name) {\n    case \"AbortException\":\n      return new AbortException(reason.message);\n    case \"MissingPDFException\":\n      return new MissingPDFException(reason.message);\n    case \"PasswordException\":\n      return new PasswordException(reason.message, reason.code);\n    case \"UnexpectedResponseException\":\n      return new UnexpectedResponseException(reason.message, reason.status);\n    case \"UnknownErrorException\":\n      return new UnknownErrorException(reason.message, reason.details);\n    default:\n      return new UnknownErrorException(reason.message, reason.toString());\n  }\n}\n\nclass MessageHandler {\n  constructor(sourceName, targetName, comObj) {\n    this.sourceName = sourceName;\n    this.targetName = targetName;\n    this.comObj = comObj;\n    this.callbackId = 1;\n    this.streamId = 1;\n    this.streamSinks = Object.create(null);\n    this.streamControllers = Object.create(null);\n    this.callbackCapabilities = Object.create(null);\n    this.actionHandler = Object.create(null);\n\n    this._onComObjOnMessage = event => {\n      const data = event.data;\n      if (data.targetName !== this.sourceName) {\n        return;\n      }\n      if (data.stream) {\n        this._processStreamMessage(data);\n        return;\n      }\n      if (data.callback) {\n        const callbackId = data.callbackId;\n        const capability = this.callbackCapabilities[callbackId];\n        if (!capability) {\n          throw new Error(`Cannot resolve callback ${callbackId}`);\n        }\n        delete this.callbackCapabilities[callbackId];\n\n        if (data.callback === CallbackKind.DATA) {\n          capability.resolve(data.data);\n        } else if (data.callback === CallbackKind.ERROR) {\n          capability.reject(wrapReason(data.reason));\n        } else {\n          throw new Error(\"Unexpected callback case\");\n        }\n        return;\n      }\n      const action = this.actionHandler[data.action];\n      if (!action) {\n        throw new Error(`Unknown action from worker: ${data.action}`);\n      }\n      if (data.callbackId) {\n        const cbSourceName = this.sourceName;\n        const cbTargetName = data.sourceName;\n\n        new Promise(function (resolve) {\n          resolve(action(data.data));\n        }).then(\n          function (result) {\n            comObj.postMessage({\n              sourceName: cbSourceName,\n              targetName: cbTargetName,\n              callback: CallbackKind.DATA,\n              callbackId: data.callbackId,\n              data: result,\n            });\n          },\n          function (reason) {\n            comObj.postMessage({\n              sourceName: cbSourceName,\n              targetName: cbTargetName,\n              callback: CallbackKind.ERROR,\n              callbackId: data.callbackId,\n              reason: wrapReason(reason),\n            });\n          }\n        );\n        return;\n      }\n      if (data.streamId) {\n        this._createStreamSink(data);\n        return;\n      }\n      action(data.data);\n    };\n    comObj.addEventListener(\"message\", this._onComObjOnMessage);\n  }\n\n  on(actionName, handler) {\n    if (\n      typeof PDFJSDev === \"undefined\" ||\n      PDFJSDev.test(\"!PRODUCTION || TESTING\")\n    ) {\n      assert(\n        typeof handler === \"function\",\n        'MessageHandler.on: Expected \"handler\" to be a function.'\n      );\n    }\n    const ah = this.actionHandler;\n    if (ah[actionName]) {\n      throw new Error(`There is already an actionName called \"${actionName}\"`);\n    }\n    ah[actionName] = handler;\n  }\n\n  /**\n   * Sends a message to the comObj to invoke the action with the supplied data.\n   * @param {string} actionName - Action to call.\n   * @param {JSON} data - JSON data to send.\n   * @param {Array} [transfers] - List of transfers/ArrayBuffers.\n   */\n  send(actionName, data, transfers) {\n    this.comObj.postMessage(\n      {\n        sourceName: this.sourceName,\n        targetName: this.targetName,\n        action: actionName,\n        data,\n      },\n      transfers\n    );\n  }\n\n  /**\n   * Sends a message to the comObj to invoke the action with the supplied data.\n   * Expects that the other side will callback with the response.\n   * @param {string} actionName - Action to call.\n   * @param {JSON} data - JSON data to send.\n   * @param {Array} [transfers] - List of transfers/ArrayBuffers.\n   * @returns {Promise} Promise to be resolved with response data.\n   */\n  sendWithPromise(actionName, data, transfers) {\n    const callbackId = this.callbackId++;\n    const capability = createPromiseCapability();\n    this.callbackCapabilities[callbackId] = capability;\n    try {\n      this.comObj.postMessage(\n        {\n          sourceName: this.sourceName,\n          targetName: this.targetName,\n          action: actionName,\n          callbackId,\n          data,\n        },\n        transfers\n      );\n    } catch (ex) {\n      capability.reject(ex);\n    }\n    return capability.promise;\n  }\n\n  /**\n   * Sends a message to the comObj to invoke the action with the supplied data.\n   * Expect that the other side will callback to signal 'start_complete'.\n   * @param {string} actionName - Action to call.\n   * @param {JSON} data - JSON data to send.\n   * @param {Object} queueingStrategy - Strategy to signal backpressure based on\n   *                 internal queue.\n   * @param {Array} [transfers] - List of transfers/ArrayBuffers.\n   * @returns {ReadableStream} ReadableStream to read data in chunks.\n   */\n  sendWithStream(actionName, data, queueingStrategy, transfers) {\n    const streamId = this.streamId++,\n      sourceName = this.sourceName,\n      targetName = this.targetName,\n      comObj = this.comObj;\n\n    return new ReadableStream(\n      {\n        start: controller => {\n          const startCapability = createPromiseCapability();\n          this.streamControllers[streamId] = {\n            controller,\n            startCall: startCapability,\n            pullCall: null,\n            cancelCall: null,\n            isClosed: false,\n          };\n          comObj.postMessage(\n            {\n              sourceName,\n              targetName,\n              action: actionName,\n              streamId,\n              data,\n              desiredSize: controller.desiredSize,\n            },\n            transfers\n          );\n          // Return Promise for Async process, to signal success/failure.\n          return startCapability.promise;\n        },\n\n        pull: controller => {\n          const pullCapability = createPromiseCapability();\n          this.streamControllers[streamId].pullCall = pullCapability;\n          comObj.postMessage({\n            sourceName,\n            targetName,\n            stream: StreamKind.PULL,\n            streamId,\n            desiredSize: controller.desiredSize,\n          });\n          // Returning Promise will not call \"pull\"\n          // again until current pull is resolved.\n          return pullCapability.promise;\n        },\n\n        cancel: reason => {\n          assert(reason instanceof Error, \"cancel must have a valid reason\");\n          const cancelCapability = createPromiseCapability();\n          this.streamControllers[streamId].cancelCall = cancelCapability;\n          this.streamControllers[streamId].isClosed = true;\n          comObj.postMessage({\n            sourceName,\n            targetName,\n            stream: StreamKind.CANCEL,\n            streamId,\n            reason: wrapReason(reason),\n          });\n          // Return Promise to signal success or failure.\n          return cancelCapability.promise;\n        },\n      },\n      queueingStrategy\n    );\n  }\n\n  /**\n   * @private\n   */\n  _createStreamSink(data) {\n    const streamId = data.streamId,\n      sourceName = this.sourceName,\n      targetName = data.sourceName,\n      comObj = this.comObj;\n    const self = this,\n      action = this.actionHandler[data.action];\n\n    const streamSink = {\n      enqueue(chunk, size = 1, transfers) {\n        if (this.isCancelled) {\n          return;\n        }\n        const lastDesiredSize = this.desiredSize;\n        this.desiredSize -= size;\n        // Enqueue decreases the desiredSize property of sink,\n        // so when it changes from positive to negative,\n        // set ready as unresolved promise.\n        if (lastDesiredSize > 0 && this.desiredSize <= 0) {\n          this.sinkCapability = createPromiseCapability();\n          this.ready = this.sinkCapability.promise;\n        }\n        comObj.postMessage(\n          {\n            sourceName,\n            targetName,\n            stream: StreamKind.ENQUEUE,\n            streamId,\n            chunk,\n          },\n          transfers\n        );\n      },\n\n      close() {\n        if (this.isCancelled) {\n          return;\n        }\n        this.isCancelled = true;\n        comObj.postMessage({\n          sourceName,\n          targetName,\n          stream: StreamKind.CLOSE,\n          streamId,\n        });\n        delete self.streamSinks[streamId];\n      },\n\n      error(reason) {\n        assert(reason instanceof Error, \"error must have a valid reason\");\n        if (this.isCancelled) {\n          return;\n        }\n        this.isCancelled = true;\n        comObj.postMessage({\n          sourceName,\n          targetName,\n          stream: StreamKind.ERROR,\n          streamId,\n          reason: wrapReason(reason),\n        });\n      },\n\n      sinkCapability: createPromiseCapability(),\n      onPull: null,\n      onCancel: null,\n      isCancelled: false,\n      desiredSize: data.desiredSize,\n      ready: null,\n    };\n\n    streamSink.sinkCapability.resolve();\n    streamSink.ready = streamSink.sinkCapability.promise;\n    this.streamSinks[streamId] = streamSink;\n\n    new Promise(function (resolve) {\n      resolve(action(data.data, streamSink));\n    }).then(\n      function () {\n        comObj.postMessage({\n          sourceName,\n          targetName,\n          stream: StreamKind.START_COMPLETE,\n          streamId,\n          success: true,\n        });\n      },\n      function (reason) {\n        comObj.postMessage({\n          sourceName,\n          targetName,\n          stream: StreamKind.START_COMPLETE,\n          streamId,\n          reason: wrapReason(reason),\n        });\n      }\n    );\n  }\n\n  /**\n   * @private\n   */\n  _processStreamMessage(data) {\n    const streamId = data.streamId,\n      sourceName = this.sourceName,\n      targetName = data.sourceName,\n      comObj = this.comObj;\n    const streamController = this.streamControllers[streamId],\n      streamSink = this.streamSinks[streamId];\n\n    switch (data.stream) {\n      case StreamKind.START_COMPLETE:\n        if (data.success) {\n          streamController.startCall.resolve();\n        } else {\n          streamController.startCall.reject(wrapReason(data.reason));\n        }\n        break;\n      case StreamKind.PULL_COMPLETE:\n        if (data.success) {\n          streamController.pullCall.resolve();\n        } else {\n          streamController.pullCall.reject(wrapReason(data.reason));\n        }\n        break;\n      case StreamKind.PULL:\n        // Ignore any pull after close is called.\n        if (!streamSink) {\n          comObj.postMessage({\n            sourceName,\n            targetName,\n            stream: StreamKind.PULL_COMPLETE,\n            streamId,\n            success: true,\n          });\n          break;\n        }\n        // Pull increases the desiredSize property of sink, so when it changes\n        // from negative to positive, set ready property as resolved promise.\n        if (streamSink.desiredSize <= 0 && data.desiredSize > 0) {\n          streamSink.sinkCapability.resolve();\n        }\n        // Reset desiredSize property of sink on every pull.\n        streamSink.desiredSize = data.desiredSize;\n\n        new Promise(function (resolve) {\n          resolve(streamSink.onPull && streamSink.onPull());\n        }).then(\n          function () {\n            comObj.postMessage({\n              sourceName,\n              targetName,\n              stream: StreamKind.PULL_COMPLETE,\n              streamId,\n              success: true,\n            });\n          },\n          function (reason) {\n            comObj.postMessage({\n              sourceName,\n              targetName,\n              stream: StreamKind.PULL_COMPLETE,\n              streamId,\n              reason: wrapReason(reason),\n            });\n          }\n        );\n        break;\n      case StreamKind.ENQUEUE:\n        assert(streamController, \"enqueue should have stream controller\");\n        if (streamController.isClosed) {\n          break;\n        }\n        streamController.controller.enqueue(data.chunk);\n        break;\n      case StreamKind.CLOSE:\n        assert(streamController, \"close should have stream controller\");\n        if (streamController.isClosed) {\n          break;\n        }\n        streamController.isClosed = true;\n        streamController.controller.close();\n        this._deleteStreamController(streamController, streamId);\n        break;\n      case StreamKind.ERROR:\n        assert(streamController, \"error should have stream controller\");\n        streamController.controller.error(wrapReason(data.reason));\n        this._deleteStreamController(streamController, streamId);\n        break;\n      case StreamKind.CANCEL_COMPLETE:\n        if (data.success) {\n          streamController.cancelCall.resolve();\n        } else {\n          streamController.cancelCall.reject(wrapReason(data.reason));\n        }\n        this._deleteStreamController(streamController, streamId);\n        break;\n      case StreamKind.CANCEL:\n        if (!streamSink) {\n          break;\n        }\n\n        new Promise(function (resolve) {\n          resolve(\n            streamSink.onCancel && streamSink.onCancel(wrapReason(data.reason))\n          );\n        }).then(\n          function () {\n            comObj.postMessage({\n              sourceName,\n              targetName,\n              stream: StreamKind.CANCEL_COMPLETE,\n              streamId,\n              success: true,\n            });\n          },\n          function (reason) {\n            comObj.postMessage({\n              sourceName,\n              targetName,\n              stream: StreamKind.CANCEL_COMPLETE,\n              streamId,\n              reason: wrapReason(reason),\n            });\n          }\n        );\n        streamSink.sinkCapability.reject(wrapReason(data.reason));\n        streamSink.isCancelled = true;\n        delete this.streamSinks[streamId];\n        break;\n      default:\n        throw new Error(\"Unexpected stream case\");\n    }\n  }\n\n  /**\n   * @private\n   */\n  async _deleteStreamController(streamController, streamId) {\n    // Delete the `streamController` only when the start, pull, and cancel\n    // capabilities have settled, to prevent `TypeError`s.\n    await Promise.allSettled([\n      streamController.startCall && streamController.startCall.promise,\n      streamController.pullCall && streamController.pullCall.promise,\n      streamController.cancelCall && streamController.cancelCall.promise,\n    ]);\n    delete this.streamControllers[streamId];\n  }\n\n  destroy() {\n    this.comObj.removeEventListener(\"message\", this._onComObjOnMessage);\n  }\n}\n\nexport { MessageHandler };\n","/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { objectFromMap } from \"../shared/util.js\";\n\nclass Metadata {\n  #metadataMap;\n\n  #data;\n\n  constructor({ parsedData, rawData }) {\n    this.#metadataMap = parsedData;\n    this.#data = rawData;\n  }\n\n  getRaw() {\n    return this.#data;\n  }\n\n  get(name) {\n    return this.#metadataMap.get(name) ?? null;\n  }\n\n  getAll() {\n    return objectFromMap(this.#metadataMap);\n  }\n\n  has(name) {\n    return this.#metadataMap.has(name);\n  }\n}\n\nexport { Metadata };\n","/* Copyright 2020 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { objectFromMap, warn } from \"../shared/util.js\";\n\nclass OptionalContentGroup {\n  constructor(name, intent) {\n    this.visible = true;\n    this.name = name;\n    this.intent = intent;\n  }\n}\n\nclass OptionalContentConfig {\n  constructor(data) {\n    this.name = null;\n    this.creator = null;\n    this._order = null;\n    this._groups = new Map();\n\n    if (data === null) {\n      return;\n    }\n    this.name = data.name;\n    this.creator = data.creator;\n    this._order = data.order;\n    for (const group of data.groups) {\n      this._groups.set(\n        group.id,\n        new OptionalContentGroup(group.name, group.intent)\n      );\n    }\n\n    if (data.baseState === \"OFF\") {\n      for (const group of this._groups) {\n        group.visible = false;\n      }\n    }\n\n    for (const on of data.on) {\n      this._groups.get(on).visible = true;\n    }\n\n    for (const off of data.off) {\n      this._groups.get(off).visible = false;\n    }\n  }\n\n  _evaluateVisibilityExpression(array) {\n    const length = array.length;\n    if (length < 2) {\n      return true;\n    }\n    const operator = array[0];\n    for (let i = 1; i < length; i++) {\n      const element = array[i];\n      let state;\n      if (Array.isArray(element)) {\n        state = this._evaluateVisibilityExpression(element);\n      } else if (this._groups.has(element)) {\n        state = this._groups.get(element).visible;\n      } else {\n        warn(`Optional content group not found: ${element}`);\n        return true;\n      }\n      switch (operator) {\n        case \"And\":\n          if (!state) {\n            return false;\n          }\n          break;\n        case \"Or\":\n          if (state) {\n            return true;\n          }\n          break;\n        case \"Not\":\n          return !state;\n        default:\n          return true;\n      }\n    }\n    return operator === \"And\";\n  }\n\n  isVisible(group) {\n    if (this._groups.size === 0) {\n      return true;\n    }\n    if (!group) {\n      warn(\"Optional content group not defined.\");\n      return true;\n    }\n    if (group.type === \"OCG\") {\n      if (!this._groups.has(group.id)) {\n        warn(`Optional content group not found: ${group.id}`);\n        return true;\n      }\n      return this._groups.get(group.id).visible;\n    } else if (group.type === \"OCMD\") {\n      // Per the spec, the expression should be preferred if available.\n      if (group.expression) {\n        return this._evaluateVisibilityExpression(group.expression);\n      }\n      if (!group.policy || group.policy === \"AnyOn\") {\n        // Default\n        for (const id of group.ids) {\n          if (!this._groups.has(id)) {\n            warn(`Optional content group not found: ${id}`);\n            return true;\n          }\n          if (this._groups.get(id).visible) {\n            return true;\n          }\n        }\n        return false;\n      } else if (group.policy === \"AllOn\") {\n        for (const id of group.ids) {\n          if (!this._groups.has(id)) {\n            warn(`Optional content group not found: ${id}`);\n            return true;\n          }\n          if (!this._groups.get(id).visible) {\n            return false;\n          }\n        }\n        return true;\n      } else if (group.policy === \"AnyOff\") {\n        for (const id of group.ids) {\n          if (!this._groups.has(id)) {\n            warn(`Optional content group not found: ${id}`);\n            return true;\n          }\n          if (!this._groups.get(id).visible) {\n            return true;\n          }\n        }\n        return false;\n      } else if (group.policy === \"AllOff\") {\n        for (const id of group.ids) {\n          if (!this._groups.has(id)) {\n            warn(`Optional content group not found: ${id}`);\n            return true;\n          }\n          if (this._groups.get(id).visible) {\n            return false;\n          }\n        }\n        return true;\n      }\n      warn(`Unknown optional content policy ${group.policy}.`);\n      return true;\n    }\n    warn(`Unknown group type ${group.type}.`);\n    return true;\n  }\n\n  setVisibility(id, visible = true) {\n    if (!this._groups.has(id)) {\n      warn(`Optional content group not found: ${id}`);\n      return;\n    }\n    this._groups.get(id).visible = !!visible;\n  }\n\n  getOrder() {\n    if (!this._groups.size) {\n      return null;\n    }\n    if (this._order) {\n      return this._order.slice();\n    }\n    return Array.from(this._groups.keys());\n  }\n\n  getGroups() {\n    return this._groups.size > 0 ? objectFromMap(this._groups) : null;\n  }\n\n  getGroup(id) {\n    return this._groups.get(id) || null;\n  }\n}\n\nexport { OptionalContentConfig };\n","/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, createPromiseCapability } from \"../shared/util.js\";\nimport { isPdfFile } from \"./display_utils.js\";\n\n/** @implements {IPDFStream} */\nclass PDFDataTransportStream {\n  constructor(params, pdfDataRangeTransport) {\n    assert(\n      pdfDataRangeTransport,\n      'PDFDataTransportStream - missing required \"pdfDataRangeTransport\" argument.'\n    );\n\n    this._queuedChunks = [];\n    this._progressiveDone = params.progressiveDone || false;\n    this._contentDispositionFilename =\n      params.contentDispositionFilename || null;\n\n    const initialData = params.initialData;\n    if (initialData?.length > 0) {\n      const buffer = new Uint8Array(initialData).buffer;\n      this._queuedChunks.push(buffer);\n    }\n\n    this._pdfDataRangeTransport = pdfDataRangeTransport;\n    this._isStreamingSupported = !params.disableStream;\n    this._isRangeSupported = !params.disableRange;\n    this._contentLength = params.length;\n\n    this._fullRequestReader = null;\n    this._rangeReaders = [];\n\n    this._pdfDataRangeTransport.addRangeListener((begin, chunk) => {\n      this._onReceiveData({ begin, chunk });\n    });\n\n    this._pdfDataRangeTransport.addProgressListener((loaded, total) => {\n      this._onProgress({ loaded, total });\n    });\n\n    this._pdfDataRangeTransport.addProgressiveReadListener(chunk => {\n      this._onReceiveData({ chunk });\n    });\n\n    this._pdfDataRangeTransport.addProgressiveDoneListener(() => {\n      this._onProgressiveDone();\n    });\n\n    this._pdfDataRangeTransport.transportReady();\n  }\n\n  _onReceiveData(args) {\n    const buffer = new Uint8Array(args.chunk).buffer;\n    if (args.begin === undefined) {\n      if (this._fullRequestReader) {\n        this._fullRequestReader._enqueue(buffer);\n      } else {\n        this._queuedChunks.push(buffer);\n      }\n    } else {\n      const found = this._rangeReaders.some(function (rangeReader) {\n        if (rangeReader._begin !== args.begin) {\n          return false;\n        }\n        rangeReader._enqueue(buffer);\n        return true;\n      });\n      assert(\n        found,\n        \"_onReceiveData - no `PDFDataTransportStreamRangeReader` instance found.\"\n      );\n    }\n  }\n\n  get _progressiveDataLength() {\n    return this._fullRequestReader?._loaded ?? 0;\n  }\n\n  _onProgress(evt) {\n    if (evt.total === undefined) {\n      // Reporting to first range reader, if it exists.\n      const firstReader = this._rangeReaders[0];\n      if (firstReader?.onProgress) {\n        firstReader.onProgress({ loaded: evt.loaded });\n      }\n    } else {\n      const fullReader = this._fullRequestReader;\n      if (fullReader?.onProgress) {\n        fullReader.onProgress({ loaded: evt.loaded, total: evt.total });\n      }\n    }\n  }\n\n  _onProgressiveDone() {\n    if (this._fullRequestReader) {\n      this._fullRequestReader.progressiveDone();\n    }\n    this._progressiveDone = true;\n  }\n\n  _removeRangeReader(reader) {\n    const i = this._rangeReaders.indexOf(reader);\n    if (i >= 0) {\n      this._rangeReaders.splice(i, 1);\n    }\n  }\n\n  getFullReader() {\n    assert(\n      !this._fullRequestReader,\n      \"PDFDataTransportStream.getFullReader can only be called once.\"\n    );\n    const queuedChunks = this._queuedChunks;\n    this._queuedChunks = null;\n    return new PDFDataTransportStreamReader(\n      this,\n      queuedChunks,\n      this._progressiveDone,\n      this._contentDispositionFilename\n    );\n  }\n\n  getRangeReader(begin, end) {\n    if (end <= this._progressiveDataLength) {\n      return null;\n    }\n    const reader = new PDFDataTransportStreamRangeReader(this, begin, end);\n    this._pdfDataRangeTransport.requestDataRange(begin, end);\n    this._rangeReaders.push(reader);\n    return reader;\n  }\n\n  cancelAllRequests(reason) {\n    if (this._fullRequestReader) {\n      this._fullRequestReader.cancel(reason);\n    }\n    for (const reader of this._rangeReaders.slice(0)) {\n      reader.cancel(reason);\n    }\n    this._pdfDataRangeTransport.abort();\n  }\n}\n\n/** @implements {IPDFStreamReader} */\nclass PDFDataTransportStreamReader {\n  constructor(\n    stream,\n    queuedChunks,\n    progressiveDone = false,\n    contentDispositionFilename = null\n  ) {\n    this._stream = stream;\n    this._done = progressiveDone || false;\n    this._filename = isPdfFile(contentDispositionFilename)\n      ? contentDispositionFilename\n      : null;\n    this._queuedChunks = queuedChunks || [];\n    this._loaded = 0;\n    for (const chunk of this._queuedChunks) {\n      this._loaded += chunk.byteLength;\n    }\n    this._requests = [];\n    this._headersReady = Promise.resolve();\n    stream._fullRequestReader = this;\n\n    this.onProgress = null;\n  }\n\n  _enqueue(chunk) {\n    if (this._done) {\n      return; // Ignore new data.\n    }\n    if (this._requests.length > 0) {\n      const requestCapability = this._requests.shift();\n      requestCapability.resolve({ value: chunk, done: false });\n    } else {\n      this._queuedChunks.push(chunk);\n    }\n    this._loaded += chunk.byteLength;\n  }\n\n  get headersReady() {\n    return this._headersReady;\n  }\n\n  get filename() {\n    return this._filename;\n  }\n\n  get isRangeSupported() {\n    return this._stream._isRangeSupported;\n  }\n\n  get isStreamingSupported() {\n    return this._stream._isStreamingSupported;\n  }\n\n  get contentLength() {\n    return this._stream._contentLength;\n  }\n\n  async read() {\n    if (this._queuedChunks.length > 0) {\n      const chunk = this._queuedChunks.shift();\n      return { value: chunk, done: false };\n    }\n    if (this._done) {\n      return { value: undefined, done: true };\n    }\n    const requestCapability = createPromiseCapability();\n    this._requests.push(requestCapability);\n    return requestCapability.promise;\n  }\n\n  cancel(reason) {\n    this._done = true;\n    for (const requestCapability of this._requests) {\n      requestCapability.resolve({ value: undefined, done: true });\n    }\n    this._requests.length = 0;\n  }\n\n  progressiveDone() {\n    if (this._done) {\n      return;\n    }\n    this._done = true;\n  }\n}\n\n/** @implements {IPDFStreamRangeReader} */\nclass PDFDataTransportStreamRangeReader {\n  constructor(stream, begin, end) {\n    this._stream = stream;\n    this._begin = begin;\n    this._end = end;\n    this._queuedChunk = null;\n    this._requests = [];\n    this._done = false;\n\n    this.onProgress = null;\n  }\n\n  _enqueue(chunk) {\n    if (this._done) {\n      return; // ignore new data\n    }\n    if (this._requests.length === 0) {\n      this._queuedChunk = chunk;\n    } else {\n      const requestsCapability = this._requests.shift();\n      requestsCapability.resolve({ value: chunk, done: false });\n      for (const requestCapability of this._requests) {\n        requestCapability.resolve({ value: undefined, done: true });\n      }\n      this._requests.length = 0;\n    }\n    this._done = true;\n    this._stream._removeRangeReader(this);\n  }\n\n  get isStreamingSupported() {\n    return false;\n  }\n\n  async read() {\n    if (this._queuedChunk) {\n      const chunk = this._queuedChunk;\n      this._queuedChunk = null;\n      return { value: chunk, done: false };\n    }\n    if (this._done) {\n      return { value: undefined, done: true };\n    }\n    const requestCapability = createPromiseCapability();\n    this._requests.push(requestCapability);\n    return requestCapability.promise;\n  }\n\n  cancel(reason) {\n    this._done = true;\n    for (const requestCapability of this._requests) {\n      requestCapability.resolve({ value: undefined, done: true });\n    }\n    this._requests.length = 0;\n    this._stream._removeRangeReader(this);\n  }\n}\n\nexport { PDFDataTransportStream };\n","/* Copyright 2021 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nclass XfaText {\n  /**\n   * Walk an XFA tree and create an array of text nodes that is compatible\n   * with a regular PDFs TextContent. Currently, only TextItem.str is supported,\n   * all other fields and styles haven't been implemented.\n   *\n   * @param {Object} xfa - An XFA fake DOM object.\n   *\n   * @returns {TextContent}\n   */\n  static textContent(xfa) {\n    const items = [];\n    const output = {\n      items,\n      styles: Object.create(null),\n    };\n    function walk(node) {\n      if (!node) {\n        return;\n      }\n      let str = null;\n      const name = node.name;\n      if (name === \"#text\") {\n        str = node.value;\n      } else if (!XfaText.shouldBuildText(name)) {\n        return;\n      } else if (node?.attributes?.textContent) {\n        str = node.attributes.textContent;\n      } else if (node.value) {\n        str = node.value;\n      }\n      if (str !== null) {\n        items.push({\n          str,\n        });\n      }\n      if (!node.children) {\n        return;\n      }\n      for (const child of node.children) {\n        walk(child);\n      }\n    }\n    walk(xfa);\n    return output;\n  }\n\n  /**\n   * @param {string} name - DOM node name. (lower case)\n   *\n   * @returns {boolean} true if the DOM node should have a corresponding text\n   * node.\n   */\n  static shouldBuildText(name) {\n    return !(\n      name === \"textarea\" ||\n      name === \"input\" ||\n      name === \"option\" ||\n      name === \"select\"\n    );\n  }\n}\n\nexport { XfaText };\n","/* Copyright 2014 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** @typedef {import(\"./api\").PDFPageProxy} PDFPageProxy */\n/** @typedef {import(\"./display_utils\").PageViewport} PageViewport */\n/** @typedef {import(\"./interfaces\").IDownloadManager} IDownloadManager */\n/** @typedef {import(\"../../web/interfaces\").IPDFLinkService} IPDFLinkService */\n\nimport {\n  AnnotationBorderStyleType,\n  AnnotationType,\n  assert,\n  shadow,\n  stringToPDFString,\n  unreachable,\n  Util,\n  warn,\n} from \"../shared/util.js\";\nimport {\n  DOMSVGFactory,\n  getFilenameFromUrl,\n  PDFDateString,\n} from \"./display_utils.js\";\nimport { AnnotationStorage } from \"./annotation_storage.js\";\nimport { ColorConverters } from \"../shared/scripting_utils.js\";\nimport { XfaLayer } from \"./xfa_layer.js\";\n\nconst DEFAULT_TAB_INDEX = 1000;\nconst GetElementsByNameSet = new WeakSet();\n\n/**\n * @typedef {Object} AnnotationElementParameters\n * @property {Object} data\n * @property {HTMLDivElement} layer\n * @property {PDFPageProxy} page\n * @property {PageViewport} viewport\n * @property {IPDFLinkService} linkService\n * @property {IDownloadManager} downloadManager\n * @property {AnnotationStorage} [annotationStorage]\n * @property {string} [imageResourcesPath] - Path for image resources, mainly\n *   for annotation icons. Include trailing slash.\n * @property {boolean} renderForms\n * @property {Object} svgFactory\n * @property {boolean} [enableScripting]\n * @property {boolean} [hasJSActions]\n * @property {Object} [fieldObjects]\n * @property {Object} [mouseState]\n */\n\nclass AnnotationElementFactory {\n  /**\n   * @param {AnnotationElementParameters} parameters\n   * @returns {AnnotationElement}\n   */\n  static create(parameters) {\n    const subtype = parameters.data.annotationType;\n\n    switch (subtype) {\n      case AnnotationType.LINK:\n        return new LinkAnnotationElement(parameters);\n\n      case AnnotationType.TEXT:\n        return new TextAnnotationElement(parameters);\n\n      case AnnotationType.WIDGET:\n        const fieldType = parameters.data.fieldType;\n\n        switch (fieldType) {\n          case \"Tx\":\n            return new TextWidgetAnnotationElement(parameters);\n          case \"Btn\":\n            if (parameters.data.radioButton) {\n              return new RadioButtonWidgetAnnotationElement(parameters);\n            } else if (parameters.data.checkBox) {\n              return new CheckboxWidgetAnnotationElement(parameters);\n            }\n            return new PushButtonWidgetAnnotationElement(parameters);\n          case \"Ch\":\n            return new ChoiceWidgetAnnotationElement(parameters);\n        }\n        return new WidgetAnnotationElement(parameters);\n\n      case AnnotationType.POPUP:\n        return new PopupAnnotationElement(parameters);\n\n      case AnnotationType.FREETEXT:\n        return new FreeTextAnnotationElement(parameters);\n\n      case AnnotationType.LINE:\n        return new LineAnnotationElement(parameters);\n\n      case AnnotationType.SQUARE:\n        return new SquareAnnotationElement(parameters);\n\n      case AnnotationType.CIRCLE:\n        return new CircleAnnotationElement(parameters);\n\n      case AnnotationType.POLYLINE:\n        return new PolylineAnnotationElement(parameters);\n\n      case AnnotationType.CARET:\n        return new CaretAnnotationElement(parameters);\n\n      case AnnotationType.INK:\n        return new InkAnnotationElement(parameters);\n\n      case AnnotationType.POLYGON:\n        return new PolygonAnnotationElement(parameters);\n\n      case AnnotationType.HIGHLIGHT:\n        return new HighlightAnnotationElement(parameters);\n\n      case AnnotationType.UNDERLINE:\n        return new UnderlineAnnotationElement(parameters);\n\n      case AnnotationType.SQUIGGLY:\n        return new SquigglyAnnotationElement(parameters);\n\n      case AnnotationType.STRIKEOUT:\n        return new StrikeOutAnnotationElement(parameters);\n\n      case AnnotationType.STAMP:\n        return new StampAnnotationElement(parameters);\n\n      case AnnotationType.FILEATTACHMENT:\n        return new FileAttachmentAnnotationElement(parameters);\n\n      default:\n        return new AnnotationElement(parameters);\n    }\n  }\n}\n\nclass AnnotationElement {\n  constructor(\n    parameters,\n    {\n      isRenderable = false,\n      ignoreBorder = false,\n      createQuadrilaterals = false,\n    } = {}\n  ) {\n    this.isRenderable = isRenderable;\n    this.data = parameters.data;\n    this.layer = parameters.layer;\n    this.page = parameters.page;\n    this.viewport = parameters.viewport;\n    this.linkService = parameters.linkService;\n    this.downloadManager = parameters.downloadManager;\n    this.imageResourcesPath = parameters.imageResourcesPath;\n    this.renderForms = parameters.renderForms;\n    this.svgFactory = parameters.svgFactory;\n    this.annotationStorage = parameters.annotationStorage;\n    this.enableScripting = parameters.enableScripting;\n    this.hasJSActions = parameters.hasJSActions;\n    this._fieldObjects = parameters.fieldObjects;\n    this._mouseState = parameters.mouseState;\n\n    if (isRenderable) {\n      this.container = this._createContainer(ignoreBorder);\n    }\n    if (createQuadrilaterals) {\n      this.quadrilaterals = this._createQuadrilaterals(ignoreBorder);\n    }\n  }\n\n  /**\n   * Create an empty container for the annotation's HTML element.\n   *\n   * @private\n   * @param {boolean} ignoreBorder\n   * @memberof AnnotationElement\n   * @returns {HTMLSectionElement}\n   */\n  _createContainer(ignoreBorder = false) {\n    const data = this.data,\n      page = this.page,\n      viewport = this.viewport;\n    const container = document.createElement(\"section\");\n    let width = data.rect[2] - data.rect[0];\n    let height = data.rect[3] - data.rect[1];\n\n    container.setAttribute(\"data-annotation-id\", data.id);\n\n    // Do *not* modify `data.rect`, since that will corrupt the annotation\n    // position on subsequent calls to `_createContainer` (see issue 6804).\n    const rect = Util.normalizeRect([\n      data.rect[0],\n      page.view[3] - data.rect[1] + page.view[1],\n      data.rect[2],\n      page.view[3] - data.rect[3] + page.view[1],\n    ]);\n\n    if (data.hasOwnCanvas) {\n      const transform = viewport.transform.slice();\n      const [scaleX, scaleY] = Util.singularValueDecompose2dScale(transform);\n      width = Math.ceil(width * scaleX);\n      height = Math.ceil(height * scaleY);\n      rect[0] *= scaleX;\n      rect[1] *= scaleY;\n      // Reset the scale part of the transform matrix (which must be diagonal\n      // or anti-diagonal) in order to avoid to rescale the canvas.\n      // The canvas for the annotation is correctly scaled when it is drawn\n      // (see `beginAnnotation` in canvas.js).\n      for (let i = 0; i < 4; i++) {\n        transform[i] = Math.sign(transform[i]);\n      }\n      container.style.transform = `matrix(${transform.join(\",\")})`;\n    } else {\n      container.style.transform = `matrix(${viewport.transform.join(\",\")})`;\n    }\n\n    container.style.transformOrigin = `${-rect[0]}px ${-rect[1]}px`;\n\n    if (!ignoreBorder && data.borderStyle.width > 0) {\n      container.style.borderWidth = `${data.borderStyle.width}px`;\n      if (data.borderStyle.style !== AnnotationBorderStyleType.UNDERLINE) {\n        // Underline styles only have a bottom border, so we do not need\n        // to adjust for all borders. This yields a similar result as\n        // Adobe Acrobat/Reader.\n        width -= 2 * data.borderStyle.width;\n        height -= 2 * data.borderStyle.width;\n      }\n\n      const horizontalRadius = data.borderStyle.horizontalCornerRadius;\n      const verticalRadius = data.borderStyle.verticalCornerRadius;\n      if (horizontalRadius > 0 || verticalRadius > 0) {\n        const radius = `${horizontalRadius}px / ${verticalRadius}px`;\n        container.style.borderRadius = radius;\n      }\n\n      switch (data.borderStyle.style) {\n        case AnnotationBorderStyleType.SOLID:\n          container.style.borderStyle = \"solid\";\n          break;\n\n        case AnnotationBorderStyleType.DASHED:\n          container.style.borderStyle = \"dashed\";\n          break;\n\n        case AnnotationBorderStyleType.BEVELED:\n          warn(\"Unimplemented border style: beveled\");\n          break;\n\n        case AnnotationBorderStyleType.INSET:\n          warn(\"Unimplemented border style: inset\");\n          break;\n\n        case AnnotationBorderStyleType.UNDERLINE:\n          container.style.borderBottomStyle = \"solid\";\n          break;\n\n        default:\n          break;\n      }\n\n      const borderColor = data.borderColor || data.color || null;\n      if (borderColor) {\n        container.style.borderColor = Util.makeHexColor(\n          data.color[0] | 0,\n          data.color[1] | 0,\n          data.color[2] | 0\n        );\n      } else {\n        // Transparent (invisible) border, so do not draw it at all.\n        container.style.borderWidth = 0;\n      }\n    }\n\n    container.style.left = `${rect[0]}px`;\n    container.style.top = `${rect[1]}px`;\n\n    if (data.hasOwnCanvas) {\n      container.style.width = container.style.height = \"auto\";\n    } else {\n      container.style.width = `${width}px`;\n      container.style.height = `${height}px`;\n    }\n    return container;\n  }\n\n  /**\n   * Create quadrilaterals from the annotation's quadpoints.\n   *\n   * @private\n   * @param {boolean} ignoreBorder\n   * @memberof AnnotationElement\n   * @returns {Array<HTMLSectionElement>}\n   */\n  _createQuadrilaterals(ignoreBorder = false) {\n    if (!this.data.quadPoints) {\n      return null;\n    }\n\n    const quadrilaterals = [];\n    const savedRect = this.data.rect;\n    for (const quadPoint of this.data.quadPoints) {\n      this.data.rect = [\n        quadPoint[2].x,\n        quadPoint[2].y,\n        quadPoint[1].x,\n        quadPoint[1].y,\n      ];\n      quadrilaterals.push(this._createContainer(ignoreBorder));\n    }\n    this.data.rect = savedRect;\n    return quadrilaterals;\n  }\n\n  /**\n   * Create a popup for the annotation's HTML element. This is used for\n   * annotations that do not have a Popup entry in the dictionary, but\n   * are of a type that works with popups (such as Highlight annotations).\n   *\n   * @private\n   * @param {HTMLDivElement|HTMLImageElement|null} trigger\n   * @param {Object} data\n   * @memberof AnnotationElement\n   */\n  _createPopup(trigger, data) {\n    let container = this.container;\n    if (this.quadrilaterals) {\n      trigger = trigger || this.quadrilaterals;\n      container = this.quadrilaterals[0];\n    }\n\n    // If no trigger element is specified, create it.\n    if (!trigger) {\n      trigger = document.createElement(\"div\");\n      trigger.style.height = container.style.height;\n      trigger.style.width = container.style.width;\n      container.appendChild(trigger);\n    }\n\n    const popupElement = new PopupElement({\n      container,\n      trigger,\n      color: data.color,\n      titleObj: data.titleObj,\n      modificationDate: data.modificationDate,\n      contentsObj: data.contentsObj,\n      richText: data.richText,\n      hideWrapper: true,\n    });\n    const popup = popupElement.render();\n\n    // Position the popup next to the annotation's container.\n    popup.style.left = container.style.width;\n\n    container.appendChild(popup);\n  }\n\n  /**\n   * Render the quadrilaterals of the annotation.\n   *\n   * @private\n   * @param {string} className\n   * @memberof AnnotationElement\n   * @returns {Array<HTMLSectionElement>}\n   */\n  _renderQuadrilaterals(className) {\n    if (\n      typeof PDFJSDev === \"undefined\" ||\n      PDFJSDev.test(\"!PRODUCTION || TESTING\")\n    ) {\n      assert(this.quadrilaterals, \"Missing quadrilaterals during rendering\");\n    }\n\n    for (const quadrilateral of this.quadrilaterals) {\n      quadrilateral.className = className;\n    }\n    return this.quadrilaterals;\n  }\n\n  /**\n   * Render the annotation's HTML element(s).\n   *\n   * @public\n   * @memberof AnnotationElement\n   * @returns {HTMLSectionElement|Array<HTMLSectionElement>}\n   */\n  render() {\n    unreachable(\"Abstract method `AnnotationElement.render` called\");\n  }\n\n  /**\n   * @private\n   * @returns {Array}\n   */\n  _getElementsByName(name, skipId = null) {\n    const fields = [];\n\n    if (this._fieldObjects) {\n      const fieldObj = this._fieldObjects[name];\n      if (fieldObj) {\n        for (const { page, id, exportValues } of fieldObj) {\n          if (page === -1) {\n            continue;\n          }\n          if (id === skipId) {\n            continue;\n          }\n          const exportValue =\n            typeof exportValues === \"string\" ? exportValues : null;\n\n          const domElement = document.getElementById(id);\n          if (domElement && !GetElementsByNameSet.has(domElement)) {\n            warn(`_getElementsByName - element not allowed: ${id}`);\n            continue;\n          }\n          fields.push({ id, exportValue, domElement });\n        }\n      }\n      return fields;\n    }\n    // Fallback to a regular DOM lookup, to ensure that the standalone\n    // viewer components won't break.\n    for (const domElement of document.getElementsByName(name)) {\n      const { id, exportValue } = domElement;\n      if (id === skipId) {\n        continue;\n      }\n      if (!GetElementsByNameSet.has(domElement)) {\n        continue;\n      }\n      fields.push({ id, exportValue, domElement });\n    }\n    return fields;\n  }\n\n  static get platform() {\n    const platform = typeof navigator !== \"undefined\" ? navigator.platform : \"\";\n\n    return shadow(this, \"platform\", {\n      isWin: platform.includes(\"Win\"),\n      isMac: platform.includes(\"Mac\"),\n    });\n  }\n}\n\nclass LinkAnnotationElement extends AnnotationElement {\n  constructor(parameters, options = null) {\n    const isRenderable = !!(\n      parameters.data.url ||\n      parameters.data.dest ||\n      parameters.data.action ||\n      parameters.data.isTooltipOnly ||\n      parameters.data.resetForm ||\n      (parameters.data.actions &&\n        (parameters.data.actions.Action ||\n          parameters.data.actions[\"Mouse Up\"] ||\n          parameters.data.actions[\"Mouse Down\"]))\n    );\n    super(parameters, {\n      isRenderable,\n      ignoreBorder: !!options?.ignoreBorder,\n      createQuadrilaterals: true,\n    });\n  }\n\n  render() {\n    const { data, linkService } = this;\n    const link = document.createElement(\"a\");\n\n    if (data.url) {\n      if (\n        (typeof PDFJSDev === \"undefined\" || PDFJSDev.test(\"GENERIC\")) &&\n        !linkService.addLinkAttributes\n      ) {\n        warn(\n          \"LinkAnnotationElement.render - missing `addLinkAttributes`-method on the `linkService`-instance.\"\n        );\n      }\n      linkService.addLinkAttributes?.(link, data.url, data.newWindow);\n    } else if (data.action) {\n      this._bindNamedAction(link, data.action);\n    } else if (data.dest) {\n      this._bindLink(link, data.dest);\n    } else {\n      let hasClickAction = false;\n      if (\n        data.actions &&\n        (data.actions.Action ||\n          data.actions[\"Mouse Up\"] ||\n          data.actions[\"Mouse Down\"]) &&\n        this.enableScripting &&\n        this.hasJSActions\n      ) {\n        hasClickAction = true;\n        this._bindJSAction(link, data);\n      }\n\n      if (data.resetForm) {\n        this._bindResetFormAction(link, data.resetForm);\n      } else if (!hasClickAction) {\n        this._bindLink(link, \"\");\n      }\n    }\n\n    if (this.quadrilaterals) {\n      return this._renderQuadrilaterals(\"linkAnnotation\").map(\n        (quadrilateral, index) => {\n          const linkElement = index === 0 ? link : link.cloneNode();\n          quadrilateral.appendChild(linkElement);\n          return quadrilateral;\n        }\n      );\n    }\n\n    this.container.className = \"linkAnnotation\";\n    this.container.appendChild(link);\n    return this.container;\n  }\n\n  /**\n   * Bind internal links to the link element.\n   *\n   * @private\n   * @param {Object} link\n   * @param {Object} destination\n   * @memberof LinkAnnotationElement\n   */\n  _bindLink(link, destination) {\n    link.href = this.linkService.getDestinationHash(destination);\n    link.onclick = () => {\n      if (destination) {\n        this.linkService.goToDestination(destination);\n      }\n      return false;\n    };\n    if (destination || destination === /* isTooltipOnly = */ \"\") {\n      link.className = \"internalLink\";\n    }\n  }\n\n  /**\n   * Bind named actions to the link element.\n   *\n   * @private\n   * @param {Object} link\n   * @param {Object} action\n   * @memberof LinkAnnotationElement\n   */\n  _bindNamedAction(link, action) {\n    link.href = this.linkService.getAnchorUrl(\"\");\n    link.onclick = () => {\n      this.linkService.executeNamedAction(action);\n      return false;\n    };\n    link.className = \"internalLink\";\n  }\n\n  /**\n   * Bind JS actions to the link element.\n   *\n   * @private\n   * @param {Object} link\n   * @param {Object} data\n   * @memberof LinkAnnotationElement\n   */\n  _bindJSAction(link, data) {\n    link.href = this.linkService.getAnchorUrl(\"\");\n    const map = new Map([\n      [\"Action\", \"onclick\"],\n      [\"Mouse Up\", \"onmouseup\"],\n      [\"Mouse Down\", \"onmousedown\"],\n    ]);\n    for (const name of Object.keys(data.actions)) {\n      const jsName = map.get(name);\n      if (!jsName) {\n        continue;\n      }\n      link[jsName] = () => {\n        this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\n          source: this,\n          detail: {\n            id: data.id,\n            name,\n          },\n        });\n        return false;\n      };\n    }\n\n    if (!link.onclick) {\n      link.onclick = () => false;\n    }\n    link.className = \"internalLink\";\n  }\n\n  _bindResetFormAction(link, resetForm) {\n    const otherClickAction = link.onclick;\n    if (!otherClickAction) {\n      link.href = this.linkService.getAnchorUrl(\"\");\n    }\n    link.className = \"internalLink\";\n\n    if (!this._fieldObjects) {\n      warn(\n        `_bindResetFormAction - \"resetForm\" action not supported, ` +\n          \"ensure that the `fieldObjects` parameter is provided.\"\n      );\n      if (!otherClickAction) {\n        link.onclick = () => false;\n      }\n      return;\n    }\n\n    link.onclick = () => {\n      if (otherClickAction) {\n        otherClickAction();\n      }\n\n      const {\n        fields: resetFormFields,\n        refs: resetFormRefs,\n        include,\n      } = resetForm;\n\n      const allFields = [];\n      if (resetFormFields.length !== 0 || resetFormRefs.length !== 0) {\n        const fieldIds = new Set(resetFormRefs);\n        for (const fieldName of resetFormFields) {\n          const fields = this._fieldObjects[fieldName] || [];\n          for (const { id } of fields) {\n            fieldIds.add(id);\n          }\n        }\n        for (const fields of Object.values(this._fieldObjects)) {\n          for (const field of fields) {\n            if (fieldIds.has(field.id) === include) {\n              allFields.push(field);\n            }\n          }\n        }\n      } else {\n        for (const fields of Object.values(this._fieldObjects)) {\n          allFields.push(...fields);\n        }\n      }\n\n      const storage = this.annotationStorage;\n      const allIds = [];\n      for (const field of allFields) {\n        const { id } = field;\n        allIds.push(id);\n        switch (field.type) {\n          case \"text\": {\n            const value = field.defaultValue || \"\";\n            storage.setValue(id, { value, valueAsString: value });\n            break;\n          }\n          case \"checkbox\":\n          case \"radiobutton\": {\n            const value = field.defaultValue === field.exportValues;\n            storage.setValue(id, { value });\n            break;\n          }\n          case \"combobox\":\n          case \"listbox\": {\n            const value = field.defaultValue || \"\";\n            storage.setValue(id, { value });\n            break;\n          }\n          default:\n            continue;\n        }\n        const domElement = document.getElementById(id);\n        if (!domElement || !GetElementsByNameSet.has(domElement)) {\n          continue;\n        }\n        domElement.dispatchEvent(new Event(\"resetform\"));\n      }\n\n      if (this.enableScripting) {\n        // Update the values in the sandbox.\n        this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\n          source: this,\n          detail: {\n            id: \"app\",\n            ids: allIds,\n            name: \"ResetForm\",\n          },\n        });\n      }\n\n      return false;\n    };\n  }\n}\n\nclass TextAnnotationElement extends AnnotationElement {\n  constructor(parameters) {\n    const isRenderable = !!(\n      parameters.data.hasPopup ||\n      parameters.data.titleObj?.str ||\n      parameters.data.contentsObj?.str ||\n      parameters.data.richText?.str\n    );\n    super(parameters, { isRenderable });\n  }\n\n  render() {\n    this.container.className = \"textAnnotation\";\n\n    const image = document.createElement(\"img\");\n    image.style.height = this.container.style.height;\n    image.style.width = this.container.style.width;\n    image.src =\n      this.imageResourcesPath +\n      \"annotation-\" +\n      this.data.name.toLowerCase() +\n      \".svg\";\n    image.alt = \"[{{type}} Annotation]\";\n    image.dataset.l10nId = \"text_annotation_type\";\n    image.dataset.l10nArgs = JSON.stringify({ type: this.data.name });\n\n    if (!this.data.hasPopup) {\n      this._createPopup(image, this.data);\n    }\n\n    this.container.appendChild(image);\n    return this.container;\n  }\n}\n\nclass WidgetAnnotationElement extends AnnotationElement {\n  render() {\n    // Show only the container for unsupported field types.\n    if (this.data.alternativeText) {\n      this.container.title = this.data.alternativeText;\n    }\n\n    return this.container;\n  }\n\n  _getKeyModifier(event) {\n    const { isWin, isMac } = AnnotationElement.platform;\n    return (isWin && event.ctrlKey) || (isMac && event.metaKey);\n  }\n\n  _setEventListener(element, baseName, eventName, valueGetter) {\n    if (baseName.includes(\"mouse\")) {\n      // Mouse events\n      element.addEventListener(baseName, event => {\n        this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\n          source: this,\n          detail: {\n            id: this.data.id,\n            name: eventName,\n            value: valueGetter(event),\n            shift: event.shiftKey,\n            modifier: this._getKeyModifier(event),\n          },\n        });\n      });\n    } else {\n      // Non mouse event\n      element.addEventListener(baseName, event => {\n        this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\n          source: this,\n          detail: {\n            id: this.data.id,\n            name: eventName,\n            value: event.target.checked,\n          },\n        });\n      });\n    }\n  }\n\n  _setEventListeners(element, names, getter) {\n    for (const [baseName, eventName] of names) {\n      if (eventName === \"Action\" || this.data.actions?.[eventName]) {\n        this._setEventListener(element, baseName, eventName, getter);\n      }\n    }\n  }\n\n  _setBackgroundColor(element) {\n    const color = this.data.backgroundColor || null;\n    element.style.backgroundColor =\n      color === null\n        ? \"transparent\"\n        : Util.makeHexColor(color[0], color[1], color[2]);\n  }\n\n  _dispatchEventFromSandbox(actions, jsEvent) {\n    const setColor = (jsName, styleName, event) => {\n      const color = event.detail[jsName];\n      event.target.style[styleName] = ColorConverters[`${color[0]}_HTML`](\n        color.slice(1)\n      );\n    };\n\n    const commonActions = {\n      display: event => {\n        const hidden = event.detail.display % 2 === 1;\n        event.target.style.visibility = hidden ? \"hidden\" : \"visible\";\n        this.annotationStorage.setValue(this.data.id, {\n          hidden,\n          print: event.detail.display === 0 || event.detail.display === 3,\n        });\n      },\n      print: event => {\n        this.annotationStorage.setValue(this.data.id, {\n          print: event.detail.print,\n        });\n      },\n      hidden: event => {\n        event.target.style.visibility = event.detail.hidden\n          ? \"hidden\"\n          : \"visible\";\n        this.annotationStorage.setValue(this.data.id, {\n          hidden: event.detail.hidden,\n        });\n      },\n      focus: event => {\n        setTimeout(() => event.target.focus({ preventScroll: false }), 0);\n      },\n      userName: event => {\n        // tooltip\n        event.target.title = event.detail.userName;\n      },\n      readonly: event => {\n        if (event.detail.readonly) {\n          event.target.setAttribute(\"readonly\", \"\");\n        } else {\n          event.target.removeAttribute(\"readonly\");\n        }\n      },\n      required: event => {\n        if (event.detail.required) {\n          event.target.setAttribute(\"required\", \"\");\n        } else {\n          event.target.removeAttribute(\"required\");\n        }\n      },\n      bgColor: event => {\n        setColor(\"bgColor\", \"backgroundColor\", event);\n      },\n      fillColor: event => {\n        setColor(\"fillColor\", \"backgroundColor\", event);\n      },\n      fgColor: event => {\n        setColor(\"fgColor\", \"color\", event);\n      },\n      textColor: event => {\n        setColor(\"textColor\", \"color\", event);\n      },\n      borderColor: event => {\n        setColor(\"borderColor\", \"borderColor\", event);\n      },\n      strokeColor: event => {\n        setColor(\"strokeColor\", \"borderColor\", event);\n      },\n    };\n\n    for (const name of Object.keys(jsEvent.detail)) {\n      const action = actions[name] || commonActions[name];\n      if (action) {\n        action(jsEvent);\n      }\n    }\n  }\n}\n\nclass TextWidgetAnnotationElement extends WidgetAnnotationElement {\n  constructor(parameters) {\n    const isRenderable =\n      parameters.renderForms ||\n      (!parameters.data.hasAppearance && !!parameters.data.fieldValue);\n    super(parameters, { isRenderable });\n  }\n\n  setPropertyOnSiblings(base, key, value, keyInStorage) {\n    const storage = this.annotationStorage;\n    for (const element of this._getElementsByName(\n      base.name,\n      /* skipId = */ base.id\n    )) {\n      if (element.domElement) {\n        element.domElement[key] = value;\n      }\n      storage.setValue(element.id, { [keyInStorage]: value });\n    }\n  }\n\n  render() {\n    const storage = this.annotationStorage;\n    const id = this.data.id;\n\n    this.container.className = \"textWidgetAnnotation\";\n\n    let element = null;\n    if (this.renderForms) {\n      // NOTE: We cannot set the values using `element.value` below, since it\n      //       prevents the AnnotationLayer rasterizer in `test/driver.js`\n      //       from parsing the elements correctly for the reference tests.\n      const storedData = storage.getValue(id, {\n        value: this.data.fieldValue,\n        valueAsString: this.data.fieldValue,\n      });\n      const textContent = storedData.valueAsString || storedData.value || \"\";\n      const elementData = {\n        userValue: null,\n        formattedValue: null,\n        beforeInputSelectionRange: null,\n        beforeInputValue: null,\n      };\n\n      if (this.data.multiLine) {\n        element = document.createElement(\"textarea\");\n        element.textContent = textContent;\n      } else {\n        element = document.createElement(\"input\");\n        element.type = \"text\";\n        element.setAttribute(\"value\", textContent);\n      }\n      GetElementsByNameSet.add(element);\n      element.disabled = this.data.readOnly;\n      element.name = this.data.fieldName;\n      element.tabIndex = DEFAULT_TAB_INDEX;\n\n      elementData.userValue = textContent;\n      element.setAttribute(\"id\", id);\n\n      element.addEventListener(\"input\", event => {\n        storage.setValue(id, { value: event.target.value });\n        this.setPropertyOnSiblings(\n          element,\n          \"value\",\n          event.target.value,\n          \"value\"\n        );\n      });\n\n      element.addEventListener(\"resetform\", event => {\n        const defaultValue = this.data.defaultFieldValue || \"\";\n        element.value = elementData.userValue = defaultValue;\n        delete elementData.formattedValue;\n      });\n\n      let blurListener = event => {\n        if (elementData.formattedValue) {\n          event.target.value = elementData.formattedValue;\n        }\n        // Reset the cursor position to the start of the field (issue 12359).\n        event.target.scrollLeft = 0;\n        elementData.beforeInputSelectionRange = null;\n      };\n\n      if (this.enableScripting && this.hasJSActions) {\n        element.addEventListener(\"focus\", event => {\n          if (elementData.userValue) {\n            event.target.value = elementData.userValue;\n          }\n        });\n\n        element.addEventListener(\"updatefromsandbox\", jsEvent => {\n          const actions = {\n            value(event) {\n              elementData.userValue = event.detail.value || \"\";\n              storage.setValue(id, { value: elementData.userValue.toString() });\n              if (!elementData.formattedValue) {\n                event.target.value = elementData.userValue;\n              }\n            },\n            valueAsString(event) {\n              elementData.formattedValue = event.detail.valueAsString || \"\";\n              if (event.target !== document.activeElement) {\n                // Input hasn't the focus so display formatted string\n                event.target.value = elementData.formattedValue;\n              }\n              storage.setValue(id, {\n                formattedValue: elementData.formattedValue,\n              });\n            },\n            selRange(event) {\n              const [selStart, selEnd] = event.detail.selRange;\n              if (selStart >= 0 && selEnd < event.target.value.length) {\n                event.target.setSelectionRange(selStart, selEnd);\n              }\n            },\n          };\n          this._dispatchEventFromSandbox(actions, jsEvent);\n        });\n\n        // Even if the field hasn't any actions\n        // leaving it can still trigger some actions with Calculate\n        element.addEventListener(\"keydown\", event => {\n          elementData.beforeInputValue = event.target.value;\n          // if the key is one of Escape, Enter or Tab\n          // then the data are committed\n          let commitKey = -1;\n          if (event.key === \"Escape\") {\n            commitKey = 0;\n          } else if (event.key === \"Enter\") {\n            commitKey = 2;\n          } else if (event.key === \"Tab\") {\n            commitKey = 3;\n          }\n          if (commitKey === -1) {\n            return;\n          }\n          // Save the entered value\n          elementData.userValue = event.target.value;\n          this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\n            source: this,\n            detail: {\n              id,\n              name: \"Keystroke\",\n              value: event.target.value,\n              willCommit: true,\n              commitKey,\n              selStart: event.target.selectionStart,\n              selEnd: event.target.selectionEnd,\n            },\n          });\n        });\n        const _blurListener = blurListener;\n        blurListener = null;\n        element.addEventListener(\"blur\", event => {\n          if (this._mouseState.isDown) {\n            // Focus out using the mouse: data are committed\n            elementData.userValue = event.target.value;\n            this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\n              source: this,\n              detail: {\n                id,\n                name: \"Keystroke\",\n                value: event.target.value,\n                willCommit: true,\n                commitKey: 1,\n                selStart: event.target.selectionStart,\n                selEnd: event.target.selectionEnd,\n              },\n            });\n          }\n          _blurListener(event);\n        });\n        element.addEventListener(\"mousedown\", event => {\n          elementData.beforeInputValue = event.target.value;\n          elementData.beforeInputSelectionRange = null;\n        });\n        element.addEventListener(\"keyup\", event => {\n          // keyup is triggered after input\n          if (event.target.selectionStart === event.target.selectionEnd) {\n            elementData.beforeInputSelectionRange = null;\n          }\n        });\n        element.addEventListener(\"select\", event => {\n          elementData.beforeInputSelectionRange = [\n            event.target.selectionStart,\n            event.target.selectionEnd,\n          ];\n        });\n\n        if (this.data.actions?.Keystroke) {\n          // We should use beforeinput but this\n          // event isn't available in Firefox\n          element.addEventListener(\"input\", event => {\n            let selStart = -1;\n            let selEnd = -1;\n            if (elementData.beforeInputSelectionRange) {\n              [selStart, selEnd] = elementData.beforeInputSelectionRange;\n            }\n            this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\n              source: this,\n              detail: {\n                id,\n                name: \"Keystroke\",\n                value: elementData.beforeInputValue,\n                change: event.data,\n                willCommit: false,\n                selStart,\n                selEnd,\n              },\n            });\n          });\n        }\n\n        this._setEventListeners(\n          element,\n          [\n            [\"focus\", \"Focus\"],\n            [\"blur\", \"Blur\"],\n            [\"mousedown\", \"Mouse Down\"],\n            [\"mouseenter\", \"Mouse Enter\"],\n            [\"mouseleave\", \"Mouse Exit\"],\n            [\"mouseup\", \"Mouse Up\"],\n          ],\n          event => event.target.value\n        );\n      }\n\n      if (blurListener) {\n        element.addEventListener(\"blur\", blurListener);\n      }\n\n      if (this.data.maxLen !== null) {\n        element.maxLength = this.data.maxLen;\n      }\n\n      if (this.data.comb) {\n        const fieldWidth = this.data.rect[2] - this.data.rect[0];\n        const combWidth = fieldWidth / this.data.maxLen;\n\n        element.classList.add(\"comb\");\n        element.style.letterSpacing = `calc(${combWidth}px - 1ch)`;\n      }\n    } else {\n      element = document.createElement(\"div\");\n      element.textContent = this.data.fieldValue;\n      element.style.verticalAlign = \"middle\";\n      element.style.display = \"table-cell\";\n    }\n\n    this._setTextStyle(element);\n    this._setBackgroundColor(element);\n\n    this.container.appendChild(element);\n    return this.container;\n  }\n\n  /**\n   * Apply text styles to the text in the element.\n   *\n   * @private\n   * @param {HTMLDivElement} element\n   * @memberof TextWidgetAnnotationElement\n   */\n  _setTextStyle(element) {\n    const TEXT_ALIGNMENT = [\"left\", \"center\", \"right\"];\n    const { fontSize, fontColor } = this.data.defaultAppearanceData;\n    const style = element.style;\n\n    // TODO: If the font-size is zero, calculate it based on the height and\n    //       width of the element.\n    // Not setting `style.fontSize` will use the default font-size for now.\n    if (fontSize) {\n      style.fontSize = `${fontSize}px`;\n    }\n\n    style.color = Util.makeHexColor(fontColor[0], fontColor[1], fontColor[2]);\n\n    if (this.data.textAlignment !== null) {\n      style.textAlign = TEXT_ALIGNMENT[this.data.textAlignment];\n    }\n  }\n}\n\nclass CheckboxWidgetAnnotationElement extends WidgetAnnotationElement {\n  constructor(parameters) {\n    super(parameters, { isRenderable: parameters.renderForms });\n  }\n\n  render() {\n    const storage = this.annotationStorage;\n    const data = this.data;\n    const id = data.id;\n    let value = storage.getValue(id, {\n      value: data.exportValue === data.fieldValue,\n    }).value;\n    if (typeof value === \"string\") {\n      // The value has been changed through js and set in annotationStorage.\n      value = value !== \"Off\";\n      storage.setValue(id, { value });\n    }\n\n    this.container.className = \"buttonWidgetAnnotation checkBox\";\n\n    const element = document.createElement(\"input\");\n    GetElementsByNameSet.add(element);\n    element.disabled = data.readOnly;\n    element.type = \"checkbox\";\n    element.name = data.fieldName;\n    if (value) {\n      element.setAttribute(\"checked\", true);\n    }\n    element.setAttribute(\"id\", id);\n    element.setAttribute(\"exportValue\", data.exportValue);\n    element.tabIndex = DEFAULT_TAB_INDEX;\n\n    element.addEventListener(\"change\", event => {\n      const { name, checked } = event.target;\n      for (const checkbox of this._getElementsByName(name, /* skipId = */ id)) {\n        const curChecked = checked && checkbox.exportValue === data.exportValue;\n        if (checkbox.domElement) {\n          checkbox.domElement.checked = curChecked;\n        }\n        storage.setValue(checkbox.id, { value: curChecked });\n      }\n      storage.setValue(id, { value: checked });\n    });\n\n    element.addEventListener(\"resetform\", event => {\n      const defaultValue = data.defaultFieldValue || \"Off\";\n      event.target.checked = defaultValue === data.exportValue;\n    });\n\n    if (this.enableScripting && this.hasJSActions) {\n      element.addEventListener(\"updatefromsandbox\", jsEvent => {\n        const actions = {\n          value(event) {\n            event.target.checked = event.detail.value !== \"Off\";\n            storage.setValue(id, { value: event.target.checked });\n          },\n        };\n        this._dispatchEventFromSandbox(actions, jsEvent);\n      });\n\n      this._setEventListeners(\n        element,\n        [\n          [\"change\", \"Validate\"],\n          [\"change\", \"Action\"],\n          [\"focus\", \"Focus\"],\n          [\"blur\", \"Blur\"],\n          [\"mousedown\", \"Mouse Down\"],\n          [\"mouseenter\", \"Mouse Enter\"],\n          [\"mouseleave\", \"Mouse Exit\"],\n          [\"mouseup\", \"Mouse Up\"],\n        ],\n        event => event.target.checked\n      );\n    }\n\n    this._setBackgroundColor(element);\n\n    this.container.appendChild(element);\n    return this.container;\n  }\n}\n\nclass RadioButtonWidgetAnnotationElement extends WidgetAnnotationElement {\n  constructor(parameters) {\n    super(parameters, { isRenderable: parameters.renderForms });\n  }\n\n  render() {\n    this.container.className = \"buttonWidgetAnnotation radioButton\";\n    const storage = this.annotationStorage;\n    const data = this.data;\n    const id = data.id;\n    let value = storage.getValue(id, {\n      value: data.fieldValue === data.buttonValue,\n    }).value;\n    if (typeof value === \"string\") {\n      // The value has been changed through js and set in annotationStorage.\n      value = value !== data.buttonValue;\n      storage.setValue(id, { value });\n    }\n\n    const element = document.createElement(\"input\");\n    GetElementsByNameSet.add(element);\n    element.disabled = data.readOnly;\n    element.type = \"radio\";\n    element.name = data.fieldName;\n    if (value) {\n      element.setAttribute(\"checked\", true);\n    }\n    element.setAttribute(\"id\", id);\n    element.tabIndex = DEFAULT_TAB_INDEX;\n\n    element.addEventListener(\"change\", event => {\n      const { name, checked } = event.target;\n      for (const radio of this._getElementsByName(name, /* skipId = */ id)) {\n        storage.setValue(radio.id, { value: false });\n      }\n      storage.setValue(id, { value: checked });\n    });\n\n    element.addEventListener(\"resetform\", event => {\n      const defaultValue = data.defaultFieldValue;\n      event.target.checked =\n        defaultValue !== null &&\n        defaultValue !== undefined &&\n        defaultValue === data.buttonValue;\n    });\n\n    if (this.enableScripting && this.hasJSActions) {\n      const pdfButtonValue = data.buttonValue;\n      element.addEventListener(\"updatefromsandbox\", jsEvent => {\n        const actions = {\n          value: event => {\n            const checked = pdfButtonValue === event.detail.value;\n            for (const radio of this._getElementsByName(event.target.name)) {\n              const curChecked = checked && radio.id === id;\n              if (radio.domElement) {\n                radio.domElement.checked = curChecked;\n              }\n              storage.setValue(radio.id, { value: curChecked });\n            }\n          },\n        };\n        this._dispatchEventFromSandbox(actions, jsEvent);\n      });\n\n      this._setEventListeners(\n        element,\n        [\n          [\"change\", \"Validate\"],\n          [\"change\", \"Action\"],\n          [\"focus\", \"Focus\"],\n          [\"blur\", \"Blur\"],\n          [\"mousedown\", \"Mouse Down\"],\n          [\"mouseenter\", \"Mouse Enter\"],\n          [\"mouseleave\", \"Mouse Exit\"],\n          [\"mouseup\", \"Mouse Up\"],\n        ],\n        event => event.target.checked\n      );\n    }\n\n    this._setBackgroundColor(element);\n\n    this.container.appendChild(element);\n    return this.container;\n  }\n}\n\nclass PushButtonWidgetAnnotationElement extends LinkAnnotationElement {\n  constructor(parameters) {\n    super(parameters, { ignoreBorder: parameters.data.hasAppearance });\n  }\n\n  render() {\n    // The rendering and functionality of a push button widget annotation is\n    // equal to that of a link annotation, but may have more functionality, such\n    // as performing actions on form fields (resetting, submitting, et cetera).\n    const container = super.render();\n    container.className = \"buttonWidgetAnnotation pushButton\";\n\n    if (this.data.alternativeText) {\n      container.title = this.data.alternativeText;\n    }\n\n    return container;\n  }\n}\n\nclass ChoiceWidgetAnnotationElement extends WidgetAnnotationElement {\n  constructor(parameters) {\n    super(parameters, { isRenderable: parameters.renderForms });\n  }\n\n  render() {\n    this.container.className = \"choiceWidgetAnnotation\";\n    const storage = this.annotationStorage;\n    const id = this.data.id;\n\n    // For printing/saving we currently only support choice widgets with one\n    // option selection. Therefore, listboxes (#12189) and comboboxes (#12224)\n    // are not properly printed/saved yet, so we only store the first item in\n    // the field value array instead of the entire array. Once support for those\n    // two field types is implemented, we should use the same pattern as the\n    // other interactive widgets where the return value of `getValue`\n    // is used and the full array of field values is stored.\n    storage.getValue(id, {\n      value:\n        this.data.fieldValue.length > 0 ? this.data.fieldValue[0] : undefined,\n    });\n\n    let { fontSize } = this.data.defaultAppearanceData;\n    if (!fontSize) {\n      fontSize = 9;\n    }\n    const fontSizeStyle = `calc(${fontSize}px * var(--zoom-factor))`;\n\n    const selectElement = document.createElement(\"select\");\n    GetElementsByNameSet.add(selectElement);\n    selectElement.disabled = this.data.readOnly;\n    selectElement.name = this.data.fieldName;\n    selectElement.setAttribute(\"id\", id);\n    selectElement.tabIndex = DEFAULT_TAB_INDEX;\n\n    selectElement.style.fontSize = `${fontSize}px`;\n\n    if (!this.data.combo) {\n      // List boxes have a size and (optionally) multiple selection.\n      selectElement.size = this.data.options.length;\n      if (this.data.multiSelect) {\n        selectElement.multiple = true;\n      }\n    }\n\n    selectElement.addEventListener(\"resetform\", event => {\n      const defaultValue = this.data.defaultFieldValue;\n      for (const option of selectElement.options) {\n        option.selected = option.value === defaultValue;\n      }\n    });\n\n    // Insert the options into the choice field.\n    for (const option of this.data.options) {\n      const optionElement = document.createElement(\"option\");\n      optionElement.textContent = option.displayValue;\n      optionElement.value = option.exportValue;\n      if (this.data.combo) {\n        optionElement.style.fontSize = fontSizeStyle;\n      }\n      if (this.data.fieldValue.includes(option.exportValue)) {\n        optionElement.setAttribute(\"selected\", true);\n      }\n      selectElement.appendChild(optionElement);\n    }\n\n    const getValue = (event, isExport) => {\n      const name = isExport ? \"value\" : \"textContent\";\n      const options = event.target.options;\n      if (!event.target.multiple) {\n        return options.selectedIndex === -1\n          ? null\n          : options[options.selectedIndex][name];\n      }\n      return Array.prototype.filter\n        .call(options, option => option.selected)\n        .map(option => option[name]);\n    };\n\n    const getItems = event => {\n      const options = event.target.options;\n      return Array.prototype.map.call(options, option => {\n        return { displayValue: option.textContent, exportValue: option.value };\n      });\n    };\n\n    if (this.enableScripting && this.hasJSActions) {\n      selectElement.addEventListener(\"updatefromsandbox\", jsEvent => {\n        const actions = {\n          value(event) {\n            const value = event.detail.value;\n            const values = new Set(Array.isArray(value) ? value : [value]);\n            for (const option of selectElement.options) {\n              option.selected = values.has(option.value);\n            }\n            storage.setValue(id, {\n              value: getValue(event, /* isExport */ true),\n            });\n          },\n          multipleSelection(event) {\n            selectElement.multiple = true;\n          },\n          remove(event) {\n            const options = selectElement.options;\n            const index = event.detail.remove;\n            options[index].selected = false;\n            selectElement.remove(index);\n            if (options.length > 0) {\n              const i = Array.prototype.findIndex.call(\n                options,\n                option => option.selected\n              );\n              if (i === -1) {\n                options[0].selected = true;\n              }\n            }\n            storage.setValue(id, {\n              value: getValue(event, /* isExport */ true),\n              items: getItems(event),\n            });\n          },\n          clear(event) {\n            while (selectElement.length !== 0) {\n              selectElement.remove(0);\n            }\n            storage.setValue(id, { value: null, items: [] });\n          },\n          insert(event) {\n            const { index, displayValue, exportValue } = event.detail.insert;\n            const optionElement = document.createElement(\"option\");\n            optionElement.textContent = displayValue;\n            optionElement.value = exportValue;\n            selectElement.insertBefore(\n              optionElement,\n              selectElement.children[index]\n            );\n            storage.setValue(id, {\n              value: getValue(event, /* isExport */ true),\n              items: getItems(event),\n            });\n          },\n          items(event) {\n            const { items } = event.detail;\n            while (selectElement.length !== 0) {\n              selectElement.remove(0);\n            }\n            for (const item of items) {\n              const { displayValue, exportValue } = item;\n              const optionElement = document.createElement(\"option\");\n              optionElement.textContent = displayValue;\n              optionElement.value = exportValue;\n              selectElement.appendChild(optionElement);\n            }\n            if (selectElement.options.length > 0) {\n              selectElement.options[0].selected = true;\n            }\n            storage.setValue(id, {\n              value: getValue(event, /* isExport */ true),\n              items: getItems(event),\n            });\n          },\n          indices(event) {\n            const indices = new Set(event.detail.indices);\n            for (const option of event.target.options) {\n              option.selected = indices.has(option.index);\n            }\n            storage.setValue(id, {\n              value: getValue(event, /* isExport */ true),\n            });\n          },\n          editable(event) {\n            event.target.disabled = !event.detail.editable;\n          },\n        };\n        this._dispatchEventFromSandbox(actions, jsEvent);\n      });\n\n      selectElement.addEventListener(\"input\", event => {\n        const exportValue = getValue(event, /* isExport */ true);\n        const value = getValue(event, /* isExport */ false);\n        storage.setValue(id, { value: exportValue });\n\n        this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\n          source: this,\n          detail: {\n            id,\n            name: \"Keystroke\",\n            value,\n            changeEx: exportValue,\n            willCommit: true,\n            commitKey: 1,\n            keyDown: false,\n          },\n        });\n      });\n\n      this._setEventListeners(\n        selectElement,\n        [\n          [\"focus\", \"Focus\"],\n          [\"blur\", \"Blur\"],\n          [\"mousedown\", \"Mouse Down\"],\n          [\"mouseenter\", \"Mouse Enter\"],\n          [\"mouseleave\", \"Mouse Exit\"],\n          [\"mouseup\", \"Mouse Up\"],\n          [\"input\", \"Action\"],\n        ],\n        event => event.target.checked\n      );\n    } else {\n      selectElement.addEventListener(\"input\", function (event) {\n        storage.setValue(id, { value: getValue(event) });\n      });\n    }\n\n    this._setBackgroundColor(selectElement);\n\n    this.container.appendChild(selectElement);\n    return this.container;\n  }\n}\n\nclass PopupAnnotationElement extends AnnotationElement {\n  constructor(parameters) {\n    const isRenderable = !!(\n      parameters.data.titleObj?.str ||\n      parameters.data.contentsObj?.str ||\n      parameters.data.richText?.str\n    );\n    super(parameters, { isRenderable });\n  }\n\n  render() {\n    // Do not render popup annotations for parent elements with these types as\n    // they create the popups themselves (because of custom trigger divs).\n    const IGNORE_TYPES = [\n      \"Line\",\n      \"Square\",\n      \"Circle\",\n      \"PolyLine\",\n      \"Polygon\",\n      \"Ink\",\n    ];\n\n    this.container.className = \"popupAnnotation\";\n\n    if (IGNORE_TYPES.includes(this.data.parentType)) {\n      return this.container;\n    }\n\n    const selector = `[data-annotation-id=\"${this.data.parentId}\"]`;\n    const parentElements = this.layer.querySelectorAll(selector);\n    if (parentElements.length === 0) {\n      return this.container;\n    }\n\n    const popup = new PopupElement({\n      container: this.container,\n      trigger: Array.from(parentElements),\n      color: this.data.color,\n      titleObj: this.data.titleObj,\n      modificationDate: this.data.modificationDate,\n      contentsObj: this.data.contentsObj,\n      richText: this.data.richText,\n    });\n\n    // Position the popup next to the parent annotation's container.\n    // PDF viewers ignore a popup annotation's rectangle.\n    const page = this.page;\n    const rect = Util.normalizeRect([\n      this.data.parentRect[0],\n      page.view[3] - this.data.parentRect[1] + page.view[1],\n      this.data.parentRect[2],\n      page.view[3] - this.data.parentRect[3] + page.view[1],\n    ]);\n    const popupLeft =\n      rect[0] + this.data.parentRect[2] - this.data.parentRect[0];\n    const popupTop = rect[1];\n\n    this.container.style.transformOrigin = `${-popupLeft}px ${-popupTop}px`;\n    this.container.style.left = `${popupLeft}px`;\n    this.container.style.top = `${popupTop}px`;\n\n    this.container.appendChild(popup.render());\n    return this.container;\n  }\n}\n\nclass PopupElement {\n  constructor(parameters) {\n    this.container = parameters.container;\n    this.trigger = parameters.trigger;\n    this.color = parameters.color;\n    this.titleObj = parameters.titleObj;\n    this.modificationDate = parameters.modificationDate;\n    this.contentsObj = parameters.contentsObj;\n    this.richText = parameters.richText;\n    this.hideWrapper = parameters.hideWrapper || false;\n\n    this.pinned = false;\n  }\n\n  render() {\n    const BACKGROUND_ENLIGHT = 0.7;\n\n    const wrapper = document.createElement(\"div\");\n    wrapper.className = \"popupWrapper\";\n\n    // For Popup annotations we hide the entire section because it contains\n    // only the popup. However, for Text annotations without a separate Popup\n    // annotation, we cannot hide the entire container as the image would\n    // disappear too. In that special case, hiding the wrapper suffices.\n    this.hideElement = this.hideWrapper ? wrapper : this.container;\n    this.hideElement.hidden = true;\n\n    const popup = document.createElement(\"div\");\n    popup.className = \"popup\";\n\n    const color = this.color;\n    if (color) {\n      // Enlighten the color.\n      const r = BACKGROUND_ENLIGHT * (255 - color[0]) + color[0];\n      const g = BACKGROUND_ENLIGHT * (255 - color[1]) + color[1];\n      const b = BACKGROUND_ENLIGHT * (255 - color[2]) + color[2];\n      popup.style.backgroundColor = Util.makeHexColor(r | 0, g | 0, b | 0);\n    }\n\n    const title = document.createElement(\"h1\");\n    title.dir = this.titleObj.dir;\n    title.textContent = this.titleObj.str;\n    popup.appendChild(title);\n\n    // The modification date is shown in the popup instead of the creation\n    // date if it is available and can be parsed correctly, which is\n    // consistent with other viewers such as Adobe Acrobat.\n    const dateObject = PDFDateString.toDateObject(this.modificationDate);\n    if (dateObject) {\n      const modificationDate = document.createElement(\"span\");\n      modificationDate.className = \"popupDate\";\n      modificationDate.textContent = \"{{date}}, {{time}}\";\n      modificationDate.dataset.l10nId = \"annotation_date_string\";\n      modificationDate.dataset.l10nArgs = JSON.stringify({\n        date: dateObject.toLocaleDateString(),\n        time: dateObject.toLocaleTimeString(),\n      });\n      popup.appendChild(modificationDate);\n    }\n\n    if (\n      this.richText?.str &&\n      (!this.contentsObj?.str || this.contentsObj.str === this.richText.str)\n    ) {\n      XfaLayer.render({\n        xfaHtml: this.richText.html,\n        intent: \"richText\",\n        div: popup,\n      });\n      popup.lastChild.className = \"richText popupContent\";\n    } else {\n      const contents = this._formatContents(this.contentsObj);\n      popup.appendChild(contents);\n    }\n\n    if (!Array.isArray(this.trigger)) {\n      this.trigger = [this.trigger];\n    }\n\n    // Attach the event listeners to the trigger element.\n    for (const element of this.trigger) {\n      element.addEventListener(\"click\", this._toggle.bind(this));\n      element.addEventListener(\"mouseover\", this._show.bind(this, false));\n      element.addEventListener(\"mouseout\", this._hide.bind(this, false));\n    }\n    popup.addEventListener(\"click\", this._hide.bind(this, true));\n\n    wrapper.appendChild(popup);\n    return wrapper;\n  }\n\n  /**\n   * Format the contents of the popup by adding newlines where necessary.\n   *\n   * @private\n   * @param {Object<string, string>} contentsObj\n   * @memberof PopupElement\n   * @returns {HTMLParagraphElement}\n   */\n  _formatContents({ str, dir }) {\n    const p = document.createElement(\"p\");\n    p.className = \"popupContent\";\n    p.dir = dir;\n    const lines = str.split(/(?:\\r\\n?|\\n)/);\n    for (let i = 0, ii = lines.length; i < ii; ++i) {\n      const line = lines[i];\n      p.appendChild(document.createTextNode(line));\n      if (i < ii - 1) {\n        p.appendChild(document.createElement(\"br\"));\n      }\n    }\n    return p;\n  }\n\n  /**\n   * Toggle the visibility of the popup.\n   *\n   * @private\n   * @memberof PopupElement\n   */\n  _toggle() {\n    if (this.pinned) {\n      this._hide(true);\n    } else {\n      this._show(true);\n    }\n  }\n\n  /**\n   * Show the popup.\n   *\n   * @private\n   * @param {boolean} pin\n   * @memberof PopupElement\n   */\n  _show(pin = false) {\n    if (pin) {\n      this.pinned = true;\n    }\n    if (this.hideElement.hidden) {\n      this.hideElement.hidden = false;\n      this.container.style.zIndex += 1;\n    }\n  }\n\n  /**\n   * Hide the popup.\n   *\n   * @private\n   * @param {boolean} unpin\n   * @memberof PopupElement\n   */\n  _hide(unpin = true) {\n    if (unpin) {\n      this.pinned = false;\n    }\n    if (!this.hideElement.hidden && !this.pinned) {\n      this.hideElement.hidden = true;\n      this.container.style.zIndex -= 1;\n    }\n  }\n}\n\nclass FreeTextAnnotationElement extends AnnotationElement {\n  constructor(parameters) {\n    const isRenderable = !!(\n      parameters.data.hasPopup ||\n      parameters.data.titleObj?.str ||\n      parameters.data.contentsObj?.str ||\n      parameters.data.richText?.str\n    );\n    super(parameters, { isRenderable, ignoreBorder: true });\n  }\n\n  render() {\n    this.container.className = \"freeTextAnnotation\";\n\n    if (!this.data.hasPopup) {\n      this._createPopup(null, this.data);\n    }\n    return this.container;\n  }\n}\n\nclass LineAnnotationElement extends AnnotationElement {\n  constructor(parameters) {\n    const isRenderable = !!(\n      parameters.data.hasPopup ||\n      parameters.data.titleObj?.str ||\n      parameters.data.contentsObj?.str ||\n      parameters.data.richText?.str\n    );\n    super(parameters, { isRenderable, ignoreBorder: true });\n  }\n\n  render() {\n    this.container.className = \"lineAnnotation\";\n\n    // Create an invisible line with the same starting and ending coordinates\n    // that acts as the trigger for the popup. Only the line itself should\n    // trigger the popup, not the entire container.\n    const data = this.data;\n    const width = data.rect[2] - data.rect[0];\n    const height = data.rect[3] - data.rect[1];\n    const svg = this.svgFactory.create(width, height);\n\n    // PDF coordinates are calculated from a bottom left origin, so transform\n    // the line coordinates to a top left origin for the SVG element.\n    const line = this.svgFactory.createElement(\"svg:line\");\n    line.setAttribute(\"x1\", data.rect[2] - data.lineCoordinates[0]);\n    line.setAttribute(\"y1\", data.rect[3] - data.lineCoordinates[1]);\n    line.setAttribute(\"x2\", data.rect[2] - data.lineCoordinates[2]);\n    line.setAttribute(\"y2\", data.rect[3] - data.lineCoordinates[3]);\n    // Ensure that the 'stroke-width' is always non-zero, since otherwise it\n    // won't be possible to open/close the popup (note e.g. issue 11122).\n    line.setAttribute(\"stroke-width\", data.borderStyle.width || 1);\n    line.setAttribute(\"stroke\", \"transparent\");\n    line.setAttribute(\"fill\", \"transparent\");\n\n    svg.appendChild(line);\n    this.container.append(svg);\n\n    // Create the popup ourselves so that we can bind it to the line instead\n    // of to the entire container (which is the default).\n    this._createPopup(line, data);\n\n    return this.container;\n  }\n}\n\nclass SquareAnnotationElement extends AnnotationElement {\n  constructor(parameters) {\n    const isRenderable = !!(\n      parameters.data.hasPopup ||\n      parameters.data.titleObj?.str ||\n      parameters.data.contentsObj?.str ||\n      parameters.data.richText?.str\n    );\n    super(parameters, { isRenderable, ignoreBorder: true });\n  }\n\n  render() {\n    this.container.className = \"squareAnnotation\";\n\n    // Create an invisible square with the same rectangle that acts as the\n    // trigger for the popup. Only the square itself should trigger the\n    // popup, not the entire container.\n    const data = this.data;\n    const width = data.rect[2] - data.rect[0];\n    const height = data.rect[3] - data.rect[1];\n    const svg = this.svgFactory.create(width, height);\n\n    // The browser draws half of the borders inside the square and half of\n    // the borders outside the square by default. This behavior cannot be\n    // changed programmatically, so correct for that here.\n    const borderWidth = data.borderStyle.width;\n    const square = this.svgFactory.createElement(\"svg:rect\");\n    square.setAttribute(\"x\", borderWidth / 2);\n    square.setAttribute(\"y\", borderWidth / 2);\n    square.setAttribute(\"width\", width - borderWidth);\n    square.setAttribute(\"height\", height - borderWidth);\n    // Ensure that the 'stroke-width' is always non-zero, since otherwise it\n    // won't be possible to open/close the popup (note e.g. issue 11122).\n    square.setAttribute(\"stroke-width\", borderWidth || 1);\n    square.setAttribute(\"stroke\", \"transparent\");\n    square.setAttribute(\"fill\", \"transparent\");\n\n    svg.appendChild(square);\n    this.container.append(svg);\n\n    // Create the popup ourselves so that we can bind it to the square instead\n    // of to the entire container (which is the default).\n    this._createPopup(square, data);\n\n    return this.container;\n  }\n}\n\nclass CircleAnnotationElement extends AnnotationElement {\n  constructor(parameters) {\n    const isRenderable = !!(\n      parameters.data.hasPopup ||\n      parameters.data.titleObj?.str ||\n      parameters.data.contentsObj?.str ||\n      parameters.data.richText?.str\n    );\n    super(parameters, { isRenderable, ignoreBorder: true });\n  }\n\n  render() {\n    this.container.className = \"circleAnnotation\";\n\n    // Create an invisible circle with the same ellipse that acts as the\n    // trigger for the popup. Only the circle itself should trigger the\n    // popup, not the entire container.\n    const data = this.data;\n    const width = data.rect[2] - data.rect[0];\n    const height = data.rect[3] - data.rect[1];\n    const svg = this.svgFactory.create(width, height);\n\n    // The browser draws half of the borders inside the circle and half of\n    // the borders outside the circle by default. This behavior cannot be\n    // changed programmatically, so correct for that here.\n    const borderWidth = data.borderStyle.width;\n    const circle = this.svgFactory.createElement(\"svg:ellipse\");\n    circle.setAttribute(\"cx\", width / 2);\n    circle.setAttribute(\"cy\", height / 2);\n    circle.setAttribute(\"rx\", width / 2 - borderWidth / 2);\n    circle.setAttribute(\"ry\", height / 2 - borderWidth / 2);\n    // Ensure that the 'stroke-width' is always non-zero, since otherwise it\n    // won't be possible to open/close the popup (note e.g. issue 11122).\n    circle.setAttribute(\"stroke-width\", borderWidth || 1);\n    circle.setAttribute(\"stroke\", \"transparent\");\n    circle.setAttribute(\"fill\", \"transparent\");\n\n    svg.appendChild(circle);\n    this.container.append(svg);\n\n    // Create the popup ourselves so that we can bind it to the circle instead\n    // of to the entire container (which is the default).\n    this._createPopup(circle, data);\n\n    return this.container;\n  }\n}\n\nclass PolylineAnnotationElement extends AnnotationElement {\n  constructor(parameters) {\n    const isRenderable = !!(\n      parameters.data.hasPopup ||\n      parameters.data.titleObj?.str ||\n      parameters.data.contentsObj?.str ||\n      parameters.data.richText?.str\n    );\n    super(parameters, { isRenderable, ignoreBorder: true });\n\n    this.containerClassName = \"polylineAnnotation\";\n    this.svgElementName = \"svg:polyline\";\n  }\n\n  render() {\n    this.container.className = this.containerClassName;\n\n    // Create an invisible polyline with the same points that acts as the\n    // trigger for the popup. Only the polyline itself should trigger the\n    // popup, not the entire container.\n    const data = this.data;\n    const width = data.rect[2] - data.rect[0];\n    const height = data.rect[3] - data.rect[1];\n    const svg = this.svgFactory.create(width, height);\n\n    // Convert the vertices array to a single points string that the SVG\n    // polyline element expects (\"x1,y1 x2,y2 ...\"). PDF coordinates are\n    // calculated from a bottom left origin, so transform the polyline\n    // coordinates to a top left origin for the SVG element.\n    let points = [];\n    for (const coordinate of data.vertices) {\n      const x = coordinate.x - data.rect[0];\n      const y = data.rect[3] - coordinate.y;\n      points.push(x + \",\" + y);\n    }\n    points = points.join(\" \");\n\n    const polyline = this.svgFactory.createElement(this.svgElementName);\n    polyline.setAttribute(\"points\", points);\n    // Ensure that the 'stroke-width' is always non-zero, since otherwise it\n    // won't be possible to open/close the popup (note e.g. issue 11122).\n    polyline.setAttribute(\"stroke-width\", data.borderStyle.width || 1);\n    polyline.setAttribute(\"stroke\", \"transparent\");\n    polyline.setAttribute(\"fill\", \"transparent\");\n\n    svg.appendChild(polyline);\n    this.container.append(svg);\n\n    // Create the popup ourselves so that we can bind it to the polyline\n    // instead of to the entire container (which is the default).\n    this._createPopup(polyline, data);\n\n    return this.container;\n  }\n}\n\nclass PolygonAnnotationElement extends PolylineAnnotationElement {\n  constructor(parameters) {\n    // Polygons are specific forms of polylines, so reuse their logic.\n    super(parameters);\n\n    this.containerClassName = \"polygonAnnotation\";\n    this.svgElementName = \"svg:polygon\";\n  }\n}\n\nclass CaretAnnotationElement extends AnnotationElement {\n  constructor(parameters) {\n    const isRenderable = !!(\n      parameters.data.hasPopup ||\n      parameters.data.titleObj?.str ||\n      parameters.data.contentsObj?.str ||\n      parameters.data.richText?.str\n    );\n    super(parameters, { isRenderable, ignoreBorder: true });\n  }\n\n  render() {\n    this.container.className = \"caretAnnotation\";\n\n    if (!this.data.hasPopup) {\n      this._createPopup(null, this.data);\n    }\n    return this.container;\n  }\n}\n\nclass InkAnnotationElement extends AnnotationElement {\n  constructor(parameters) {\n    const isRenderable = !!(\n      parameters.data.hasPopup ||\n      parameters.data.titleObj?.str ||\n      parameters.data.contentsObj?.str ||\n      parameters.data.richText?.str\n    );\n    super(parameters, { isRenderable, ignoreBorder: true });\n\n    this.containerClassName = \"inkAnnotation\";\n\n    // Use the polyline SVG element since it allows us to use coordinates\n    // directly and to draw both straight lines and curves.\n    this.svgElementName = \"svg:polyline\";\n  }\n\n  render() {\n    this.container.className = this.containerClassName;\n\n    // Create an invisible polyline with the same points that acts as the\n    // trigger for the popup.\n    const data = this.data;\n    const width = data.rect[2] - data.rect[0];\n    const height = data.rect[3] - data.rect[1];\n    const svg = this.svgFactory.create(width, height);\n\n    for (const inkList of data.inkLists) {\n      // Convert the ink list to a single points string that the SVG\n      // polyline element expects (\"x1,y1 x2,y2 ...\"). PDF coordinates are\n      // calculated from a bottom left origin, so transform the polyline\n      // coordinates to a top left origin for the SVG element.\n      let points = [];\n      for (const coordinate of inkList) {\n        const x = coordinate.x - data.rect[0];\n        const y = data.rect[3] - coordinate.y;\n        points.push(`${x},${y}`);\n      }\n      points = points.join(\" \");\n\n      const polyline = this.svgFactory.createElement(this.svgElementName);\n      polyline.setAttribute(\"points\", points);\n      // Ensure that the 'stroke-width' is always non-zero, since otherwise it\n      // won't be possible to open/close the popup (note e.g. issue 11122).\n      polyline.setAttribute(\"stroke-width\", data.borderStyle.width || 1);\n      polyline.setAttribute(\"stroke\", \"transparent\");\n      polyline.setAttribute(\"fill\", \"transparent\");\n\n      // Create the popup ourselves so that we can bind it to the polyline\n      // instead of to the entire container (which is the default).\n      this._createPopup(polyline, data);\n\n      svg.appendChild(polyline);\n    }\n\n    this.container.append(svg);\n    return this.container;\n  }\n}\n\nclass HighlightAnnotationElement extends AnnotationElement {\n  constructor(parameters) {\n    const isRenderable = !!(\n      parameters.data.hasPopup ||\n      parameters.data.titleObj?.str ||\n      parameters.data.contentsObj?.str ||\n      parameters.data.richText?.str\n    );\n    super(parameters, {\n      isRenderable,\n      ignoreBorder: true,\n      createQuadrilaterals: true,\n    });\n  }\n\n  render() {\n    if (!this.data.hasPopup) {\n      this._createPopup(null, this.data);\n    }\n\n    if (this.quadrilaterals) {\n      return this._renderQuadrilaterals(\"highlightAnnotation\");\n    }\n\n    this.container.className = \"highlightAnnotation\";\n    return this.container;\n  }\n}\n\nclass UnderlineAnnotationElement extends AnnotationElement {\n  constructor(parameters) {\n    const isRenderable = !!(\n      parameters.data.hasPopup ||\n      parameters.data.titleObj?.str ||\n      parameters.data.contentsObj?.str ||\n      parameters.data.richText?.str\n    );\n    super(parameters, {\n      isRenderable,\n      ignoreBorder: true,\n      createQuadrilaterals: true,\n    });\n  }\n\n  render() {\n    if (!this.data.hasPopup) {\n      this._createPopup(null, this.data);\n    }\n\n    if (this.quadrilaterals) {\n      return this._renderQuadrilaterals(\"underlineAnnotation\");\n    }\n\n    this.container.className = \"underlineAnnotation\";\n    return this.container;\n  }\n}\n\nclass SquigglyAnnotationElement extends AnnotationElement {\n  constructor(parameters) {\n    const isRenderable = !!(\n      parameters.data.hasPopup ||\n      parameters.data.titleObj?.str ||\n      parameters.data.contentsObj?.str ||\n      parameters.data.richText?.str\n    );\n    super(parameters, {\n      isRenderable,\n      ignoreBorder: true,\n      createQuadrilaterals: true,\n    });\n  }\n\n  render() {\n    if (!this.data.hasPopup) {\n      this._createPopup(null, this.data);\n    }\n\n    if (this.quadrilaterals) {\n      return this._renderQuadrilaterals(\"squigglyAnnotation\");\n    }\n\n    this.container.className = \"squigglyAnnotation\";\n    return this.container;\n  }\n}\n\nclass StrikeOutAnnotationElement extends AnnotationElement {\n  constructor(parameters) {\n    const isRenderable = !!(\n      parameters.data.hasPopup ||\n      parameters.data.titleObj?.str ||\n      parameters.data.contentsObj?.str ||\n      parameters.data.richText?.str\n    );\n    super(parameters, {\n      isRenderable,\n      ignoreBorder: true,\n      createQuadrilaterals: true,\n    });\n  }\n\n  render() {\n    if (!this.data.hasPopup) {\n      this._createPopup(null, this.data);\n    }\n\n    if (this.quadrilaterals) {\n      return this._renderQuadrilaterals(\"strikeoutAnnotation\");\n    }\n\n    this.container.className = \"strikeoutAnnotation\";\n    return this.container;\n  }\n}\n\nclass StampAnnotationElement extends AnnotationElement {\n  constructor(parameters) {\n    const isRenderable = !!(\n      parameters.data.hasPopup ||\n      parameters.data.titleObj?.str ||\n      parameters.data.contentsObj?.str ||\n      parameters.data.richText?.str\n    );\n    super(parameters, { isRenderable, ignoreBorder: true });\n  }\n\n  render() {\n    this.container.className = \"stampAnnotation\";\n\n    if (!this.data.hasPopup) {\n      this._createPopup(null, this.data);\n    }\n    return this.container;\n  }\n}\n\nclass FileAttachmentAnnotationElement extends AnnotationElement {\n  constructor(parameters) {\n    super(parameters, { isRenderable: true });\n\n    const { filename, content } = this.data.file;\n    this.filename = getFilenameFromUrl(filename);\n    this.content = content;\n\n    this.linkService.eventBus?.dispatch(\"fileattachmentannotation\", {\n      source: this,\n      id: stringToPDFString(filename),\n      filename,\n      content,\n    });\n  }\n\n  render() {\n    this.container.className = \"fileAttachmentAnnotation\";\n\n    const trigger = document.createElement(\"div\");\n    trigger.style.height = this.container.style.height;\n    trigger.style.width = this.container.style.width;\n    trigger.addEventListener(\"dblclick\", this._download.bind(this));\n\n    if (\n      !this.data.hasPopup &&\n      (this.data.titleObj?.str ||\n        this.data.contentsObj?.str ||\n        this.data.richText)\n    ) {\n      this._createPopup(trigger, this.data);\n    }\n\n    this.container.appendChild(trigger);\n    return this.container;\n  }\n\n  /**\n   * Download the file attachment associated with this annotation.\n   *\n   * @private\n   * @memberof FileAttachmentAnnotationElement\n   */\n  _download() {\n    this.downloadManager?.openOrDownloadData(\n      this.container,\n      this.content,\n      this.filename\n    );\n  }\n}\n\n/**\n * @typedef {Object} AnnotationLayerParameters\n * @property {PageViewport} viewport\n * @property {HTMLDivElement} div\n * @property {Array} annotations\n * @property {PDFPageProxy} page\n * @property {IPDFLinkService} linkService\n * @property {IDownloadManager} downloadManager\n * @property {string} [imageResourcesPath] - Path for image resources, mainly\n *   for annotation icons. Include trailing slash.\n * @property {boolean} renderForms\n * @property {boolean} [enableScripting] - Enable embedded script execution.\n * @property {boolean} [hasJSActions] - Some fields have JS actions.\n *   The default value is `false`.\n * @property {Map<string, HTMLCanvasElement>} [annotationCanvasMap]\n */\n\nclass AnnotationLayer {\n  /**\n   * Render a new annotation layer with all annotation elements.\n   *\n   * @public\n   * @param {AnnotationLayerParameters} parameters\n   * @memberof AnnotationLayer\n   */\n  static render(parameters) {\n    const sortedAnnotations = [],\n      popupAnnotations = [];\n    // Ensure that Popup annotations are handled last, since they're dependant\n    // upon the parent annotation having already been rendered (please refer to\n    // the `PopupAnnotationElement.render` method); fixes issue 11362.\n    for (const data of parameters.annotations) {\n      if (!data) {\n        continue;\n      }\n      if (data.annotationType === AnnotationType.POPUP) {\n        popupAnnotations.push(data);\n        continue;\n      }\n      sortedAnnotations.push(data);\n    }\n    if (popupAnnotations.length) {\n      sortedAnnotations.push(...popupAnnotations);\n    }\n\n    const div = parameters.div;\n\n    for (const data of sortedAnnotations) {\n      const element = AnnotationElementFactory.create({\n        data,\n        layer: div,\n        page: parameters.page,\n        viewport: parameters.viewport,\n        linkService: parameters.linkService,\n        downloadManager: parameters.downloadManager,\n        imageResourcesPath: parameters.imageResourcesPath || \"\",\n        renderForms: parameters.renderForms !== false,\n        svgFactory: new DOMSVGFactory(),\n        annotationStorage:\n          parameters.annotationStorage || new AnnotationStorage(),\n        enableScripting: parameters.enableScripting,\n        hasJSActions: parameters.hasJSActions,\n        fieldObjects: parameters.fieldObjects,\n        mouseState: parameters.mouseState || { isDown: false },\n      });\n      if (element.isRenderable) {\n        const rendered = element.render();\n        if (data.hidden) {\n          rendered.style.visibility = \"hidden\";\n        }\n        if (Array.isArray(rendered)) {\n          for (const renderedElement of rendered) {\n            div.appendChild(renderedElement);\n          }\n        } else {\n          if (element instanceof PopupAnnotationElement) {\n            // Popup annotation elements should not be on top of other\n            // annotation elements to prevent interfering with mouse events.\n            div.prepend(rendered);\n          } else {\n            div.appendChild(rendered);\n          }\n        }\n      }\n    }\n\n    this.#setAnnotationCanvasMap(div, parameters.annotationCanvasMap);\n  }\n\n  /**\n   * Update the annotation elements on existing annotation layer.\n   *\n   * @public\n   * @param {AnnotationLayerParameters} parameters\n   * @memberof AnnotationLayer\n   */\n  static update(parameters) {\n    const { page, viewport, annotations, annotationCanvasMap, div } =\n      parameters;\n    const transform = viewport.transform;\n    const matrix = `matrix(${transform.join(\",\")})`;\n\n    let scale, ownMatrix;\n    for (const data of annotations) {\n      const elements = div.querySelectorAll(\n        `[data-annotation-id=\"${data.id}\"]`\n      );\n      if (elements) {\n        for (const element of elements) {\n          if (data.hasOwnCanvas) {\n            const rect = Util.normalizeRect([\n              data.rect[0],\n              page.view[3] - data.rect[1] + page.view[1],\n              data.rect[2],\n              page.view[3] - data.rect[3] + page.view[1],\n            ]);\n\n            if (!ownMatrix) {\n              // When an annotation has its own canvas, then\n              // the scale has been already applied to the canvas,\n              // so we musn't scale it twice.\n              scale = Math.abs(transform[0] || transform[1]);\n              const ownTransform = transform.slice();\n              for (let i = 0; i < 4; i++) {\n                ownTransform[i] = Math.sign(ownTransform[i]);\n              }\n              ownMatrix = `matrix(${ownTransform.join(\",\")})`;\n            }\n\n            const left = rect[0] * scale;\n            const top = rect[1] * scale;\n            element.style.left = `${left}px`;\n            element.style.top = `${top}px`;\n            element.style.transformOrigin = `${-left}px ${-top}px`;\n            element.style.transform = ownMatrix;\n          } else {\n            element.style.transform = matrix;\n          }\n        }\n      }\n    }\n\n    this.#setAnnotationCanvasMap(div, annotationCanvasMap);\n    div.hidden = false;\n  }\n\n  static #setAnnotationCanvasMap(div, annotationCanvasMap) {\n    if (!annotationCanvasMap) {\n      return;\n    }\n    for (const [id, canvas] of annotationCanvasMap) {\n      const element = div.querySelector(`[data-annotation-id=\"${id}\"]`);\n      if (!element) {\n        continue;\n      }\n\n      const { firstChild } = element;\n      if (firstChild.nodeName === \"CANVAS\") {\n        element.replaceChild(canvas, firstChild);\n      } else {\n        element.insertBefore(canvas, firstChild);\n      }\n    }\n    annotationCanvasMap.clear();\n  }\n}\n\nexport { AnnotationLayer };\n","/* Copyright 2020 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * PLEASE NOTE: This file is currently imported in both the `../display/` and\n *              `../scripting_api/` folders, hence be EXTREMELY careful about\n *              introducing any dependencies here since that can lead to an\n *              unexpected/unnecessary size increase of the *built* files.\n */\n\nfunction makeColorComp(n) {\n  return Math.floor(Math.max(0, Math.min(1, n)) * 255)\n    .toString(16)\n    .padStart(2, \"0\");\n}\n\n// PDF specifications section 10.3\nclass ColorConverters {\n  static CMYK_G([c, y, m, k]) {\n    return [\"G\", 1 - Math.min(1, 0.3 * c + 0.59 * m + 0.11 * y + k)];\n  }\n\n  static G_CMYK([g]) {\n    return [\"CMYK\", 0, 0, 0, 1 - g];\n  }\n\n  static G_RGB([g]) {\n    return [\"RGB\", g, g, g];\n  }\n\n  static G_HTML([g]) {\n    const G = makeColorComp(g);\n    return `#${G}${G}${G}`;\n  }\n\n  static RGB_G([r, g, b]) {\n    return [\"G\", 0.3 * r + 0.59 * g + 0.11 * b];\n  }\n\n  static RGB_HTML([r, g, b]) {\n    const R = makeColorComp(r);\n    const G = makeColorComp(g);\n    const B = makeColorComp(b);\n    return `#${R}${G}${B}`;\n  }\n\n  static T_HTML() {\n    return \"#00000000\";\n  }\n\n  static CMYK_RGB([c, y, m, k]) {\n    return [\n      \"RGB\",\n      1 - Math.min(1, c + k),\n      1 - Math.min(1, m + k),\n      1 - Math.min(1, y + k),\n    ];\n  }\n\n  static CMYK_HTML(components) {\n    return this.RGB_HTML(this.CMYK_RGB(components));\n  }\n\n  static RGB_CMYK([r, g, b]) {\n    const c = 1 - r;\n    const m = 1 - g;\n    const y = 1 - b;\n    const k = Math.min(c, m, y);\n    return [\"CMYK\", c, m, y, k];\n  }\n}\n\nexport { ColorConverters };\n","/* Copyright 2021 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** @typedef {import(\"./display_utils\").PageViewport} PageViewport */\n/** @typedef {import(\"../../web/interfaces\").IPDFLinkService} IPDFLinkService */\n\nimport { warn } from \"../shared/util.js\";\nimport { XfaText } from \"./xfa_text.js\";\n\n/**\n * @typedef {Object} XfaLayerParameters\n * @property {PageViewport} viewport\n * @property {HTMLDivElement} div\n * @property {Object} xfaHtml\n * @property {AnnotationStorage} [annotationStorage]\n * @property {IPDFLinkService} linkService\n * @property {string} [intent] - (default value is 'display').\n */\n\nclass XfaLayer {\n  static setupStorage(html, id, element, storage, intent) {\n    const storedData = storage.getValue(id, { value: null });\n    switch (element.name) {\n      case \"textarea\":\n        if (storedData.value !== null) {\n          html.textContent = storedData.value;\n        }\n        if (intent === \"print\") {\n          break;\n        }\n        html.addEventListener(\"input\", event => {\n          storage.setValue(id, { value: event.target.value });\n        });\n        break;\n      case \"input\":\n        if (\n          element.attributes.type === \"radio\" ||\n          element.attributes.type === \"checkbox\"\n        ) {\n          if (storedData.value === element.attributes.xfaOn) {\n            html.setAttribute(\"checked\", true);\n          } else if (storedData.value === element.attributes.xfaOff) {\n            // The checked attribute may have been set when opening the file,\n            // unset through the UI and we're here because of printing.\n            html.removeAttribute(\"checked\");\n          }\n          if (intent === \"print\") {\n            break;\n          }\n          html.addEventListener(\"change\", event => {\n            storage.setValue(id, {\n              value: event.target.checked\n                ? event.target.getAttribute(\"xfaOn\")\n                : event.target.getAttribute(\"xfaOff\"),\n            });\n          });\n        } else {\n          if (storedData.value !== null) {\n            html.setAttribute(\"value\", storedData.value);\n          }\n          if (intent === \"print\") {\n            break;\n          }\n          html.addEventListener(\"input\", event => {\n            storage.setValue(id, { value: event.target.value });\n          });\n        }\n        break;\n      case \"select\":\n        if (storedData.value !== null) {\n          for (const option of element.children) {\n            if (option.attributes.value === storedData.value) {\n              option.attributes.selected = true;\n            }\n          }\n        }\n        html.addEventListener(\"input\", event => {\n          const options = event.target.options;\n          const value =\n            options.selectedIndex === -1\n              ? \"\"\n              : options[options.selectedIndex].value;\n          storage.setValue(id, { value });\n        });\n        break;\n    }\n  }\n\n  static setAttributes({ html, element, storage = null, intent, linkService }) {\n    const { attributes } = element;\n    const isHTMLAnchorElement = html instanceof HTMLAnchorElement;\n\n    if (attributes.type === \"radio\") {\n      // Avoid to have a radio group when printing with the same as one\n      // already displayed.\n      attributes.name = `${attributes.name}-${intent}`;\n    }\n    for (const [key, value] of Object.entries(attributes)) {\n      // We don't need to add dataId in the html object but it can\n      // be useful to know its value when writing printing tests:\n      // in this case, don't skip dataId to have its value.\n      if (value === null || value === undefined || key === \"dataId\") {\n        continue;\n      }\n\n      if (key !== \"style\") {\n        if (key === \"textContent\") {\n          html.textContent = value;\n        } else if (key === \"class\") {\n          if (value.length) {\n            html.setAttribute(key, value.join(\" \"));\n          }\n        } else {\n          if (isHTMLAnchorElement && (key === \"href\" || key === \"newWindow\")) {\n            continue; // Handled below.\n          }\n          html.setAttribute(key, value);\n        }\n      } else {\n        Object.assign(html.style, value);\n      }\n    }\n\n    if (isHTMLAnchorElement) {\n      if (\n        (typeof PDFJSDev === \"undefined\" || PDFJSDev.test(\"GENERIC\")) &&\n        !linkService.addLinkAttributes\n      ) {\n        warn(\n          \"XfaLayer.setAttribute - missing `addLinkAttributes`-method on the `linkService`-instance.\"\n        );\n      }\n      linkService.addLinkAttributes?.(\n        html,\n        attributes.href,\n        attributes.newWindow\n      );\n    }\n\n    // Set the value after the others to be sure overwrite\n    // any other values.\n    if (storage && attributes.dataId) {\n      this.setupStorage(html, attributes.dataId, element, storage);\n    }\n  }\n\n  /**\n   * Render the XFA layer.\n   *\n   * @param {XfaLayerParameters} parameters\n   */\n  static render(parameters) {\n    const storage = parameters.annotationStorage;\n    const linkService = parameters.linkService;\n    const root = parameters.xfaHtml;\n    const intent = parameters.intent || \"display\";\n    const rootHtml = document.createElement(root.name);\n    if (root.attributes) {\n      this.setAttributes({\n        html: rootHtml,\n        element: root,\n        intent,\n        linkService,\n      });\n    }\n    const stack = [[root, -1, rootHtml]];\n\n    const rootDiv = parameters.div;\n    rootDiv.appendChild(rootHtml);\n\n    if (parameters.viewport) {\n      const transform = `matrix(${parameters.viewport.transform.join(\",\")})`;\n      rootDiv.style.transform = transform;\n    }\n\n    // Set defaults.\n    if (intent !== \"richText\") {\n      rootDiv.setAttribute(\"class\", \"xfaLayer xfaFont\");\n    }\n\n    // Text nodes used for the text highlighter.\n    const textDivs = [];\n\n    while (stack.length > 0) {\n      const [parent, i, html] = stack[stack.length - 1];\n      if (i + 1 === parent.children.length) {\n        stack.pop();\n        continue;\n      }\n\n      const child = parent.children[++stack[stack.length - 1][1]];\n      if (child === null) {\n        continue;\n      }\n\n      const { name } = child;\n      if (name === \"#text\") {\n        const node = document.createTextNode(child.value);\n        textDivs.push(node);\n        html.appendChild(node);\n        continue;\n      }\n\n      let childHtml;\n      if (child?.attributes?.xmlns) {\n        childHtml = document.createElementNS(child.attributes.xmlns, name);\n      } else {\n        childHtml = document.createElement(name);\n      }\n\n      html.appendChild(childHtml);\n      if (child.attributes) {\n        this.setAttributes({\n          html: childHtml,\n          element: child,\n          storage,\n          intent,\n          linkService,\n        });\n      }\n\n      if (child.children && child.children.length > 0) {\n        stack.push([child, -1, childHtml]);\n      } else if (child.value) {\n        const node = document.createTextNode(child.value);\n        if (XfaText.shouldBuildText(name)) {\n          textDivs.push(node);\n        }\n        childHtml.appendChild(node);\n      }\n    }\n\n    /**\n     * TODO: re-enable that stuff once we've JS implementation.\n     * See https://bugzilla.mozilla.org/show_bug.cgi?id=1719465.\n     *\n     * for (const el of rootDiv.querySelectorAll(\n     * \".xfaDisabled input, .xfaDisabled textarea\"\n     * )) {\n     * el.setAttribute(\"disabled\", true);\n     * }\n     * for (const el of rootDiv.querySelectorAll(\n     * \".xfaReadOnly input, .xfaReadOnly textarea\"\n     * )) {\n     * el.setAttribute(\"readOnly\", true);\n     * }\n     */\n\n    for (const el of rootDiv.querySelectorAll(\n      \".xfaNonInteractive input, .xfaNonInteractive textarea\"\n    )) {\n      el.setAttribute(\"readOnly\", true);\n    }\n\n    return {\n      textDivs,\n    };\n  }\n\n  /**\n   * Update the XFA layer.\n   *\n   * @param {XfaLayerParameters} parameters\n   */\n  static update(parameters) {\n    const transform = `matrix(${parameters.viewport.transform.join(\",\")})`;\n    parameters.div.style.transform = transform;\n    parameters.div.hidden = false;\n  }\n}\n\nexport { XfaLayer };\n","/* Copyright 2015 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AbortException,\n  createPromiseCapability,\n  Util,\n} from \"../shared/util.js\";\n\n/**\n * Text layer render parameters.\n *\n * @typedef {Object} TextLayerRenderParameters\n * @property {import(\"./api\").TextContent} [textContent] - Text content to\n *   render (the object is returned by the page's `getTextContent` method).\n * @property {ReadableStream} [textContentStream] - Text content stream to\n *   render (the stream is returned by the page's `streamTextContent` method).\n * @property {HTMLElement} container - HTML element that will contain text runs.\n * @property {import(\"./display_utils\").PageViewport} viewport - The target\n *   viewport to properly layout the text runs.\n * @property {Array<HTMLElement>} [textDivs] - HTML elements that are correspond\n *   to the text items of the textContent input. This is output and shall be\n *   initially be set to empty array.\n * @property {Array<string>} [textContentItemsStr] - Strings that correspond to\n *    the `str` property of the text items of textContent input. This is output\n *   and shall be initially be set to empty array.\n * @property {number} [timeout] - Delay in milliseconds before rendering of the\n *   text runs occurs.\n * @property {boolean} [enhanceTextSelection] - Whether to turn on the text\n *   selection enhancement.\n */\n\nconst MAX_TEXT_DIVS_TO_RENDER = 100000;\nconst DEFAULT_FONT_SIZE = 30;\nconst DEFAULT_FONT_ASCENT = 0.8;\nconst ascentCache = new Map();\nconst AllWhitespaceRegexp = /^\\s+$/g;\n\nfunction getAscent(fontFamily, ctx) {\n  const cachedAscent = ascentCache.get(fontFamily);\n  if (cachedAscent) {\n    return cachedAscent;\n  }\n\n  ctx.save();\n  ctx.font = `${DEFAULT_FONT_SIZE}px ${fontFamily}`;\n  const metrics = ctx.measureText(\"\");\n\n  // Both properties aren't available by default in Firefox.\n  let ascent = metrics.fontBoundingBoxAscent;\n  let descent = Math.abs(metrics.fontBoundingBoxDescent);\n  if (ascent) {\n    ctx.restore();\n    const ratio = ascent / (ascent + descent);\n    ascentCache.set(fontFamily, ratio);\n    return ratio;\n  }\n\n  // Try basic heuristic to guess ascent/descent.\n  // Draw a g with baseline at 0,0 and then get the line\n  // number where a pixel has non-null red component (starting\n  // from bottom).\n  ctx.strokeStyle = \"red\";\n  ctx.clearRect(0, 0, DEFAULT_FONT_SIZE, DEFAULT_FONT_SIZE);\n  ctx.strokeText(\"g\", 0, 0);\n  let pixels = ctx.getImageData(\n    0,\n    0,\n    DEFAULT_FONT_SIZE,\n    DEFAULT_FONT_SIZE\n  ).data;\n  descent = 0;\n  for (let i = pixels.length - 1 - 3; i >= 0; i -= 4) {\n    if (pixels[i] > 0) {\n      descent = Math.ceil(i / 4 / DEFAULT_FONT_SIZE);\n      break;\n    }\n  }\n\n  // Draw an A with baseline at 0,DEFAULT_FONT_SIZE and then get the line\n  // number where a pixel has non-null red component (starting\n  // from top).\n  ctx.clearRect(0, 0, DEFAULT_FONT_SIZE, DEFAULT_FONT_SIZE);\n  ctx.strokeText(\"A\", 0, DEFAULT_FONT_SIZE);\n  pixels = ctx.getImageData(0, 0, DEFAULT_FONT_SIZE, DEFAULT_FONT_SIZE).data;\n  ascent = 0;\n  for (let i = 0, ii = pixels.length; i < ii; i += 4) {\n    if (pixels[i] > 0) {\n      ascent = DEFAULT_FONT_SIZE - Math.floor(i / 4 / DEFAULT_FONT_SIZE);\n      break;\n    }\n  }\n\n  ctx.restore();\n\n  if (ascent) {\n    const ratio = ascent / (ascent + descent);\n    ascentCache.set(fontFamily, ratio);\n    return ratio;\n  }\n\n  ascentCache.set(fontFamily, DEFAULT_FONT_ASCENT);\n  return DEFAULT_FONT_ASCENT;\n}\n\nfunction appendText(task, geom, styles, ctx) {\n  // Initialize all used properties to keep the caches monomorphic.\n  const textDiv = document.createElement(\"span\");\n  const textDivProperties = task._enhanceTextSelection\n    ? {\n        angle: 0,\n        canvasWidth: 0,\n        hasText: geom.str !== \"\",\n        hasEOL: geom.hasEOL,\n        originalTransform: null,\n        paddingBottom: 0,\n        paddingLeft: 0,\n        paddingRight: 0,\n        paddingTop: 0,\n        scale: 1,\n      }\n    : {\n        angle: 0,\n        canvasWidth: 0,\n        hasText: geom.str !== \"\",\n        hasEOL: geom.hasEOL,\n      };\n\n  task._textDivs.push(textDiv);\n\n  const tx = Util.transform(task._viewport.transform, geom.transform);\n  let angle = Math.atan2(tx[1], tx[0]);\n  const style = styles[geom.fontName];\n  if (style.vertical) {\n    angle += Math.PI / 2;\n  }\n  const fontHeight = Math.hypot(tx[2], tx[3]);\n  const fontAscent = fontHeight * getAscent(style.fontFamily, ctx);\n\n  let left, top;\n  if (angle === 0) {\n    left = tx[4];\n    top = tx[5] - fontAscent;\n  } else {\n    left = tx[4] + fontAscent * Math.sin(angle);\n    top = tx[5] - fontAscent * Math.cos(angle);\n  }\n  // Setting the style properties individually, rather than all at once,\n  // should be OK since the `textDiv` isn't appended to the document yet.\n  textDiv.style.left = `${left}px`;\n  textDiv.style.top = `${top}px`;\n  textDiv.style.fontSize = `${fontHeight}px`;\n  textDiv.style.fontFamily = style.fontFamily;\n\n  // Keeps screen readers from pausing on every new text span.\n  textDiv.setAttribute(\"role\", \"presentation\");\n\n  textDiv.textContent = geom.str;\n  // geom.dir may be 'ttb' for vertical texts.\n  textDiv.dir = geom.dir;\n\n  // `fontName` is only used by the FontInspector, and we only use `dataset`\n  // here to make the font name available in the debugger.\n  if (task._fontInspectorEnabled) {\n    textDiv.dataset.fontName = geom.fontName;\n  }\n  if (angle !== 0) {\n    textDivProperties.angle = angle * (180 / Math.PI);\n  }\n  // We don't bother scaling single-char text divs, because it has very\n  // little effect on text highlighting. This makes scrolling on docs with\n  // lots of such divs a lot faster.\n  let shouldScaleText = false;\n  if (\n    geom.str.length > 1 ||\n    (task._enhanceTextSelection && AllWhitespaceRegexp.test(geom.str))\n  ) {\n    shouldScaleText = true;\n  } else if (geom.str !== \" \" && geom.transform[0] !== geom.transform[3]) {\n    const absScaleX = Math.abs(geom.transform[0]),\n      absScaleY = Math.abs(geom.transform[3]);\n    // When the horizontal/vertical scaling differs significantly, also scale\n    // even single-char text to improve highlighting (fixes issue11713.pdf).\n    if (\n      absScaleX !== absScaleY &&\n      Math.max(absScaleX, absScaleY) / Math.min(absScaleX, absScaleY) > 1.5\n    ) {\n      shouldScaleText = true;\n    }\n  }\n  if (shouldScaleText) {\n    if (style.vertical) {\n      textDivProperties.canvasWidth = geom.height * task._viewport.scale;\n    } else {\n      textDivProperties.canvasWidth = geom.width * task._viewport.scale;\n    }\n  }\n  task._textDivProperties.set(textDiv, textDivProperties);\n  if (task._textContentStream) {\n    task._layoutText(textDiv);\n  }\n\n  if (task._enhanceTextSelection && textDivProperties.hasText) {\n    let angleCos = 1,\n      angleSin = 0;\n    if (angle !== 0) {\n      angleCos = Math.cos(angle);\n      angleSin = Math.sin(angle);\n    }\n    const divWidth =\n      (style.vertical ? geom.height : geom.width) * task._viewport.scale;\n    const divHeight = fontHeight;\n\n    let m, b;\n    if (angle !== 0) {\n      m = [angleCos, angleSin, -angleSin, angleCos, left, top];\n      b = Util.getAxialAlignedBoundingBox([0, 0, divWidth, divHeight], m);\n    } else {\n      b = [left, top, left + divWidth, top + divHeight];\n    }\n\n    task._bounds.push({\n      left: b[0],\n      top: b[1],\n      right: b[2],\n      bottom: b[3],\n      div: textDiv,\n      size: [divWidth, divHeight],\n      m,\n    });\n  }\n}\n\nfunction render(task) {\n  if (task._canceled) {\n    return;\n  }\n  const textDivs = task._textDivs;\n  const capability = task._capability;\n  const textDivsLength = textDivs.length;\n\n  // No point in rendering many divs as it would make the browser\n  // unusable even after the divs are rendered.\n  if (textDivsLength > MAX_TEXT_DIVS_TO_RENDER) {\n    task._renderingDone = true;\n    capability.resolve();\n    return;\n  }\n\n  if (!task._textContentStream) {\n    for (let i = 0; i < textDivsLength; i++) {\n      task._layoutText(textDivs[i]);\n    }\n  }\n\n  task._renderingDone = true;\n  capability.resolve();\n}\n\nfunction findPositiveMin(ts, offset, count) {\n  let result = 0;\n  for (let i = 0; i < count; i++) {\n    const t = ts[offset++];\n    if (t > 0) {\n      result = result ? Math.min(t, result) : t;\n    }\n  }\n  return result;\n}\n\nfunction expand(task) {\n  const bounds = task._bounds;\n  const viewport = task._viewport;\n\n  const expanded = expandBounds(viewport.width, viewport.height, bounds);\n  for (let i = 0; i < expanded.length; i++) {\n    const div = bounds[i].div;\n    const divProperties = task._textDivProperties.get(div);\n    if (divProperties.angle === 0) {\n      divProperties.paddingLeft = bounds[i].left - expanded[i].left;\n      divProperties.paddingTop = bounds[i].top - expanded[i].top;\n      divProperties.paddingRight = expanded[i].right - bounds[i].right;\n      divProperties.paddingBottom = expanded[i].bottom - bounds[i].bottom;\n      task._textDivProperties.set(div, divProperties);\n      continue;\n    }\n    // Box is rotated -- trying to find padding so rotated div will not\n    // exceed its expanded bounds.\n    const e = expanded[i],\n      b = bounds[i];\n    const m = b.m,\n      c = m[0],\n      s = m[1];\n    // Finding intersections with expanded box.\n    const points = [[0, 0], [0, b.size[1]], [b.size[0], 0], b.size];\n    const ts = new Float64Array(64);\n    for (let j = 0, jj = points.length; j < jj; j++) {\n      const t = Util.applyTransform(points[j], m);\n      ts[j + 0] = c && (e.left - t[0]) / c;\n      ts[j + 4] = s && (e.top - t[1]) / s;\n      ts[j + 8] = c && (e.right - t[0]) / c;\n      ts[j + 12] = s && (e.bottom - t[1]) / s;\n\n      ts[j + 16] = s && (e.left - t[0]) / -s;\n      ts[j + 20] = c && (e.top - t[1]) / c;\n      ts[j + 24] = s && (e.right - t[0]) / -s;\n      ts[j + 28] = c && (e.bottom - t[1]) / c;\n\n      ts[j + 32] = c && (e.left - t[0]) / -c;\n      ts[j + 36] = s && (e.top - t[1]) / -s;\n      ts[j + 40] = c && (e.right - t[0]) / -c;\n      ts[j + 44] = s && (e.bottom - t[1]) / -s;\n\n      ts[j + 48] = s && (e.left - t[0]) / s;\n      ts[j + 52] = c && (e.top - t[1]) / -c;\n      ts[j + 56] = s && (e.right - t[0]) / s;\n      ts[j + 60] = c && (e.bottom - t[1]) / -c;\n    }\n    // Not based on math, but to simplify calculations, using cos and sin\n    // absolute values to not exceed the box (it can but insignificantly).\n    const boxScale = 1 + Math.min(Math.abs(c), Math.abs(s));\n    divProperties.paddingLeft = findPositiveMin(ts, 32, 16) / boxScale;\n    divProperties.paddingTop = findPositiveMin(ts, 48, 16) / boxScale;\n    divProperties.paddingRight = findPositiveMin(ts, 0, 16) / boxScale;\n    divProperties.paddingBottom = findPositiveMin(ts, 16, 16) / boxScale;\n    task._textDivProperties.set(div, divProperties);\n  }\n}\n\nfunction expandBounds(width, height, boxes) {\n  const bounds = boxes.map(function (box, i) {\n    return {\n      x1: box.left,\n      y1: box.top,\n      x2: box.right,\n      y2: box.bottom,\n      index: i,\n      x1New: undefined,\n      x2New: undefined,\n    };\n  });\n  expandBoundsLTR(width, bounds);\n\n  const expanded = new Array(boxes.length);\n  for (const b of bounds) {\n    const i = b.index;\n    expanded[i] = {\n      left: b.x1New,\n      top: 0,\n      right: b.x2New,\n      bottom: 0,\n    };\n  }\n\n  // Rotating on 90 degrees and extending extended boxes. Reusing the bounds\n  // array and objects.\n  boxes.map(function (box, i) {\n    const e = expanded[i],\n      b = bounds[i];\n    b.x1 = box.top;\n    b.y1 = width - e.right;\n    b.x2 = box.bottom;\n    b.y2 = width - e.left;\n    b.index = i;\n    b.x1New = undefined;\n    b.x2New = undefined;\n  });\n  expandBoundsLTR(height, bounds);\n\n  for (const b of bounds) {\n    const i = b.index;\n    expanded[i].top = b.x1New;\n    expanded[i].bottom = b.x2New;\n  }\n  return expanded;\n}\n\nfunction expandBoundsLTR(width, bounds) {\n  // Sorting by x1 coordinate and walk by the bounds in the same order.\n  bounds.sort(function (a, b) {\n    return a.x1 - b.x1 || a.index - b.index;\n  });\n\n  // First we see on the horizon is a fake boundary.\n  const fakeBoundary = {\n    x1: -Infinity,\n    y1: -Infinity,\n    x2: 0,\n    y2: Infinity,\n    index: -1,\n    x1New: 0,\n    x2New: 0,\n  };\n  const horizon = [\n    {\n      start: -Infinity,\n      end: Infinity,\n      boundary: fakeBoundary,\n    },\n  ];\n\n  for (const boundary of bounds) {\n    // Searching for the affected part of horizon.\n    // TODO red-black tree or simple binary search\n    let i = 0;\n    while (i < horizon.length && horizon[i].end <= boundary.y1) {\n      i++;\n    }\n    let j = horizon.length - 1;\n    while (j >= 0 && horizon[j].start >= boundary.y2) {\n      j--;\n    }\n\n    let horizonPart, affectedBoundary;\n    let q,\n      k,\n      maxXNew = -Infinity;\n    for (q = i; q <= j; q++) {\n      horizonPart = horizon[q];\n      affectedBoundary = horizonPart.boundary;\n      let xNew;\n      if (affectedBoundary.x2 > boundary.x1) {\n        // In the middle of the previous element, new x shall be at the\n        // boundary start. Extending if further if the affected boundary\n        // placed on top of the current one.\n        xNew =\n          affectedBoundary.index > boundary.index\n            ? affectedBoundary.x1New\n            : boundary.x1;\n      } else if (affectedBoundary.x2New === undefined) {\n        // We have some space in between, new x in middle will be a fair\n        // choice.\n        xNew = (affectedBoundary.x2 + boundary.x1) / 2;\n      } else {\n        // Affected boundary has x2new set, using it as new x.\n        xNew = affectedBoundary.x2New;\n      }\n      if (xNew > maxXNew) {\n        maxXNew = xNew;\n      }\n    }\n\n    // Set new x1 for current boundary.\n    boundary.x1New = maxXNew;\n\n    // Adjusts new x2 for the affected boundaries.\n    for (q = i; q <= j; q++) {\n      horizonPart = horizon[q];\n      affectedBoundary = horizonPart.boundary;\n      if (affectedBoundary.x2New === undefined) {\n        // Was not set yet, choosing new x if possible.\n        if (affectedBoundary.x2 > boundary.x1) {\n          // Current and affected boundaries intersect. If affected boundary\n          // is placed on top of the current, shrinking the affected.\n          if (affectedBoundary.index > boundary.index) {\n            affectedBoundary.x2New = affectedBoundary.x2;\n          }\n        } else {\n          affectedBoundary.x2New = maxXNew;\n        }\n      } else if (affectedBoundary.x2New > maxXNew) {\n        // Affected boundary is touching new x, pushing it back.\n        affectedBoundary.x2New = Math.max(maxXNew, affectedBoundary.x2);\n      }\n    }\n\n    // Fixing the horizon.\n    const changedHorizon = [];\n    let lastBoundary = null;\n    for (q = i; q <= j; q++) {\n      horizonPart = horizon[q];\n      affectedBoundary = horizonPart.boundary;\n      // Checking which boundary will be visible.\n      const useBoundary =\n        affectedBoundary.x2 > boundary.x2 ? affectedBoundary : boundary;\n      if (lastBoundary === useBoundary) {\n        // Merging with previous.\n        changedHorizon[changedHorizon.length - 1].end = horizonPart.end;\n      } else {\n        changedHorizon.push({\n          start: horizonPart.start,\n          end: horizonPart.end,\n          boundary: useBoundary,\n        });\n        lastBoundary = useBoundary;\n      }\n    }\n    if (horizon[i].start < boundary.y1) {\n      changedHorizon[0].start = boundary.y1;\n      changedHorizon.unshift({\n        start: horizon[i].start,\n        end: boundary.y1,\n        boundary: horizon[i].boundary,\n      });\n    }\n    if (boundary.y2 < horizon[j].end) {\n      changedHorizon[changedHorizon.length - 1].end = boundary.y2;\n      changedHorizon.push({\n        start: boundary.y2,\n        end: horizon[j].end,\n        boundary: horizon[j].boundary,\n      });\n    }\n\n    // Set x2 new of boundary that is no longer visible (see overlapping case\n    // above).\n    // TODO more efficient, e.g. via reference counting.\n    for (q = i; q <= j; q++) {\n      horizonPart = horizon[q];\n      affectedBoundary = horizonPart.boundary;\n      if (affectedBoundary.x2New !== undefined) {\n        continue;\n      }\n      let used = false;\n      for (\n        k = i - 1;\n        !used && k >= 0 && horizon[k].start >= affectedBoundary.y1;\n        k--\n      ) {\n        used = horizon[k].boundary === affectedBoundary;\n      }\n      for (\n        k = j + 1;\n        !used && k < horizon.length && horizon[k].end <= affectedBoundary.y2;\n        k++\n      ) {\n        used = horizon[k].boundary === affectedBoundary;\n      }\n      for (k = 0; !used && k < changedHorizon.length; k++) {\n        used = changedHorizon[k].boundary === affectedBoundary;\n      }\n      if (!used) {\n        affectedBoundary.x2New = maxXNew;\n      }\n    }\n\n    Array.prototype.splice.apply(\n      horizon,\n      [i, j - i + 1].concat(changedHorizon)\n    );\n  }\n\n  // Set new x2 for all unset boundaries.\n  for (const horizonPart of horizon) {\n    const affectedBoundary = horizonPart.boundary;\n    if (affectedBoundary.x2New === undefined) {\n      affectedBoundary.x2New = Math.max(width, affectedBoundary.x2);\n    }\n  }\n}\n\nclass TextLayerRenderTask {\n  constructor({\n    textContent,\n    textContentStream,\n    container,\n    viewport,\n    textDivs,\n    textContentItemsStr,\n    enhanceTextSelection,\n  }) {\n    this._textContent = textContent;\n    this._textContentStream = textContentStream;\n    this._container = container;\n    this._document = container.ownerDocument;\n    this._viewport = viewport;\n    this._textDivs = textDivs || [];\n    this._textContentItemsStr = textContentItemsStr || [];\n    this._enhanceTextSelection = !!enhanceTextSelection;\n    this._fontInspectorEnabled = !!globalThis.FontInspector?.enabled;\n\n    this._reader = null;\n    this._layoutTextLastFontSize = null;\n    this._layoutTextLastFontFamily = null;\n    this._layoutTextCtx = null;\n    this._textDivProperties = new WeakMap();\n    this._renderingDone = false;\n    this._canceled = false;\n    this._capability = createPromiseCapability();\n    this._renderTimer = null;\n    this._bounds = [];\n\n    // Always clean-up the temporary canvas once rendering is no longer pending.\n    this._capability.promise\n      .finally(() => {\n        if (!this._enhanceTextSelection) {\n          // The `textDiv` properties are no longer needed.\n          this._textDivProperties = null;\n        }\n\n        if (this._layoutTextCtx) {\n          // Zeroing the width and height cause Firefox to release graphics\n          // resources immediately, which can greatly reduce memory consumption.\n          this._layoutTextCtx.canvas.width = 0;\n          this._layoutTextCtx.canvas.height = 0;\n          this._layoutTextCtx = null;\n        }\n      })\n      .catch(() => {\n        // Avoid \"Uncaught promise\" messages in the console.\n      });\n  }\n\n  /**\n   * Promise for textLayer rendering task completion.\n   * @type {Promise<void>}\n   */\n  get promise() {\n    return this._capability.promise;\n  }\n\n  /**\n   * Cancel rendering of the textLayer.\n   */\n  cancel() {\n    this._canceled = true;\n    if (this._reader) {\n      this._reader\n        .cancel(new AbortException(\"TextLayer task cancelled.\"))\n        .catch(() => {\n          // Avoid \"Uncaught promise\" messages in the console.\n        });\n      this._reader = null;\n    }\n    if (this._renderTimer !== null) {\n      clearTimeout(this._renderTimer);\n      this._renderTimer = null;\n    }\n    this._capability.reject(new Error(\"TextLayer task cancelled.\"));\n  }\n\n  /**\n   * @private\n   */\n  _processItems(items, styleCache) {\n    for (let i = 0, len = items.length; i < len; i++) {\n      if (items[i].str === undefined) {\n        if (\n          items[i].type === \"beginMarkedContentProps\" ||\n          items[i].type === \"beginMarkedContent\"\n        ) {\n          const parent = this._container;\n          this._container = document.createElement(\"span\");\n          this._container.classList.add(\"markedContent\");\n          if (items[i].id !== null) {\n            this._container.setAttribute(\"id\", `${items[i].id}`);\n          }\n          parent.appendChild(this._container);\n        } else if (items[i].type === \"endMarkedContent\") {\n          this._container = this._container.parentNode;\n        }\n        continue;\n      }\n      this._textContentItemsStr.push(items[i].str);\n      appendText(this, items[i], styleCache, this._layoutTextCtx);\n    }\n  }\n\n  /**\n   * @private\n   */\n  _layoutText(textDiv) {\n    const textDivProperties = this._textDivProperties.get(textDiv);\n\n    let transform = \"\";\n    if (textDivProperties.canvasWidth !== 0 && textDivProperties.hasText) {\n      const { fontSize, fontFamily } = textDiv.style;\n\n      // Only build font string and set to context if different from last.\n      if (\n        fontSize !== this._layoutTextLastFontSize ||\n        fontFamily !== this._layoutTextLastFontFamily\n      ) {\n        this._layoutTextCtx.font = `${fontSize} ${fontFamily}`;\n        this._layoutTextLastFontSize = fontSize;\n        this._layoutTextLastFontFamily = fontFamily;\n      }\n      // Only measure the width for multi-char text divs, see `appendText`.\n      const { width } = this._layoutTextCtx.measureText(textDiv.textContent);\n\n      if (width > 0) {\n        const scale = textDivProperties.canvasWidth / width;\n        if (this._enhanceTextSelection) {\n          textDivProperties.scale = scale;\n        }\n        transform = `scaleX(${scale})`;\n      }\n    }\n    if (textDivProperties.angle !== 0) {\n      transform = `rotate(${textDivProperties.angle}deg) ${transform}`;\n    }\n    if (transform.length > 0) {\n      if (this._enhanceTextSelection) {\n        textDivProperties.originalTransform = transform;\n      }\n      textDiv.style.transform = transform;\n    }\n\n    if (textDivProperties.hasText) {\n      this._container.appendChild(textDiv);\n    }\n    if (textDivProperties.hasEOL) {\n      const br = document.createElement(\"br\");\n      br.setAttribute(\"role\", \"presentation\");\n      this._container.appendChild(br);\n    }\n  }\n\n  /**\n   * @private\n   */\n  _render(timeout = 0) {\n    const capability = createPromiseCapability();\n    let styleCache = Object.create(null);\n\n    // The temporary canvas is used to measure text length in the DOM.\n    const canvas = this._document.createElement(\"canvas\");\n    canvas.height = canvas.width = DEFAULT_FONT_SIZE;\n\n    if (\n      typeof PDFJSDev === \"undefined\" ||\n      PDFJSDev.test(\"MOZCENTRAL || GENERIC\")\n    ) {\n      canvas.mozOpaque = true;\n    }\n    this._layoutTextCtx = canvas.getContext(\"2d\", { alpha: false });\n\n    if (this._textContent) {\n      const textItems = this._textContent.items;\n      const textStyles = this._textContent.styles;\n      this._processItems(textItems, textStyles);\n      capability.resolve();\n    } else if (this._textContentStream) {\n      const pump = () => {\n        this._reader.read().then(({ value, done }) => {\n          if (done) {\n            capability.resolve();\n            return;\n          }\n\n          Object.assign(styleCache, value.styles);\n          this._processItems(value.items, styleCache);\n          pump();\n        }, capability.reject);\n      };\n\n      this._reader = this._textContentStream.getReader();\n      pump();\n    } else {\n      throw new Error(\n        'Neither \"textContent\" nor \"textContentStream\" parameters specified.'\n      );\n    }\n\n    capability.promise.then(() => {\n      styleCache = null;\n      if (!timeout) {\n        // Render right away\n        render(this);\n      } else {\n        // Schedule\n        this._renderTimer = setTimeout(() => {\n          render(this);\n          this._renderTimer = null;\n        }, timeout);\n      }\n    }, this._capability.reject);\n  }\n\n  /**\n   * @param {boolean} [expandDivs]\n   */\n  expandTextDivs(expandDivs = false) {\n    if (!this._enhanceTextSelection || !this._renderingDone) {\n      return;\n    }\n    if (this._bounds !== null) {\n      expand(this);\n      this._bounds = null;\n    }\n    const transformBuf = [],\n      paddingBuf = [];\n\n    for (let i = 0, ii = this._textDivs.length; i < ii; i++) {\n      const div = this._textDivs[i];\n      const divProps = this._textDivProperties.get(div);\n\n      if (!divProps.hasText) {\n        continue;\n      }\n      if (expandDivs) {\n        transformBuf.length = 0;\n        paddingBuf.length = 0;\n\n        if (divProps.originalTransform) {\n          transformBuf.push(divProps.originalTransform);\n        }\n        if (divProps.paddingTop > 0) {\n          paddingBuf.push(`${divProps.paddingTop}px`);\n          transformBuf.push(`translateY(${-divProps.paddingTop}px)`);\n        } else {\n          paddingBuf.push(0);\n        }\n        if (divProps.paddingRight > 0) {\n          paddingBuf.push(`${divProps.paddingRight / divProps.scale}px`);\n        } else {\n          paddingBuf.push(0);\n        }\n        if (divProps.paddingBottom > 0) {\n          paddingBuf.push(`${divProps.paddingBottom}px`);\n        } else {\n          paddingBuf.push(0);\n        }\n        if (divProps.paddingLeft > 0) {\n          paddingBuf.push(`${divProps.paddingLeft / divProps.scale}px`);\n          transformBuf.push(\n            `translateX(${-divProps.paddingLeft / divProps.scale}px)`\n          );\n        } else {\n          paddingBuf.push(0);\n        }\n\n        div.style.padding = paddingBuf.join(\" \");\n        if (transformBuf.length) {\n          div.style.transform = transformBuf.join(\" \");\n        }\n      } else {\n        div.style.padding = null;\n        div.style.transform = divProps.originalTransform;\n      }\n    }\n  }\n}\n\n/**\n * @param {TextLayerRenderParameters} renderParameters\n * @returns {TextLayerRenderTask}\n */\nfunction renderTextLayer(renderParameters) {\n  const task = new TextLayerRenderTask({\n    textContent: renderParameters.textContent,\n    textContentStream: renderParameters.textContentStream,\n    container: renderParameters.container,\n    viewport: renderParameters.viewport,\n    textDivs: renderParameters.textDivs,\n    textContentItemsStr: renderParameters.textContentItemsStr,\n    enhanceTextSelection: renderParameters.enhanceTextSelection,\n  });\n  task._render(renderParameters.timeout);\n  return task;\n}\n\nexport { renderTextLayer };\n","/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/* globals __non_webpack_require__ */\n\nimport {\n  createObjectURL,\n  FONT_IDENTITY_MATRIX,\n  IDENTITY_MATRIX,\n  ImageKind,\n  isNum,\n  OPS,\n  TextRenderingMode,\n  unreachable,\n  Util,\n  warn,\n} from \"../shared/util.js\";\nimport { DOMSVGFactory } from \"./display_utils.js\";\nimport { isNodeJS } from \"../shared/is_node.js\";\n\n/** @type {any} */\nlet SVGGraphics = class {\n  constructor() {\n    unreachable(\"Not implemented: SVGGraphics\");\n  }\n};\n\nif (\n  typeof PDFJSDev === \"undefined\" ||\n  PDFJSDev.test(\"!PRODUCTION || GENERIC\")\n) {\n  const SVG_DEFAULTS = {\n    fontStyle: \"normal\",\n    fontWeight: \"normal\",\n    fillColor: \"#000000\",\n  };\n  const XML_NS = \"http://www.w3.org/XML/1998/namespace\";\n  const XLINK_NS = \"http://www.w3.org/1999/xlink\";\n  const LINE_CAP_STYLES = [\"butt\", \"round\", \"square\"];\n  const LINE_JOIN_STYLES = [\"miter\", \"round\", \"bevel\"];\n\n  const convertImgDataToPng = (function () {\n    const PNG_HEADER = new Uint8Array([\n      0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a,\n    ]);\n    const CHUNK_WRAPPER_SIZE = 12;\n\n    const crcTable = new Int32Array(256);\n    for (let i = 0; i < 256; i++) {\n      let c = i;\n      for (let h = 0; h < 8; h++) {\n        if (c & 1) {\n          c = 0xedb88320 ^ ((c >> 1) & 0x7fffffff);\n        } else {\n          c = (c >> 1) & 0x7fffffff;\n        }\n      }\n      crcTable[i] = c;\n    }\n\n    function crc32(data, start, end) {\n      let crc = -1;\n      for (let i = start; i < end; i++) {\n        const a = (crc ^ data[i]) & 0xff;\n        const b = crcTable[a];\n        crc = (crc >>> 8) ^ b;\n      }\n      return crc ^ -1;\n    }\n\n    function writePngChunk(type, body, data, offset) {\n      let p = offset;\n      const len = body.length;\n\n      data[p] = (len >> 24) & 0xff;\n      data[p + 1] = (len >> 16) & 0xff;\n      data[p + 2] = (len >> 8) & 0xff;\n      data[p + 3] = len & 0xff;\n      p += 4;\n\n      data[p] = type.charCodeAt(0) & 0xff;\n      data[p + 1] = type.charCodeAt(1) & 0xff;\n      data[p + 2] = type.charCodeAt(2) & 0xff;\n      data[p + 3] = type.charCodeAt(3) & 0xff;\n      p += 4;\n\n      data.set(body, p);\n      p += body.length;\n\n      const crc = crc32(data, offset + 4, p);\n      data[p] = (crc >> 24) & 0xff;\n      data[p + 1] = (crc >> 16) & 0xff;\n      data[p + 2] = (crc >> 8) & 0xff;\n      data[p + 3] = crc & 0xff;\n    }\n\n    function adler32(data, start, end) {\n      let a = 1;\n      let b = 0;\n      for (let i = start; i < end; ++i) {\n        a = (a + (data[i] & 0xff)) % 65521;\n        b = (b + a) % 65521;\n      }\n      return (b << 16) | a;\n    }\n\n    /**\n     * @param {Uint8Array} literals The input data.\n     * @returns {Uint8Array} The DEFLATE-compressed data stream in zlib format.\n     *   This is the required format for compressed streams in the PNG format:\n     *   http://www.libpng.org/pub/png/spec/1.2/PNG-Compression.html\n     */\n    function deflateSync(literals) {\n      if (!isNodeJS) {\n        // zlib is certainly not available outside of Node.js. We can either use\n        // the pako library for client-side DEFLATE compression, or use the\n        // canvas API of the browser to obtain a more optimal PNG file.\n        return deflateSyncUncompressed(literals);\n      }\n      try {\n        // NOTE: This implementation is far from perfect, but already way better\n        // than not applying any compression.\n        //\n        // A better algorithm will try to choose a good predictor/filter and\n        // then choose a suitable zlib compression strategy (e.g. 3,Z_RLE).\n        //\n        // Node v0.11.12 zlib.deflateSync is introduced (and returns a Buffer).\n        // Node v3.0.0   Buffer inherits from Uint8Array.\n        // Node v8.0.0   zlib.deflateSync accepts Uint8Array as input.\n        let input;\n        // eslint-disable-next-line no-undef\n        if (parseInt(process.versions.node) >= 8) {\n          input = literals;\n        } else {\n          // eslint-disable-next-line no-undef\n          input = Buffer.from(literals);\n        }\n        const output = __non_webpack_require__(\"zlib\").deflateSync(input, {\n          level: 9,\n        });\n        return output instanceof Uint8Array ? output : new Uint8Array(output);\n      } catch (e) {\n        warn(\n          \"Not compressing PNG because zlib.deflateSync is unavailable: \" + e\n        );\n      }\n\n      return deflateSyncUncompressed(literals);\n    }\n\n    // An implementation of DEFLATE with compression level 0 (Z_NO_COMPRESSION).\n    function deflateSyncUncompressed(literals) {\n      let len = literals.length;\n      const maxBlockLength = 0xffff;\n\n      const deflateBlocks = Math.ceil(len / maxBlockLength);\n      const idat = new Uint8Array(2 + len + deflateBlocks * 5 + 4);\n      let pi = 0;\n      idat[pi++] = 0x78; // compression method and flags\n      idat[pi++] = 0x9c; // flags\n\n      let pos = 0;\n      while (len > maxBlockLength) {\n        // writing non-final DEFLATE blocks type 0 and length of 65535\n        idat[pi++] = 0x00;\n        idat[pi++] = 0xff;\n        idat[pi++] = 0xff;\n        idat[pi++] = 0x00;\n        idat[pi++] = 0x00;\n        idat.set(literals.subarray(pos, pos + maxBlockLength), pi);\n        pi += maxBlockLength;\n        pos += maxBlockLength;\n        len -= maxBlockLength;\n      }\n\n      // writing non-final DEFLATE blocks type 0\n      idat[pi++] = 0x01;\n      idat[pi++] = len & 0xff;\n      idat[pi++] = (len >> 8) & 0xff;\n      idat[pi++] = ~len & 0xffff & 0xff;\n      idat[pi++] = ((~len & 0xffff) >> 8) & 0xff;\n      idat.set(literals.subarray(pos), pi);\n      pi += literals.length - pos;\n\n      const adler = adler32(literals, 0, literals.length); // checksum\n      idat[pi++] = (adler >> 24) & 0xff;\n      idat[pi++] = (adler >> 16) & 0xff;\n      idat[pi++] = (adler >> 8) & 0xff;\n      idat[pi++] = adler & 0xff;\n      return idat;\n    }\n\n    function encode(imgData, kind, forceDataSchema, isMask) {\n      const width = imgData.width;\n      const height = imgData.height;\n      let bitDepth, colorType, lineSize;\n      const bytes = imgData.data;\n\n      switch (kind) {\n        case ImageKind.GRAYSCALE_1BPP:\n          colorType = 0;\n          bitDepth = 1;\n          lineSize = (width + 7) >> 3;\n          break;\n        case ImageKind.RGB_24BPP:\n          colorType = 2;\n          bitDepth = 8;\n          lineSize = width * 3;\n          break;\n        case ImageKind.RGBA_32BPP:\n          colorType = 6;\n          bitDepth = 8;\n          lineSize = width * 4;\n          break;\n        default:\n          throw new Error(\"invalid format\");\n      }\n\n      // prefix every row with predictor 0\n      const literals = new Uint8Array((1 + lineSize) * height);\n      let offsetLiterals = 0,\n        offsetBytes = 0;\n      for (let y = 0; y < height; ++y) {\n        literals[offsetLiterals++] = 0; // no prediction\n        literals.set(\n          bytes.subarray(offsetBytes, offsetBytes + lineSize),\n          offsetLiterals\n        );\n        offsetBytes += lineSize;\n        offsetLiterals += lineSize;\n      }\n\n      if (kind === ImageKind.GRAYSCALE_1BPP && isMask) {\n        // inverting for image masks\n        offsetLiterals = 0;\n        for (let y = 0; y < height; y++) {\n          offsetLiterals++; // skipping predictor\n          for (let i = 0; i < lineSize; i++) {\n            literals[offsetLiterals++] ^= 0xff;\n          }\n        }\n      }\n\n      const ihdr = new Uint8Array([\n        (width >> 24) & 0xff,\n        (width >> 16) & 0xff,\n        (width >> 8) & 0xff,\n        width & 0xff,\n        (height >> 24) & 0xff,\n        (height >> 16) & 0xff,\n        (height >> 8) & 0xff,\n        height & 0xff,\n        bitDepth, // bit depth\n        colorType, // color type\n        0x00, // compression method\n        0x00, // filter method\n        0x00, // interlace method\n      ]);\n      const idat = deflateSync(literals);\n\n      // PNG consists of: header, IHDR+data, IDAT+data, and IEND.\n      const pngLength =\n        PNG_HEADER.length + CHUNK_WRAPPER_SIZE * 3 + ihdr.length + idat.length;\n      const data = new Uint8Array(pngLength);\n      let offset = 0;\n      data.set(PNG_HEADER, offset);\n      offset += PNG_HEADER.length;\n      writePngChunk(\"IHDR\", ihdr, data, offset);\n      offset += CHUNK_WRAPPER_SIZE + ihdr.length;\n      writePngChunk(\"IDATA\", idat, data, offset);\n      offset += CHUNK_WRAPPER_SIZE + idat.length;\n      writePngChunk(\"IEND\", new Uint8Array(0), data, offset);\n\n      return createObjectURL(data, \"image/png\", forceDataSchema);\n    }\n\n    // eslint-disable-next-line no-shadow\n    return function convertImgDataToPng(imgData, forceDataSchema, isMask) {\n      const kind =\n        imgData.kind === undefined ? ImageKind.GRAYSCALE_1BPP : imgData.kind;\n      return encode(imgData, kind, forceDataSchema, isMask);\n    };\n  })();\n\n  class SVGExtraState {\n    constructor() {\n      this.fontSizeScale = 1;\n      this.fontWeight = SVG_DEFAULTS.fontWeight;\n      this.fontSize = 0;\n\n      this.textMatrix = IDENTITY_MATRIX;\n      this.fontMatrix = FONT_IDENTITY_MATRIX;\n      this.leading = 0;\n      this.textRenderingMode = TextRenderingMode.FILL;\n      this.textMatrixScale = 1;\n\n      // Current point (in user coordinates)\n      this.x = 0;\n      this.y = 0;\n\n      // Start of text line (in text coordinates)\n      this.lineX = 0;\n      this.lineY = 0;\n\n      // Character and word spacing\n      this.charSpacing = 0;\n      this.wordSpacing = 0;\n      this.textHScale = 1;\n      this.textRise = 0;\n\n      // Default foreground and background colors\n      this.fillColor = SVG_DEFAULTS.fillColor;\n      this.strokeColor = \"#000000\";\n\n      this.fillAlpha = 1;\n      this.strokeAlpha = 1;\n      this.lineWidth = 1;\n      this.lineJoin = \"\";\n      this.lineCap = \"\";\n      this.miterLimit = 0;\n\n      this.dashArray = [];\n      this.dashPhase = 0;\n\n      this.dependencies = [];\n\n      // Clipping\n      this.activeClipUrl = null;\n      this.clipGroup = null;\n\n      this.maskId = \"\";\n    }\n\n    clone() {\n      return Object.create(this);\n    }\n\n    setCurrentPoint(x, y) {\n      this.x = x;\n      this.y = y;\n    }\n  }\n\n  // eslint-disable-next-line no-inner-declarations\n  function opListToTree(opList) {\n    let opTree = [];\n    const tmp = [];\n\n    for (const opListElement of opList) {\n      if (opListElement.fn === \"save\") {\n        opTree.push({ fnId: 92, fn: \"group\", items: [] });\n        tmp.push(opTree);\n        opTree = opTree[opTree.length - 1].items;\n        continue;\n      }\n\n      if (opListElement.fn === \"restore\") {\n        opTree = tmp.pop();\n      } else {\n        opTree.push(opListElement);\n      }\n    }\n    return opTree;\n  }\n\n  /**\n   * Format a float number as a string.\n   *\n   * @param value {number} - The float number to format.\n   * @returns {string}\n   */\n  // eslint-disable-next-line no-inner-declarations\n  function pf(value) {\n    if (Number.isInteger(value)) {\n      return value.toString();\n    }\n    const s = value.toFixed(10);\n    let i = s.length - 1;\n    if (s[i] !== \"0\") {\n      return s;\n    }\n\n    // Remove trailing zeros.\n    do {\n      i--;\n    } while (s[i] === \"0\");\n    return s.substring(0, s[i] === \".\" ? i : i + 1);\n  }\n\n  /**\n   * Format a transform matrix as a string. The standard rotation, scale and\n   * translation matrices are replaced by their shorter forms, and for\n   * identity matrices an empty string is returned to save memory.\n   *\n   * @param m {Array} - The transform matrix to format.\n   * @returns {string}\n   */\n  // eslint-disable-next-line no-inner-declarations\n  function pm(m) {\n    if (m[4] === 0 && m[5] === 0) {\n      if (m[1] === 0 && m[2] === 0) {\n        if (m[0] === 1 && m[3] === 1) {\n          return \"\";\n        }\n        return `scale(${pf(m[0])} ${pf(m[3])})`;\n      }\n      if (m[0] === m[3] && m[1] === -m[2]) {\n        const a = (Math.acos(m[0]) * 180) / Math.PI;\n        return `rotate(${pf(a)})`;\n      }\n    } else {\n      if (m[0] === 1 && m[1] === 0 && m[2] === 0 && m[3] === 1) {\n        return `translate(${pf(m[4])} ${pf(m[5])})`;\n      }\n    }\n    return (\n      `matrix(${pf(m[0])} ${pf(m[1])} ${pf(m[2])} ${pf(m[3])} ${pf(m[4])} ` +\n      `${pf(m[5])})`\n    );\n  }\n\n  // The counts below are relevant for all pages, so they have to be global\n  // instead of being members of `SVGGraphics` (which is recreated for\n  // each page).\n  let clipCount = 0;\n  let maskCount = 0;\n  let shadingCount = 0;\n\n  SVGGraphics = class {\n    constructor(commonObjs, objs, forceDataSchema = false) {\n      this.svgFactory = new DOMSVGFactory();\n\n      this.current = new SVGExtraState();\n      this.transformMatrix = IDENTITY_MATRIX; // Graphics state matrix\n      this.transformStack = [];\n      this.extraStack = [];\n      this.commonObjs = commonObjs;\n      this.objs = objs;\n      this.pendingClip = null;\n      this.pendingEOFill = false;\n\n      this.embedFonts = false;\n      this.embeddedFonts = Object.create(null);\n      this.cssStyle = null;\n      this.forceDataSchema = !!forceDataSchema;\n\n      // In `src/shared/util.js` the operator names are mapped to IDs.\n      // The list below represents the reverse of that, i.e., it maps IDs\n      // to operator names.\n      this._operatorIdMapping = [];\n      for (const op in OPS) {\n        this._operatorIdMapping[OPS[op]] = op;\n      }\n    }\n\n    save() {\n      this.transformStack.push(this.transformMatrix);\n      const old = this.current;\n      this.extraStack.push(old);\n      this.current = old.clone();\n    }\n\n    restore() {\n      this.transformMatrix = this.transformStack.pop();\n      this.current = this.extraStack.pop();\n      this.pendingClip = null;\n      this.tgrp = null;\n    }\n\n    group(items) {\n      this.save();\n      this.executeOpTree(items);\n      this.restore();\n    }\n\n    loadDependencies(operatorList) {\n      const fnArray = operatorList.fnArray;\n      const argsArray = operatorList.argsArray;\n\n      for (let i = 0, ii = fnArray.length; i < ii; i++) {\n        if (fnArray[i] !== OPS.dependency) {\n          continue;\n        }\n\n        for (const obj of argsArray[i]) {\n          const objsPool = obj.startsWith(\"g_\") ? this.commonObjs : this.objs;\n          const promise = new Promise(resolve => {\n            objsPool.get(obj, resolve);\n          });\n          this.current.dependencies.push(promise);\n        }\n      }\n      return Promise.all(this.current.dependencies);\n    }\n\n    transform(a, b, c, d, e, f) {\n      const transformMatrix = [a, b, c, d, e, f];\n      this.transformMatrix = Util.transform(\n        this.transformMatrix,\n        transformMatrix\n      );\n      this.tgrp = null;\n    }\n\n    getSVG(operatorList, viewport) {\n      this.viewport = viewport;\n\n      const svgElement = this._initialize(viewport);\n      return this.loadDependencies(operatorList).then(() => {\n        this.transformMatrix = IDENTITY_MATRIX;\n        this.executeOpTree(this.convertOpList(operatorList));\n        return svgElement;\n      });\n    }\n\n    convertOpList(operatorList) {\n      const operatorIdMapping = this._operatorIdMapping;\n      const argsArray = operatorList.argsArray;\n      const fnArray = operatorList.fnArray;\n      const opList = [];\n      for (let i = 0, ii = fnArray.length; i < ii; i++) {\n        const fnId = fnArray[i];\n        opList.push({\n          fnId,\n          fn: operatorIdMapping[fnId],\n          args: argsArray[i],\n        });\n      }\n      return opListToTree(opList);\n    }\n\n    executeOpTree(opTree) {\n      for (const opTreeElement of opTree) {\n        const fn = opTreeElement.fn;\n        const fnId = opTreeElement.fnId;\n        const args = opTreeElement.args;\n\n        switch (fnId | 0) {\n          case OPS.beginText:\n            this.beginText();\n            break;\n          case OPS.dependency:\n            // Handled in `loadDependencies`, so no warning should be shown.\n            break;\n          case OPS.setLeading:\n            this.setLeading(args);\n            break;\n          case OPS.setLeadingMoveText:\n            this.setLeadingMoveText(args[0], args[1]);\n            break;\n          case OPS.setFont:\n            this.setFont(args);\n            break;\n          case OPS.showText:\n            this.showText(args[0]);\n            break;\n          case OPS.showSpacedText:\n            this.showText(args[0]);\n            break;\n          case OPS.endText:\n            this.endText();\n            break;\n          case OPS.moveText:\n            this.moveText(args[0], args[1]);\n            break;\n          case OPS.setCharSpacing:\n            this.setCharSpacing(args[0]);\n            break;\n          case OPS.setWordSpacing:\n            this.setWordSpacing(args[0]);\n            break;\n          case OPS.setHScale:\n            this.setHScale(args[0]);\n            break;\n          case OPS.setTextMatrix:\n            this.setTextMatrix(\n              args[0],\n              args[1],\n              args[2],\n              args[3],\n              args[4],\n              args[5]\n            );\n            break;\n          case OPS.setTextRise:\n            this.setTextRise(args[0]);\n            break;\n          case OPS.setTextRenderingMode:\n            this.setTextRenderingMode(args[0]);\n            break;\n          case OPS.setLineWidth:\n            this.setLineWidth(args[0]);\n            break;\n          case OPS.setLineJoin:\n            this.setLineJoin(args[0]);\n            break;\n          case OPS.setLineCap:\n            this.setLineCap(args[0]);\n            break;\n          case OPS.setMiterLimit:\n            this.setMiterLimit(args[0]);\n            break;\n          case OPS.setFillRGBColor:\n            this.setFillRGBColor(args[0], args[1], args[2]);\n            break;\n          case OPS.setStrokeRGBColor:\n            this.setStrokeRGBColor(args[0], args[1], args[2]);\n            break;\n          case OPS.setStrokeColorN:\n            this.setStrokeColorN(args);\n            break;\n          case OPS.setFillColorN:\n            this.setFillColorN(args);\n            break;\n          case OPS.shadingFill:\n            this.shadingFill(args[0]);\n            break;\n          case OPS.setDash:\n            this.setDash(args[0], args[1]);\n            break;\n          case OPS.setRenderingIntent:\n            this.setRenderingIntent(args[0]);\n            break;\n          case OPS.setFlatness:\n            this.setFlatness(args[0]);\n            break;\n          case OPS.setGState:\n            this.setGState(args[0]);\n            break;\n          case OPS.fill:\n            this.fill();\n            break;\n          case OPS.eoFill:\n            this.eoFill();\n            break;\n          case OPS.stroke:\n            this.stroke();\n            break;\n          case OPS.fillStroke:\n            this.fillStroke();\n            break;\n          case OPS.eoFillStroke:\n            this.eoFillStroke();\n            break;\n          case OPS.clip:\n            this.clip(\"nonzero\");\n            break;\n          case OPS.eoClip:\n            this.clip(\"evenodd\");\n            break;\n          case OPS.paintSolidColorImageMask:\n            this.paintSolidColorImageMask();\n            break;\n          case OPS.paintImageXObject:\n            this.paintImageXObject(args[0]);\n            break;\n          case OPS.paintInlineImageXObject:\n            this.paintInlineImageXObject(args[0]);\n            break;\n          case OPS.paintImageMaskXObject:\n            this.paintImageMaskXObject(args[0]);\n            break;\n          case OPS.paintFormXObjectBegin:\n            this.paintFormXObjectBegin(args[0], args[1]);\n            break;\n          case OPS.paintFormXObjectEnd:\n            this.paintFormXObjectEnd();\n            break;\n          case OPS.closePath:\n            this.closePath();\n            break;\n          case OPS.closeStroke:\n            this.closeStroke();\n            break;\n          case OPS.closeFillStroke:\n            this.closeFillStroke();\n            break;\n          case OPS.closeEOFillStroke:\n            this.closeEOFillStroke();\n            break;\n          case OPS.nextLine:\n            this.nextLine();\n            break;\n          case OPS.transform:\n            this.transform(\n              args[0],\n              args[1],\n              args[2],\n              args[3],\n              args[4],\n              args[5]\n            );\n            break;\n          case OPS.constructPath:\n            this.constructPath(args[0], args[1]);\n            break;\n          case OPS.endPath:\n            this.endPath();\n            break;\n          case 92:\n            this.group(opTreeElement.items);\n            break;\n          default:\n            warn(`Unimplemented operator ${fn}`);\n            break;\n        }\n      }\n    }\n\n    setWordSpacing(wordSpacing) {\n      this.current.wordSpacing = wordSpacing;\n    }\n\n    setCharSpacing(charSpacing) {\n      this.current.charSpacing = charSpacing;\n    }\n\n    nextLine() {\n      this.moveText(0, this.current.leading);\n    }\n\n    setTextMatrix(a, b, c, d, e, f) {\n      const current = this.current;\n      current.textMatrix = current.lineMatrix = [a, b, c, d, e, f];\n      current.textMatrixScale = Math.hypot(a, b);\n\n      current.x = current.lineX = 0;\n      current.y = current.lineY = 0;\n\n      current.xcoords = [];\n      current.ycoords = [];\n      current.tspan = this.svgFactory.createElement(\"svg:tspan\");\n      current.tspan.setAttributeNS(null, \"font-family\", current.fontFamily);\n      current.tspan.setAttributeNS(\n        null,\n        \"font-size\",\n        `${pf(current.fontSize)}px`\n      );\n      current.tspan.setAttributeNS(null, \"y\", pf(-current.y));\n\n      current.txtElement = this.svgFactory.createElement(\"svg:text\");\n      current.txtElement.appendChild(current.tspan);\n    }\n\n    beginText() {\n      const current = this.current;\n      current.x = current.lineX = 0;\n      current.y = current.lineY = 0;\n      current.textMatrix = IDENTITY_MATRIX;\n      current.lineMatrix = IDENTITY_MATRIX;\n      current.textMatrixScale = 1;\n      current.tspan = this.svgFactory.createElement(\"svg:tspan\");\n      current.txtElement = this.svgFactory.createElement(\"svg:text\");\n      current.txtgrp = this.svgFactory.createElement(\"svg:g\");\n      current.xcoords = [];\n      current.ycoords = [];\n    }\n\n    moveText(x, y) {\n      const current = this.current;\n      current.x = current.lineX += x;\n      current.y = current.lineY += y;\n\n      current.xcoords = [];\n      current.ycoords = [];\n      current.tspan = this.svgFactory.createElement(\"svg:tspan\");\n      current.tspan.setAttributeNS(null, \"font-family\", current.fontFamily);\n      current.tspan.setAttributeNS(\n        null,\n        \"font-size\",\n        `${pf(current.fontSize)}px`\n      );\n      current.tspan.setAttributeNS(null, \"y\", pf(-current.y));\n    }\n\n    showText(glyphs) {\n      const current = this.current;\n      const font = current.font;\n      const fontSize = current.fontSize;\n      if (fontSize === 0) {\n        return;\n      }\n\n      const fontSizeScale = current.fontSizeScale;\n      const charSpacing = current.charSpacing;\n      const wordSpacing = current.wordSpacing;\n      const fontDirection = current.fontDirection;\n      const textHScale = current.textHScale * fontDirection;\n      const vertical = font.vertical;\n      const spacingDir = vertical ? 1 : -1;\n      const defaultVMetrics = font.defaultVMetrics;\n      const widthAdvanceScale = fontSize * current.fontMatrix[0];\n\n      let x = 0;\n      for (const glyph of glyphs) {\n        if (glyph === null) {\n          // Word break\n          x += fontDirection * wordSpacing;\n          continue;\n        } else if (isNum(glyph)) {\n          x += (spacingDir * glyph * fontSize) / 1000;\n          continue;\n        }\n\n        const spacing = (glyph.isSpace ? wordSpacing : 0) + charSpacing;\n        const character = glyph.fontChar;\n        let scaledX, scaledY;\n        let width = glyph.width;\n        if (vertical) {\n          let vx;\n          const vmetric = glyph.vmetric || defaultVMetrics;\n          vx = glyph.vmetric ? vmetric[1] : width * 0.5;\n          vx = -vx * widthAdvanceScale;\n          const vy = vmetric[2] * widthAdvanceScale;\n\n          width = vmetric ? -vmetric[0] : width;\n          scaledX = vx / fontSizeScale;\n          scaledY = (x + vy) / fontSizeScale;\n        } else {\n          scaledX = x / fontSizeScale;\n          scaledY = 0;\n        }\n\n        if (glyph.isInFont || font.missingFile) {\n          current.xcoords.push(current.x + scaledX);\n          if (vertical) {\n            current.ycoords.push(-current.y + scaledY);\n          }\n          current.tspan.textContent += character;\n        } else {\n          // TODO: To assist with text selection, we should replace the missing\n          // character with a space character if charWidth is not zero.\n          // But we cannot just do \"character = ' '\", because the ' ' character\n          // might actually map to a different glyph.\n        }\n\n        let charWidth;\n        if (vertical) {\n          charWidth = width * widthAdvanceScale - spacing * fontDirection;\n        } else {\n          charWidth = width * widthAdvanceScale + spacing * fontDirection;\n        }\n\n        x += charWidth;\n      }\n      current.tspan.setAttributeNS(\n        null,\n        \"x\",\n        current.xcoords.map(pf).join(\" \")\n      );\n      if (vertical) {\n        current.tspan.setAttributeNS(\n          null,\n          \"y\",\n          current.ycoords.map(pf).join(\" \")\n        );\n      } else {\n        current.tspan.setAttributeNS(null, \"y\", pf(-current.y));\n      }\n\n      if (vertical) {\n        current.y -= x;\n      } else {\n        current.x += x * textHScale;\n      }\n\n      current.tspan.setAttributeNS(null, \"font-family\", current.fontFamily);\n      current.tspan.setAttributeNS(\n        null,\n        \"font-size\",\n        `${pf(current.fontSize)}px`\n      );\n      if (current.fontStyle !== SVG_DEFAULTS.fontStyle) {\n        current.tspan.setAttributeNS(null, \"font-style\", current.fontStyle);\n      }\n      if (current.fontWeight !== SVG_DEFAULTS.fontWeight) {\n        current.tspan.setAttributeNS(null, \"font-weight\", current.fontWeight);\n      }\n\n      const fillStrokeMode =\n        current.textRenderingMode & TextRenderingMode.FILL_STROKE_MASK;\n      if (\n        fillStrokeMode === TextRenderingMode.FILL ||\n        fillStrokeMode === TextRenderingMode.FILL_STROKE\n      ) {\n        if (current.fillColor !== SVG_DEFAULTS.fillColor) {\n          current.tspan.setAttributeNS(null, \"fill\", current.fillColor);\n        }\n        if (current.fillAlpha < 1) {\n          current.tspan.setAttributeNS(null, \"fill-opacity\", current.fillAlpha);\n        }\n      } else if (current.textRenderingMode === TextRenderingMode.ADD_TO_PATH) {\n        // Workaround for Firefox: We must set fill=\"transparent\" because\n        // fill=\"none\" would generate an empty clipping path.\n        current.tspan.setAttributeNS(null, \"fill\", \"transparent\");\n      } else {\n        current.tspan.setAttributeNS(null, \"fill\", \"none\");\n      }\n\n      if (\n        fillStrokeMode === TextRenderingMode.STROKE ||\n        fillStrokeMode === TextRenderingMode.FILL_STROKE\n      ) {\n        const lineWidthScale = 1 / (current.textMatrixScale || 1);\n        this._setStrokeAttributes(current.tspan, lineWidthScale);\n      }\n\n      // Include the text rise in the text matrix since the `pm` function\n      // creates the SVG element's `translate` entry (work on a copy to avoid\n      // altering the original text matrix).\n      let textMatrix = current.textMatrix;\n      if (current.textRise !== 0) {\n        textMatrix = textMatrix.slice();\n        textMatrix[5] += current.textRise;\n      }\n\n      current.txtElement.setAttributeNS(\n        null,\n        \"transform\",\n        `${pm(textMatrix)} scale(${pf(textHScale)}, -1)`\n      );\n      current.txtElement.setAttributeNS(XML_NS, \"xml:space\", \"preserve\");\n      current.txtElement.appendChild(current.tspan);\n      current.txtgrp.appendChild(current.txtElement);\n\n      this._ensureTransformGroup().appendChild(current.txtElement);\n    }\n\n    setLeadingMoveText(x, y) {\n      this.setLeading(-y);\n      this.moveText(x, y);\n    }\n\n    addFontStyle(fontObj) {\n      if (!fontObj.data) {\n        throw new Error(\n          \"addFontStyle: No font data available, \" +\n            'ensure that the \"fontExtraProperties\" API parameter is set.'\n        );\n      }\n      if (!this.cssStyle) {\n        this.cssStyle = this.svgFactory.createElement(\"svg:style\");\n        this.cssStyle.setAttributeNS(null, \"type\", \"text/css\");\n        this.defs.appendChild(this.cssStyle);\n      }\n\n      const url = createObjectURL(\n        fontObj.data,\n        fontObj.mimetype,\n        this.forceDataSchema\n      );\n      this.cssStyle.textContent +=\n        `@font-face { font-family: \"${fontObj.loadedName}\";` +\n        ` src: url(${url}); }\\n`;\n    }\n\n    setFont(details) {\n      const current = this.current;\n      const fontObj = this.commonObjs.get(details[0]);\n      let size = details[1];\n      current.font = fontObj;\n\n      if (\n        this.embedFonts &&\n        !fontObj.missingFile &&\n        !this.embeddedFonts[fontObj.loadedName]\n      ) {\n        this.addFontStyle(fontObj);\n        this.embeddedFonts[fontObj.loadedName] = fontObj;\n      }\n      current.fontMatrix = fontObj.fontMatrix || FONT_IDENTITY_MATRIX;\n\n      let bold = \"normal\";\n      if (fontObj.black) {\n        bold = \"900\";\n      } else if (fontObj.bold) {\n        bold = \"bold\";\n      }\n      const italic = fontObj.italic ? \"italic\" : \"normal\";\n\n      if (size < 0) {\n        size = -size;\n        current.fontDirection = -1;\n      } else {\n        current.fontDirection = 1;\n      }\n      current.fontSize = size;\n      current.fontFamily = fontObj.loadedName;\n      current.fontWeight = bold;\n      current.fontStyle = italic;\n\n      current.tspan = this.svgFactory.createElement(\"svg:tspan\");\n      current.tspan.setAttributeNS(null, \"y\", pf(-current.y));\n      current.xcoords = [];\n      current.ycoords = [];\n    }\n\n    endText() {\n      const current = this.current;\n      if (\n        current.textRenderingMode & TextRenderingMode.ADD_TO_PATH_FLAG &&\n        current.txtElement?.hasChildNodes()\n      ) {\n        // If no glyphs are shown (i.e. no child nodes), no clipping occurs.\n        current.element = current.txtElement;\n        this.clip(\"nonzero\");\n        this.endPath();\n      }\n    }\n\n    // Path properties\n    setLineWidth(width) {\n      if (width > 0) {\n        this.current.lineWidth = width;\n      }\n    }\n\n    setLineCap(style) {\n      this.current.lineCap = LINE_CAP_STYLES[style];\n    }\n\n    setLineJoin(style) {\n      this.current.lineJoin = LINE_JOIN_STYLES[style];\n    }\n\n    setMiterLimit(limit) {\n      this.current.miterLimit = limit;\n    }\n\n    setStrokeAlpha(strokeAlpha) {\n      this.current.strokeAlpha = strokeAlpha;\n    }\n\n    setStrokeRGBColor(r, g, b) {\n      this.current.strokeColor = Util.makeHexColor(r, g, b);\n    }\n\n    setFillAlpha(fillAlpha) {\n      this.current.fillAlpha = fillAlpha;\n    }\n\n    setFillRGBColor(r, g, b) {\n      this.current.fillColor = Util.makeHexColor(r, g, b);\n      this.current.tspan = this.svgFactory.createElement(\"svg:tspan\");\n      this.current.xcoords = [];\n      this.current.ycoords = [];\n    }\n\n    setStrokeColorN(args) {\n      this.current.strokeColor = this._makeColorN_Pattern(args);\n    }\n\n    setFillColorN(args) {\n      this.current.fillColor = this._makeColorN_Pattern(args);\n    }\n\n    shadingFill(args) {\n      const width = this.viewport.width;\n      const height = this.viewport.height;\n      const inv = Util.inverseTransform(this.transformMatrix);\n      const bl = Util.applyTransform([0, 0], inv);\n      const br = Util.applyTransform([0, height], inv);\n      const ul = Util.applyTransform([width, 0], inv);\n      const ur = Util.applyTransform([width, height], inv);\n      const x0 = Math.min(bl[0], br[0], ul[0], ur[0]);\n      const y0 = Math.min(bl[1], br[1], ul[1], ur[1]);\n      const x1 = Math.max(bl[0], br[0], ul[0], ur[0]);\n      const y1 = Math.max(bl[1], br[1], ul[1], ur[1]);\n\n      const rect = this.svgFactory.createElement(\"svg:rect\");\n      rect.setAttributeNS(null, \"x\", x0);\n      rect.setAttributeNS(null, \"y\", y0);\n      rect.setAttributeNS(null, \"width\", x1 - x0);\n      rect.setAttributeNS(null, \"height\", y1 - y0);\n      rect.setAttributeNS(null, \"fill\", this._makeShadingPattern(args));\n      if (this.current.fillAlpha < 1) {\n        rect.setAttributeNS(null, \"fill-opacity\", this.current.fillAlpha);\n      }\n      this._ensureTransformGroup().appendChild(rect);\n    }\n\n    /**\n     * @private\n     */\n    _makeColorN_Pattern(args) {\n      if (args[0] === \"TilingPattern\") {\n        return this._makeTilingPattern(args);\n      }\n      return this._makeShadingPattern(args);\n    }\n\n    /**\n     * @private\n     */\n    _makeTilingPattern(args) {\n      const color = args[1];\n      const operatorList = args[2];\n      const matrix = args[3] || IDENTITY_MATRIX;\n      const [x0, y0, x1, y1] = args[4];\n      const xstep = args[5];\n      const ystep = args[6];\n      const paintType = args[7];\n\n      const tilingId = `shading${shadingCount++}`;\n      const [tx0, ty0, tx1, ty1] = Util.normalizeRect([\n        ...Util.applyTransform([x0, y0], matrix),\n        ...Util.applyTransform([x1, y1], matrix),\n      ]);\n      const [xscale, yscale] = Util.singularValueDecompose2dScale(matrix);\n      const txstep = xstep * xscale;\n      const tystep = ystep * yscale;\n\n      const tiling = this.svgFactory.createElement(\"svg:pattern\");\n      tiling.setAttributeNS(null, \"id\", tilingId);\n      tiling.setAttributeNS(null, \"patternUnits\", \"userSpaceOnUse\");\n      tiling.setAttributeNS(null, \"width\", txstep);\n      tiling.setAttributeNS(null, \"height\", tystep);\n      tiling.setAttributeNS(null, \"x\", `${tx0}`);\n      tiling.setAttributeNS(null, \"y\", `${ty0}`);\n\n      // Save current state.\n      const svg = this.svg;\n      const transformMatrix = this.transformMatrix;\n      const fillColor = this.current.fillColor;\n      const strokeColor = this.current.strokeColor;\n\n      const bbox = this.svgFactory.create(tx1 - tx0, ty1 - ty0);\n      this.svg = bbox;\n      this.transformMatrix = matrix;\n      if (paintType === 2) {\n        const cssColor = Util.makeHexColor(...color);\n        this.current.fillColor = cssColor;\n        this.current.strokeColor = cssColor;\n      }\n      this.executeOpTree(this.convertOpList(operatorList));\n\n      // Restore saved state.\n      this.svg = svg;\n      this.transformMatrix = transformMatrix;\n      this.current.fillColor = fillColor;\n      this.current.strokeColor = strokeColor;\n\n      tiling.appendChild(bbox.childNodes[0]);\n      this.defs.appendChild(tiling);\n      return `url(#${tilingId})`;\n    }\n\n    /**\n     * @private\n     */\n    _makeShadingPattern(args) {\n      if (typeof args === \"string\") {\n        args = this.objs.get(args);\n      }\n      switch (args[0]) {\n        case \"RadialAxial\":\n          const shadingId = `shading${shadingCount++}`;\n          const colorStops = args[3];\n          let gradient;\n\n          switch (args[1]) {\n            case \"axial\":\n              const point0 = args[4];\n              const point1 = args[5];\n              gradient = this.svgFactory.createElement(\"svg:linearGradient\");\n              gradient.setAttributeNS(null, \"id\", shadingId);\n              gradient.setAttributeNS(null, \"gradientUnits\", \"userSpaceOnUse\");\n              gradient.setAttributeNS(null, \"x1\", point0[0]);\n              gradient.setAttributeNS(null, \"y1\", point0[1]);\n              gradient.setAttributeNS(null, \"x2\", point1[0]);\n              gradient.setAttributeNS(null, \"y2\", point1[1]);\n              break;\n            case \"radial\":\n              const focalPoint = args[4];\n              const circlePoint = args[5];\n              const focalRadius = args[6];\n              const circleRadius = args[7];\n              gradient = this.svgFactory.createElement(\"svg:radialGradient\");\n              gradient.setAttributeNS(null, \"id\", shadingId);\n              gradient.setAttributeNS(null, \"gradientUnits\", \"userSpaceOnUse\");\n              gradient.setAttributeNS(null, \"cx\", circlePoint[0]);\n              gradient.setAttributeNS(null, \"cy\", circlePoint[1]);\n              gradient.setAttributeNS(null, \"r\", circleRadius);\n              gradient.setAttributeNS(null, \"fx\", focalPoint[0]);\n              gradient.setAttributeNS(null, \"fy\", focalPoint[1]);\n              gradient.setAttributeNS(null, \"fr\", focalRadius);\n              break;\n            default:\n              throw new Error(`Unknown RadialAxial type: ${args[1]}`);\n          }\n          for (const colorStop of colorStops) {\n            const stop = this.svgFactory.createElement(\"svg:stop\");\n            stop.setAttributeNS(null, \"offset\", colorStop[0]);\n            stop.setAttributeNS(null, \"stop-color\", colorStop[1]);\n            gradient.appendChild(stop);\n          }\n          this.defs.appendChild(gradient);\n          return `url(#${shadingId})`;\n        case \"Mesh\":\n          warn(\"Unimplemented pattern Mesh\");\n          return null;\n        case \"Dummy\":\n          return \"hotpink\";\n        default:\n          throw new Error(`Unknown IR type: ${args[0]}`);\n      }\n    }\n\n    setDash(dashArray, dashPhase) {\n      this.current.dashArray = dashArray;\n      this.current.dashPhase = dashPhase;\n    }\n\n    constructPath(ops, args) {\n      const current = this.current;\n      let x = current.x,\n        y = current.y;\n      let d = [];\n      let j = 0;\n\n      for (const op of ops) {\n        switch (op | 0) {\n          case OPS.rectangle:\n            x = args[j++];\n            y = args[j++];\n            const width = args[j++];\n            const height = args[j++];\n            const xw = x + width;\n            const yh = y + height;\n            d.push(\n              \"M\",\n              pf(x),\n              pf(y),\n              \"L\",\n              pf(xw),\n              pf(y),\n              \"L\",\n              pf(xw),\n              pf(yh),\n              \"L\",\n              pf(x),\n              pf(yh),\n              \"Z\"\n            );\n            break;\n          case OPS.moveTo:\n            x = args[j++];\n            y = args[j++];\n            d.push(\"M\", pf(x), pf(y));\n            break;\n          case OPS.lineTo:\n            x = args[j++];\n            y = args[j++];\n            d.push(\"L\", pf(x), pf(y));\n            break;\n          case OPS.curveTo:\n            x = args[j + 4];\n            y = args[j + 5];\n            d.push(\n              \"C\",\n              pf(args[j]),\n              pf(args[j + 1]),\n              pf(args[j + 2]),\n              pf(args[j + 3]),\n              pf(x),\n              pf(y)\n            );\n            j += 6;\n            break;\n          case OPS.curveTo2:\n            d.push(\n              \"C\",\n              pf(x),\n              pf(y),\n              pf(args[j]),\n              pf(args[j + 1]),\n              pf(args[j + 2]),\n              pf(args[j + 3])\n            );\n            x = args[j + 2];\n            y = args[j + 3];\n            j += 4;\n            break;\n          case OPS.curveTo3:\n            x = args[j + 2];\n            y = args[j + 3];\n            d.push(\n              \"C\",\n              pf(args[j]),\n              pf(args[j + 1]),\n              pf(x),\n              pf(y),\n              pf(x),\n              pf(y)\n            );\n            j += 4;\n            break;\n          case OPS.closePath:\n            d.push(\"Z\");\n            break;\n        }\n      }\n\n      d = d.join(\" \");\n\n      if (\n        current.path &&\n        ops.length > 0 &&\n        ops[0] !== OPS.rectangle &&\n        ops[0] !== OPS.moveTo\n      ) {\n        // If a path does not start with an OPS.rectangle or OPS.moveTo, it has\n        // probably been divided into two OPS.constructPath operators by\n        // OperatorList. Append the commands to the previous path element.\n        d = current.path.getAttributeNS(null, \"d\") + d;\n      } else {\n        current.path = this.svgFactory.createElement(\"svg:path\");\n        this._ensureTransformGroup().appendChild(current.path);\n      }\n\n      current.path.setAttributeNS(null, \"d\", d);\n      current.path.setAttributeNS(null, \"fill\", \"none\");\n\n      // Saving a reference in current.element so that it can be addressed\n      // in 'fill' and 'stroke'\n      current.element = current.path;\n      current.setCurrentPoint(x, y);\n    }\n\n    endPath() {\n      const current = this.current;\n\n      // Painting operators end a path.\n      current.path = null;\n\n      if (!this.pendingClip) {\n        return;\n      }\n      if (!current.element) {\n        this.pendingClip = null;\n        return;\n      }\n\n      // Add the current path to a clipping path.\n      const clipId = `clippath${clipCount++}`;\n      const clipPath = this.svgFactory.createElement(\"svg:clipPath\");\n      clipPath.setAttributeNS(null, \"id\", clipId);\n      clipPath.setAttributeNS(null, \"transform\", pm(this.transformMatrix));\n\n      // A deep clone is needed when text is used as a clipping path.\n      const clipElement = current.element.cloneNode(true);\n      if (this.pendingClip === \"evenodd\") {\n        clipElement.setAttributeNS(null, \"clip-rule\", \"evenodd\");\n      } else {\n        clipElement.setAttributeNS(null, \"clip-rule\", \"nonzero\");\n      }\n      this.pendingClip = null;\n      clipPath.appendChild(clipElement);\n      this.defs.appendChild(clipPath);\n\n      if (current.activeClipUrl) {\n        // The previous clipping group content can go out of order -- resetting\n        // cached clipGroups.\n        current.clipGroup = null;\n        for (const prev of this.extraStack) {\n          prev.clipGroup = null;\n        }\n        // Intersect with the previous clipping path.\n        clipPath.setAttributeNS(null, \"clip-path\", current.activeClipUrl);\n      }\n      current.activeClipUrl = `url(#${clipId})`;\n\n      this.tgrp = null;\n    }\n\n    clip(type) {\n      this.pendingClip = type;\n    }\n\n    closePath() {\n      const current = this.current;\n      if (current.path) {\n        const d = `${current.path.getAttributeNS(null, \"d\")}Z`;\n        current.path.setAttributeNS(null, \"d\", d);\n      }\n    }\n\n    setLeading(leading) {\n      this.current.leading = -leading;\n    }\n\n    setTextRise(textRise) {\n      this.current.textRise = textRise;\n    }\n\n    setTextRenderingMode(textRenderingMode) {\n      this.current.textRenderingMode = textRenderingMode;\n    }\n\n    setHScale(scale) {\n      this.current.textHScale = scale / 100;\n    }\n\n    setRenderingIntent(intent) {\n      // This operation is ignored since we haven't found a use case for it yet.\n    }\n\n    setFlatness(flatness) {\n      // This operation is ignored since we haven't found a use case for it yet.\n    }\n\n    setGState(states) {\n      for (const [key, value] of states) {\n        switch (key) {\n          case \"LW\":\n            this.setLineWidth(value);\n            break;\n          case \"LC\":\n            this.setLineCap(value);\n            break;\n          case \"LJ\":\n            this.setLineJoin(value);\n            break;\n          case \"ML\":\n            this.setMiterLimit(value);\n            break;\n          case \"D\":\n            this.setDash(value[0], value[1]);\n            break;\n          case \"RI\":\n            this.setRenderingIntent(value);\n            break;\n          case \"FL\":\n            this.setFlatness(value);\n            break;\n          case \"Font\":\n            this.setFont(value);\n            break;\n          case \"CA\":\n            this.setStrokeAlpha(value);\n            break;\n          case \"ca\":\n            this.setFillAlpha(value);\n            break;\n          default:\n            warn(`Unimplemented graphic state operator ${key}`);\n            break;\n        }\n      }\n    }\n\n    fill() {\n      const current = this.current;\n      if (current.element) {\n        current.element.setAttributeNS(null, \"fill\", current.fillColor);\n        current.element.setAttributeNS(null, \"fill-opacity\", current.fillAlpha);\n        this.endPath();\n      }\n    }\n\n    stroke() {\n      const current = this.current;\n      if (current.element) {\n        this._setStrokeAttributes(current.element);\n        current.element.setAttributeNS(null, \"fill\", \"none\");\n        this.endPath();\n      }\n    }\n\n    /**\n     * @private\n     */\n    _setStrokeAttributes(element, lineWidthScale = 1) {\n      const current = this.current;\n      let dashArray = current.dashArray;\n      if (lineWidthScale !== 1 && dashArray.length > 0) {\n        dashArray = dashArray.map(function (value) {\n          return lineWidthScale * value;\n        });\n      }\n      element.setAttributeNS(null, \"stroke\", current.strokeColor);\n      element.setAttributeNS(null, \"stroke-opacity\", current.strokeAlpha);\n      element.setAttributeNS(null, \"stroke-miterlimit\", pf(current.miterLimit));\n      element.setAttributeNS(null, \"stroke-linecap\", current.lineCap);\n      element.setAttributeNS(null, \"stroke-linejoin\", current.lineJoin);\n      element.setAttributeNS(\n        null,\n        \"stroke-width\",\n        pf(lineWidthScale * current.lineWidth) + \"px\"\n      );\n      element.setAttributeNS(\n        null,\n        \"stroke-dasharray\",\n        dashArray.map(pf).join(\" \")\n      );\n      element.setAttributeNS(\n        null,\n        \"stroke-dashoffset\",\n        pf(lineWidthScale * current.dashPhase) + \"px\"\n      );\n    }\n\n    eoFill() {\n      if (this.current.element) {\n        this.current.element.setAttributeNS(null, \"fill-rule\", \"evenodd\");\n      }\n      this.fill();\n    }\n\n    fillStroke() {\n      // Order is important since stroke wants fill to be none.\n      // First stroke, then if fill needed, it will be overwritten.\n      this.stroke();\n      this.fill();\n    }\n\n    eoFillStroke() {\n      if (this.current.element) {\n        this.current.element.setAttributeNS(null, \"fill-rule\", \"evenodd\");\n      }\n      this.fillStroke();\n    }\n\n    closeStroke() {\n      this.closePath();\n      this.stroke();\n    }\n\n    closeFillStroke() {\n      this.closePath();\n      this.fillStroke();\n    }\n\n    closeEOFillStroke() {\n      this.closePath();\n      this.eoFillStroke();\n    }\n\n    paintSolidColorImageMask() {\n      const rect = this.svgFactory.createElement(\"svg:rect\");\n      rect.setAttributeNS(null, \"x\", \"0\");\n      rect.setAttributeNS(null, \"y\", \"0\");\n      rect.setAttributeNS(null, \"width\", \"1px\");\n      rect.setAttributeNS(null, \"height\", \"1px\");\n      rect.setAttributeNS(null, \"fill\", this.current.fillColor);\n\n      this._ensureTransformGroup().appendChild(rect);\n    }\n\n    paintImageXObject(objId) {\n      const imgData = objId.startsWith(\"g_\")\n        ? this.commonObjs.get(objId)\n        : this.objs.get(objId);\n      if (!imgData) {\n        warn(`Dependent image with object ID ${objId} is not ready yet`);\n        return;\n      }\n      this.paintInlineImageXObject(imgData);\n    }\n\n    paintInlineImageXObject(imgData, mask) {\n      const width = imgData.width;\n      const height = imgData.height;\n\n      const imgSrc = convertImgDataToPng(imgData, this.forceDataSchema, !!mask);\n      const cliprect = this.svgFactory.createElement(\"svg:rect\");\n      cliprect.setAttributeNS(null, \"x\", \"0\");\n      cliprect.setAttributeNS(null, \"y\", \"0\");\n      cliprect.setAttributeNS(null, \"width\", pf(width));\n      cliprect.setAttributeNS(null, \"height\", pf(height));\n      this.current.element = cliprect;\n      this.clip(\"nonzero\");\n\n      const imgEl = this.svgFactory.createElement(\"svg:image\");\n      imgEl.setAttributeNS(XLINK_NS, \"xlink:href\", imgSrc);\n      imgEl.setAttributeNS(null, \"x\", \"0\");\n      imgEl.setAttributeNS(null, \"y\", pf(-height));\n      imgEl.setAttributeNS(null, \"width\", pf(width) + \"px\");\n      imgEl.setAttributeNS(null, \"height\", pf(height) + \"px\");\n      imgEl.setAttributeNS(\n        null,\n        \"transform\",\n        `scale(${pf(1 / width)} ${pf(-1 / height)})`\n      );\n      if (mask) {\n        mask.appendChild(imgEl);\n      } else {\n        this._ensureTransformGroup().appendChild(imgEl);\n      }\n    }\n\n    paintImageMaskXObject(imgData) {\n      const current = this.current;\n      const width = imgData.width;\n      const height = imgData.height;\n      const fillColor = current.fillColor;\n\n      current.maskId = `mask${maskCount++}`;\n      const mask = this.svgFactory.createElement(\"svg:mask\");\n      mask.setAttributeNS(null, \"id\", current.maskId);\n\n      const rect = this.svgFactory.createElement(\"svg:rect\");\n      rect.setAttributeNS(null, \"x\", \"0\");\n      rect.setAttributeNS(null, \"y\", \"0\");\n      rect.setAttributeNS(null, \"width\", pf(width));\n      rect.setAttributeNS(null, \"height\", pf(height));\n      rect.setAttributeNS(null, \"fill\", fillColor);\n      rect.setAttributeNS(null, \"mask\", `url(#${current.maskId})`);\n\n      this.defs.appendChild(mask);\n      this._ensureTransformGroup().appendChild(rect);\n\n      this.paintInlineImageXObject(imgData, mask);\n    }\n\n    paintFormXObjectBegin(matrix, bbox) {\n      if (Array.isArray(matrix) && matrix.length === 6) {\n        this.transform(\n          matrix[0],\n          matrix[1],\n          matrix[2],\n          matrix[3],\n          matrix[4],\n          matrix[5]\n        );\n      }\n\n      if (bbox) {\n        const width = bbox[2] - bbox[0];\n        const height = bbox[3] - bbox[1];\n\n        const cliprect = this.svgFactory.createElement(\"svg:rect\");\n        cliprect.setAttributeNS(null, \"x\", bbox[0]);\n        cliprect.setAttributeNS(null, \"y\", bbox[1]);\n        cliprect.setAttributeNS(null, \"width\", pf(width));\n        cliprect.setAttributeNS(null, \"height\", pf(height));\n        this.current.element = cliprect;\n        this.clip(\"nonzero\");\n        this.endPath();\n      }\n    }\n\n    paintFormXObjectEnd() {}\n\n    /**\n     * @private\n     */\n    _initialize(viewport) {\n      const svg = this.svgFactory.create(viewport.width, viewport.height);\n\n      // Create the definitions element.\n      const definitions = this.svgFactory.createElement(\"svg:defs\");\n      svg.appendChild(definitions);\n      this.defs = definitions;\n\n      // Create the root group element, which acts a container for all other\n      // groups and applies the viewport transform.\n      const rootGroup = this.svgFactory.createElement(\"svg:g\");\n      rootGroup.setAttributeNS(null, \"transform\", pm(viewport.transform));\n      svg.appendChild(rootGroup);\n\n      // For the construction of the SVG image we are only interested in the\n      // root group, so we expose it as the entry point of the SVG image for\n      // the other code in this class.\n      this.svg = rootGroup;\n\n      return svg;\n    }\n\n    /**\n     * @private\n     */\n    _ensureClipGroup() {\n      if (!this.current.clipGroup) {\n        const clipGroup = this.svgFactory.createElement(\"svg:g\");\n        clipGroup.setAttributeNS(null, \"clip-path\", this.current.activeClipUrl);\n        this.svg.appendChild(clipGroup);\n        this.current.clipGroup = clipGroup;\n      }\n      return this.current.clipGroup;\n    }\n\n    /**\n     * @private\n     */\n    _ensureTransformGroup() {\n      if (!this.tgrp) {\n        this.tgrp = this.svgFactory.createElement(\"svg:g\");\n        this.tgrp.setAttributeNS(null, \"transform\", pm(this.transformMatrix));\n        if (this.current.activeClipUrl) {\n          this._ensureClipGroup().appendChild(this.tgrp);\n        } else {\n          this.svg.appendChild(this.tgrp);\n        }\n      }\n      return this.tgrp;\n    }\n  };\n}\n\nexport { SVGGraphics };\n","/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/* globals __non_webpack_require__ */\n\nimport {\n  AbortException,\n  assert,\n  createPromiseCapability,\n  MissingPDFException,\n} from \"../shared/util.js\";\nimport {\n  extractFilenameFromHeader,\n  validateRangeRequestCapabilities,\n} from \"./network_utils.js\";\n\nif (typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"MOZCENTRAL\")) {\n  throw new Error(\n    'Module \"./node_stream.js\" shall not be used with MOZCENTRAL builds.'\n  );\n}\n\nconst fs = __non_webpack_require__(\"fs\");\nconst http = __non_webpack_require__(\"http\");\nconst https = __non_webpack_require__(\"https\");\nconst url = __non_webpack_require__(\"url\");\n\nconst fileUriRegex = /^file:\\/\\/\\/[a-zA-Z]:\\//;\n\nfunction parseUrl(sourceUrl) {\n  const parsedUrl = url.parse(sourceUrl);\n  if (parsedUrl.protocol === \"file:\" || parsedUrl.host) {\n    return parsedUrl;\n  }\n  // Prepending 'file:///' to Windows absolute path.\n  if (/^[a-z]:[/\\\\]/i.test(sourceUrl)) {\n    return url.parse(`file:///${sourceUrl}`);\n  }\n  // Changes protocol to 'file:' if url refers to filesystem.\n  if (!parsedUrl.host) {\n    parsedUrl.protocol = \"file:\";\n  }\n  return parsedUrl;\n}\n\nclass PDFNodeStream {\n  constructor(source) {\n    this.source = source;\n    this.url = parseUrl(source.url);\n    this.isHttp =\n      this.url.protocol === \"http:\" || this.url.protocol === \"https:\";\n    // Check if url refers to filesystem.\n    this.isFsUrl = this.url.protocol === \"file:\";\n    this.httpHeaders = (this.isHttp && source.httpHeaders) || {};\n\n    this._fullRequestReader = null;\n    this._rangeRequestReaders = [];\n  }\n\n  get _progressiveDataLength() {\n    return this._fullRequestReader?._loaded ?? 0;\n  }\n\n  getFullReader() {\n    assert(\n      !this._fullRequestReader,\n      \"PDFNodeStream.getFullReader can only be called once.\"\n    );\n    this._fullRequestReader = this.isFsUrl\n      ? new PDFNodeStreamFsFullReader(this)\n      : new PDFNodeStreamFullReader(this);\n    return this._fullRequestReader;\n  }\n\n  getRangeReader(start, end) {\n    if (end <= this._progressiveDataLength) {\n      return null;\n    }\n    const rangeReader = this.isFsUrl\n      ? new PDFNodeStreamFsRangeReader(this, start, end)\n      : new PDFNodeStreamRangeReader(this, start, end);\n    this._rangeRequestReaders.push(rangeReader);\n    return rangeReader;\n  }\n\n  cancelAllRequests(reason) {\n    if (this._fullRequestReader) {\n      this._fullRequestReader.cancel(reason);\n    }\n    for (const reader of this._rangeRequestReaders.slice(0)) {\n      reader.cancel(reason);\n    }\n  }\n}\n\nclass BaseFullReader {\n  constructor(stream) {\n    this._url = stream.url;\n    this._done = false;\n    this._storedError = null;\n    this.onProgress = null;\n    const source = stream.source;\n    this._contentLength = source.length; // optional\n    this._loaded = 0;\n    this._filename = null;\n\n    this._disableRange = source.disableRange || false;\n    this._rangeChunkSize = source.rangeChunkSize;\n    if (!this._rangeChunkSize && !this._disableRange) {\n      this._disableRange = true;\n    }\n\n    this._isStreamingSupported = !source.disableStream;\n    this._isRangeSupported = !source.disableRange;\n\n    this._readableStream = null;\n    this._readCapability = createPromiseCapability();\n    this._headersCapability = createPromiseCapability();\n  }\n\n  get headersReady() {\n    return this._headersCapability.promise;\n  }\n\n  get filename() {\n    return this._filename;\n  }\n\n  get contentLength() {\n    return this._contentLength;\n  }\n\n  get isRangeSupported() {\n    return this._isRangeSupported;\n  }\n\n  get isStreamingSupported() {\n    return this._isStreamingSupported;\n  }\n\n  async read() {\n    await this._readCapability.promise;\n    if (this._done) {\n      return { value: undefined, done: true };\n    }\n    if (this._storedError) {\n      throw this._storedError;\n    }\n\n    const chunk = this._readableStream.read();\n    if (chunk === null) {\n      this._readCapability = createPromiseCapability();\n      return this.read();\n    }\n    this._loaded += chunk.length;\n    if (this.onProgress) {\n      this.onProgress({\n        loaded: this._loaded,\n        total: this._contentLength,\n      });\n    }\n    // Ensure that `read()` method returns ArrayBuffer.\n    const buffer = new Uint8Array(chunk).buffer;\n    return { value: buffer, done: false };\n  }\n\n  cancel(reason) {\n    // Call `this._error()` method when cancel is called\n    // before _readableStream is set.\n    if (!this._readableStream) {\n      this._error(reason);\n      return;\n    }\n    this._readableStream.destroy(reason);\n  }\n\n  _error(reason) {\n    this._storedError = reason;\n    this._readCapability.resolve();\n  }\n\n  _setReadableStream(readableStream) {\n    this._readableStream = readableStream;\n    readableStream.on(\"readable\", () => {\n      this._readCapability.resolve();\n    });\n\n    readableStream.on(\"end\", () => {\n      // Destroy readable to minimize resource usage.\n      readableStream.destroy();\n      this._done = true;\n      this._readCapability.resolve();\n    });\n\n    readableStream.on(\"error\", reason => {\n      this._error(reason);\n    });\n\n    // We need to stop reading when range is supported and streaming is\n    // disabled.\n    if (!this._isStreamingSupported && this._isRangeSupported) {\n      this._error(new AbortException(\"streaming is disabled\"));\n    }\n\n    // Destroy ReadableStream if already in errored state.\n    if (this._storedError) {\n      this._readableStream.destroy(this._storedError);\n    }\n  }\n}\n\nclass BaseRangeReader {\n  constructor(stream) {\n    this._url = stream.url;\n    this._done = false;\n    this._storedError = null;\n    this.onProgress = null;\n    this._loaded = 0;\n    this._readableStream = null;\n    this._readCapability = createPromiseCapability();\n    const source = stream.source;\n    this._isStreamingSupported = !source.disableStream;\n  }\n\n  get isStreamingSupported() {\n    return this._isStreamingSupported;\n  }\n\n  async read() {\n    await this._readCapability.promise;\n    if (this._done) {\n      return { value: undefined, done: true };\n    }\n    if (this._storedError) {\n      throw this._storedError;\n    }\n\n    const chunk = this._readableStream.read();\n    if (chunk === null) {\n      this._readCapability = createPromiseCapability();\n      return this.read();\n    }\n    this._loaded += chunk.length;\n    if (this.onProgress) {\n      this.onProgress({ loaded: this._loaded });\n    }\n    // Ensure that `read()` method returns ArrayBuffer.\n    const buffer = new Uint8Array(chunk).buffer;\n    return { value: buffer, done: false };\n  }\n\n  cancel(reason) {\n    // Call `this._error()` method when cancel is called\n    // before _readableStream is set.\n    if (!this._readableStream) {\n      this._error(reason);\n      return;\n    }\n    this._readableStream.destroy(reason);\n  }\n\n  _error(reason) {\n    this._storedError = reason;\n    this._readCapability.resolve();\n  }\n\n  _setReadableStream(readableStream) {\n    this._readableStream = readableStream;\n    readableStream.on(\"readable\", () => {\n      this._readCapability.resolve();\n    });\n\n    readableStream.on(\"end\", () => {\n      // Destroy readableStream to minimize resource usage.\n      readableStream.destroy();\n      this._done = true;\n      this._readCapability.resolve();\n    });\n\n    readableStream.on(\"error\", reason => {\n      this._error(reason);\n    });\n\n    // Destroy readableStream if already in errored state.\n    if (this._storedError) {\n      this._readableStream.destroy(this._storedError);\n    }\n  }\n}\n\nfunction createRequestOptions(parsedUrl, headers) {\n  return {\n    protocol: parsedUrl.protocol,\n    auth: parsedUrl.auth,\n    host: parsedUrl.hostname,\n    port: parsedUrl.port,\n    path: parsedUrl.path,\n    method: \"GET\",\n    headers,\n  };\n}\n\nclass PDFNodeStreamFullReader extends BaseFullReader {\n  constructor(stream) {\n    super(stream);\n\n    const handleResponse = response => {\n      if (response.statusCode === 404) {\n        const error = new MissingPDFException(`Missing PDF \"${this._url}\".`);\n        this._storedError = error;\n        this._headersCapability.reject(error);\n        return;\n      }\n      this._headersCapability.resolve();\n      this._setReadableStream(response);\n\n      const getResponseHeader = name => {\n        // Make sure that headers name are in lower case, as mentioned\n        // here: https://nodejs.org/api/http.html#http_message_headers.\n        return this._readableStream.headers[name.toLowerCase()];\n      };\n      const { allowRangeRequests, suggestedLength } =\n        validateRangeRequestCapabilities({\n          getResponseHeader,\n          isHttp: stream.isHttp,\n          rangeChunkSize: this._rangeChunkSize,\n          disableRange: this._disableRange,\n        });\n\n      this._isRangeSupported = allowRangeRequests;\n      // Setting right content length.\n      this._contentLength = suggestedLength || this._contentLength;\n\n      this._filename = extractFilenameFromHeader(getResponseHeader);\n    };\n\n    this._request = null;\n    if (this._url.protocol === \"http:\") {\n      this._request = http.request(\n        createRequestOptions(this._url, stream.httpHeaders),\n        handleResponse\n      );\n    } else {\n      this._request = https.request(\n        createRequestOptions(this._url, stream.httpHeaders),\n        handleResponse\n      );\n    }\n\n    this._request.on(\"error\", reason => {\n      this._storedError = reason;\n      this._headersCapability.reject(reason);\n    });\n    // Note: `request.end(data)` is used to write `data` to request body\n    // and notify end of request. But one should always call `request.end()`\n    // even if there is no data to write -- (to notify the end of request).\n    this._request.end();\n  }\n}\n\nclass PDFNodeStreamRangeReader extends BaseRangeReader {\n  constructor(stream, start, end) {\n    super(stream);\n\n    this._httpHeaders = {};\n    for (const property in stream.httpHeaders) {\n      const value = stream.httpHeaders[property];\n      if (typeof value === \"undefined\") {\n        continue;\n      }\n      this._httpHeaders[property] = value;\n    }\n    this._httpHeaders.Range = `bytes=${start}-${end - 1}`;\n\n    const handleResponse = response => {\n      if (response.statusCode === 404) {\n        const error = new MissingPDFException(`Missing PDF \"${this._url}\".`);\n        this._storedError = error;\n        return;\n      }\n      this._setReadableStream(response);\n    };\n\n    this._request = null;\n    if (this._url.protocol === \"http:\") {\n      this._request = http.request(\n        createRequestOptions(this._url, this._httpHeaders),\n        handleResponse\n      );\n    } else {\n      this._request = https.request(\n        createRequestOptions(this._url, this._httpHeaders),\n        handleResponse\n      );\n    }\n\n    this._request.on(\"error\", reason => {\n      this._storedError = reason;\n    });\n    this._request.end();\n  }\n}\n\nclass PDFNodeStreamFsFullReader extends BaseFullReader {\n  constructor(stream) {\n    super(stream);\n\n    let path = decodeURIComponent(this._url.path);\n\n    // Remove the extra slash to get right path from url like `file:///C:/`\n    if (fileUriRegex.test(this._url.href)) {\n      path = path.replace(/^\\//, \"\");\n    }\n\n    fs.lstat(path, (error, stat) => {\n      if (error) {\n        if (error.code === \"ENOENT\") {\n          error = new MissingPDFException(`Missing PDF \"${path}\".`);\n        }\n        this._storedError = error;\n        this._headersCapability.reject(error);\n        return;\n      }\n      // Setting right content length.\n      this._contentLength = stat.size;\n\n      this._setReadableStream(fs.createReadStream(path));\n      this._headersCapability.resolve();\n    });\n  }\n}\n\nclass PDFNodeStreamFsRangeReader extends BaseRangeReader {\n  constructor(stream, start, end) {\n    super(stream);\n\n    let path = decodeURIComponent(this._url.path);\n\n    // Remove the extra slash to get right path from url like `file:///C:/`\n    if (fileUriRegex.test(this._url.href)) {\n      path = path.replace(/^\\//, \"\");\n    }\n\n    this._setReadableStream(fs.createReadStream(path, { start, end: end - 1 }));\n  }\n}\n\nexport { PDFNodeStream };\n","/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  assert,\n  MissingPDFException,\n  UnexpectedResponseException,\n} from \"../shared/util.js\";\nimport { getFilenameFromContentDispositionHeader } from \"./content_disposition.js\";\nimport { isPdfFile } from \"./display_utils.js\";\n\nfunction validateRangeRequestCapabilities({\n  getResponseHeader,\n  isHttp,\n  rangeChunkSize,\n  disableRange,\n}) {\n  assert(rangeChunkSize > 0, \"Range chunk size must be larger than zero\");\n  const returnValues = {\n    allowRangeRequests: false,\n    suggestedLength: undefined,\n  };\n\n  const length = parseInt(getResponseHeader(\"Content-Length\"), 10);\n  if (!Number.isInteger(length)) {\n    return returnValues;\n  }\n\n  returnValues.suggestedLength = length;\n\n  if (length <= 2 * rangeChunkSize) {\n    // The file size is smaller than the size of two chunks, so it does not\n    // make any sense to abort the request and retry with a range request.\n    return returnValues;\n  }\n\n  if (disableRange || !isHttp) {\n    return returnValues;\n  }\n  if (getResponseHeader(\"Accept-Ranges\") !== \"bytes\") {\n    return returnValues;\n  }\n\n  const contentEncoding = getResponseHeader(\"Content-Encoding\") || \"identity\";\n  if (contentEncoding !== \"identity\") {\n    return returnValues;\n  }\n\n  returnValues.allowRangeRequests = true;\n  return returnValues;\n}\n\nfunction extractFilenameFromHeader(getResponseHeader) {\n  const contentDisposition = getResponseHeader(\"Content-Disposition\");\n  if (contentDisposition) {\n    let filename = getFilenameFromContentDispositionHeader(contentDisposition);\n    if (filename.includes(\"%\")) {\n      try {\n        filename = decodeURIComponent(filename);\n      } catch (ex) {}\n    }\n    if (isPdfFile(filename)) {\n      return filename;\n    }\n  }\n  return null;\n}\n\nfunction createResponseStatusError(status, url) {\n  if (status === 404 || (status === 0 && url.startsWith(\"file:\"))) {\n    return new MissingPDFException('Missing PDF \"' + url + '\".');\n  }\n  return new UnexpectedResponseException(\n    `Unexpected server response (${status}) while retrieving PDF \"${url}\".`,\n    status\n  );\n}\n\nfunction validateResponseStatus(status) {\n  return status === 200 || status === 206;\n}\n\nexport {\n  createResponseStatusError,\n  extractFilenameFromHeader,\n  validateRangeRequestCapabilities,\n  validateResponseStatus,\n};\n","/* Copyright 2017 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { stringToBytes } from \"../shared/util.js\";\n\n// This getFilenameFromContentDispositionHeader function is adapted from\n// https://github.com/Rob--W/open-in-browser/blob/7e2e35a38b8b4e981b11da7b2f01df0149049e92/extension/content-disposition.js\n// with the following changes:\n// - Modified to conform to PDF.js's coding style.\n// - Support UTF-8 decoding when TextDecoder is unsupported.\n// - Move return to the end of the function to prevent Babel from dropping the\n//   function declarations.\n\n/**\n * Extract file name from the Content-Disposition HTTP response header.\n *\n * @param {string} contentDisposition\n * @returns {string} Filename, if found in the Content-Disposition header.\n */\nfunction getFilenameFromContentDispositionHeader(contentDisposition) {\n  let needsEncodingFixup = true;\n\n  // filename*=ext-value (\"ext-value\" from RFC 5987, referenced by RFC 6266).\n  let tmp = toParamRegExp(\"filename\\\\*\", \"i\").exec(contentDisposition);\n  if (tmp) {\n    tmp = tmp[1];\n    let filename = rfc2616unquote(tmp);\n    filename = unescape(filename);\n    filename = rfc5987decode(filename);\n    filename = rfc2047decode(filename);\n    return fixupEncoding(filename);\n  }\n\n  // Continuations (RFC 2231 section 3, referenced by RFC 5987 section 3.1).\n  // filename*n*=part\n  // filename*n=part\n  tmp = rfc2231getparam(contentDisposition);\n  if (tmp) {\n    // RFC 2047, section\n    const filename = rfc2047decode(tmp);\n    return fixupEncoding(filename);\n  }\n\n  // filename=value (RFC 5987, section 4.1).\n  tmp = toParamRegExp(\"filename\", \"i\").exec(contentDisposition);\n  if (tmp) {\n    tmp = tmp[1];\n    let filename = rfc2616unquote(tmp);\n    filename = rfc2047decode(filename);\n    return fixupEncoding(filename);\n  }\n\n  // After this line there are only function declarations. We cannot put\n  // \"return\" here for readability because babel would then drop the function\n  // declarations...\n  function toParamRegExp(attributePattern, flags) {\n    return new RegExp(\n      \"(?:^|;)\\\\s*\" +\n        attributePattern +\n        \"\\\\s*=\\\\s*\" +\n        // Captures: value = token | quoted-string\n        // (RFC 2616, section 3.6 and referenced by RFC 6266 4.1)\n        \"(\" +\n        '[^\";\\\\s][^;\\\\s]*' +\n        \"|\" +\n        '\"(?:[^\"\\\\\\\\]|\\\\\\\\\"?)+\"?' +\n        \")\",\n      flags\n    );\n  }\n  function textdecode(encoding, value) {\n    if (encoding) {\n      if (!/^[\\x00-\\xFF]+$/.test(value)) {\n        return value;\n      }\n      try {\n        const decoder = new TextDecoder(encoding, { fatal: true });\n        const buffer = stringToBytes(value);\n        value = decoder.decode(buffer);\n        needsEncodingFixup = false;\n      } catch (e) {\n        // TextDecoder constructor threw - unrecognized encoding.\n        // Or TextDecoder API is not available (in IE / Edge).\n        if (/^utf-?8$/i.test(encoding)) {\n          // UTF-8 is commonly used, try to support it in another way:\n          try {\n            value = decodeURIComponent(escape(value));\n            needsEncodingFixup = false;\n          } catch (err) {}\n        }\n      }\n    }\n    return value;\n  }\n  function fixupEncoding(value) {\n    if (needsEncodingFixup && /[\\x80-\\xff]/.test(value)) {\n      // Maybe multi-byte UTF-8.\n      value = textdecode(\"utf-8\", value);\n      if (needsEncodingFixup) {\n        // Try iso-8859-1 encoding.\n        value = textdecode(\"iso-8859-1\", value);\n      }\n    }\n    return value;\n  }\n  function rfc2231getparam(contentDispositionStr) {\n    const matches = [];\n    let match;\n    // Iterate over all filename*n= and filename*n*= with n being an integer\n    // of at least zero. Any non-zero number must not start with '0'.\n    const iter = toParamRegExp(\"filename\\\\*((?!0\\\\d)\\\\d+)(\\\\*?)\", \"ig\");\n    while ((match = iter.exec(contentDispositionStr)) !== null) {\n      let [, n, quot, part] = match; // eslint-disable-line prefer-const\n      n = parseInt(n, 10);\n      if (n in matches) {\n        // Ignore anything after the invalid second filename*0.\n        if (n === 0) {\n          break;\n        }\n        continue;\n      }\n      matches[n] = [quot, part];\n    }\n    const parts = [];\n    for (let n = 0; n < matches.length; ++n) {\n      if (!(n in matches)) {\n        // Numbers must be consecutive. Truncate when there is a hole.\n        break;\n      }\n      let [quot, part] = matches[n]; // eslint-disable-line prefer-const\n      part = rfc2616unquote(part);\n      if (quot) {\n        part = unescape(part);\n        if (n === 0) {\n          part = rfc5987decode(part);\n        }\n      }\n      parts.push(part);\n    }\n    return parts.join(\"\");\n  }\n  function rfc2616unquote(value) {\n    if (value.startsWith('\"')) {\n      const parts = value.slice(1).split('\\\\\"');\n      // Find the first unescaped \" and terminate there.\n      for (let i = 0; i < parts.length; ++i) {\n        const quotindex = parts[i].indexOf('\"');\n        if (quotindex !== -1) {\n          parts[i] = parts[i].slice(0, quotindex);\n          parts.length = i + 1; // Truncates and stop the iteration.\n        }\n        parts[i] = parts[i].replace(/\\\\(.)/g, \"$1\");\n      }\n      value = parts.join('\"');\n    }\n    return value;\n  }\n  function rfc5987decode(extvalue) {\n    // Decodes \"ext-value\" from RFC 5987.\n    const encodingend = extvalue.indexOf(\"'\");\n    if (encodingend === -1) {\n      // Some servers send \"filename*=\" without encoding 'language' prefix,\n      // e.g. in https://github.com/Rob--W/open-in-browser/issues/26\n      // Let's accept the value like Firefox (57) (Chrome 62 rejects it).\n      return extvalue;\n    }\n    const encoding = extvalue.slice(0, encodingend);\n    const langvalue = extvalue.slice(encodingend + 1);\n    // Ignore language (RFC 5987 section 3.2.1, and RFC 6266 section 4.1 ).\n    const value = langvalue.replace(/^[^']*'/, \"\");\n    return textdecode(encoding, value);\n  }\n  function rfc2047decode(value) {\n    // RFC 2047-decode the result. Firefox tried to drop support for it, but\n    // backed out because some servers use it - https://bugzil.la/875615\n    // Firefox's condition for decoding is here: https://searchfox.org/mozilla-central/rev/4a590a5a15e35d88a3b23dd6ac3c471cf85b04a8/netwerk/mime/nsMIMEHeaderParamImpl.cpp#742-748\n\n    // We are more strict and only recognize RFC 2047-encoding if the value\n    // starts with \"=?\", since then it is likely that the full value is\n    // RFC 2047-encoded.\n\n    // Firefox also decodes words even where RFC 2047 section 5 states:\n    // \"An 'encoded-word' MUST NOT appear within a 'quoted-string'.\"\n    if (!value.startsWith(\"=?\") || /[\\x00-\\x19\\x80-\\xff]/.test(value)) {\n      return value;\n    }\n    // RFC 2047, section 2.4\n    // encoded-word = \"=?\" charset \"?\" encoding \"?\" encoded-text \"?=\"\n    // charset = token (but let's restrict to characters that denote a\n    //       possibly valid encoding).\n    // encoding = q or b\n    // encoded-text = any printable ASCII character other than ? or space.\n    //        ... but Firefox permits ? and space.\n    return value.replace(\n      /=\\?([\\w-]*)\\?([QqBb])\\?((?:[^?]|\\?(?!=))*)\\?=/g,\n      function (matches, charset, encoding, text) {\n        if (encoding === \"q\" || encoding === \"Q\") {\n          // RFC 2047 section 4.2.\n          text = text.replace(/_/g, \" \");\n          text = text.replace(/=([0-9a-fA-F]{2})/g, function (match, hex) {\n            return String.fromCharCode(parseInt(hex, 16));\n          });\n          return textdecode(charset, text);\n        } // else encoding is b or B - base64 (RFC 2047 section 4.1)\n        try {\n          text = atob(text);\n        } catch (e) {}\n        return textdecode(charset, text);\n      }\n    );\n  }\n\n  return \"\";\n}\n\nexport { getFilenameFromContentDispositionHeader };\n","/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  assert,\n  createPromiseCapability,\n  stringToBytes,\n} from \"../shared/util.js\";\nimport {\n  createResponseStatusError,\n  extractFilenameFromHeader,\n  validateRangeRequestCapabilities,\n} from \"./network_utils.js\";\n\nif (typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"MOZCENTRAL\")) {\n  throw new Error(\n    'Module \"./network.js\" shall not be used with MOZCENTRAL builds.'\n  );\n}\n\nconst OK_RESPONSE = 200;\nconst PARTIAL_CONTENT_RESPONSE = 206;\n\nfunction getArrayBuffer(xhr) {\n  const data = xhr.response;\n  if (typeof data !== \"string\") {\n    return data;\n  }\n  const array = stringToBytes(data);\n  return array.buffer;\n}\n\nclass NetworkManager {\n  constructor(url, args = {}) {\n    this.url = url;\n    this.isHttp = /^https?:/i.test(url);\n    this.httpHeaders = (this.isHttp && args.httpHeaders) || Object.create(null);\n    this.withCredentials = args.withCredentials || false;\n    this.getXhr =\n      args.getXhr ||\n      function NetworkManager_getXhr() {\n        return new XMLHttpRequest();\n      };\n\n    this.currXhrId = 0;\n    this.pendingRequests = Object.create(null);\n  }\n\n  requestRange(begin, end, listeners) {\n    const args = {\n      begin,\n      end,\n    };\n    for (const prop in listeners) {\n      args[prop] = listeners[prop];\n    }\n    return this.request(args);\n  }\n\n  requestFull(listeners) {\n    return this.request(listeners);\n  }\n\n  request(args) {\n    const xhr = this.getXhr();\n    const xhrId = this.currXhrId++;\n    const pendingRequest = (this.pendingRequests[xhrId] = { xhr });\n\n    xhr.open(\"GET\", this.url);\n    xhr.withCredentials = this.withCredentials;\n    for (const property in this.httpHeaders) {\n      const value = this.httpHeaders[property];\n      if (typeof value === \"undefined\") {\n        continue;\n      }\n      xhr.setRequestHeader(property, value);\n    }\n    if (this.isHttp && \"begin\" in args && \"end\" in args) {\n      xhr.setRequestHeader(\"Range\", `bytes=${args.begin}-${args.end - 1}`);\n      pendingRequest.expectedStatus = PARTIAL_CONTENT_RESPONSE;\n    } else {\n      pendingRequest.expectedStatus = OK_RESPONSE;\n    }\n    xhr.responseType = \"arraybuffer\";\n\n    if (args.onError) {\n      xhr.onerror = function (evt) {\n        args.onError(xhr.status);\n      };\n    }\n    xhr.onreadystatechange = this.onStateChange.bind(this, xhrId);\n    xhr.onprogress = this.onProgress.bind(this, xhrId);\n\n    pendingRequest.onHeadersReceived = args.onHeadersReceived;\n    pendingRequest.onDone = args.onDone;\n    pendingRequest.onError = args.onError;\n    pendingRequest.onProgress = args.onProgress;\n\n    xhr.send(null);\n\n    return xhrId;\n  }\n\n  onProgress(xhrId, evt) {\n    const pendingRequest = this.pendingRequests[xhrId];\n    if (!pendingRequest) {\n      return; // Maybe abortRequest was called...\n    }\n    pendingRequest.onProgress?.(evt);\n  }\n\n  onStateChange(xhrId, evt) {\n    const pendingRequest = this.pendingRequests[xhrId];\n    if (!pendingRequest) {\n      return; // Maybe abortRequest was called...\n    }\n\n    const xhr = pendingRequest.xhr;\n    if (xhr.readyState >= 2 && pendingRequest.onHeadersReceived) {\n      pendingRequest.onHeadersReceived();\n      delete pendingRequest.onHeadersReceived;\n    }\n\n    if (xhr.readyState !== 4) {\n      return;\n    }\n\n    if (!(xhrId in this.pendingRequests)) {\n      // The XHR request might have been aborted in onHeadersReceived()\n      // callback, in which case we should abort request.\n      return;\n    }\n\n    delete this.pendingRequests[xhrId];\n\n    // Success status == 0 can be on ftp, file and other protocols.\n    if (xhr.status === 0 && this.isHttp) {\n      pendingRequest.onError?.(xhr.status);\n      return;\n    }\n    const xhrStatus = xhr.status || OK_RESPONSE;\n\n    // From http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.35.2:\n    // \"A server MAY ignore the Range header\". This means it's possible to\n    // get a 200 rather than a 206 response from a range request.\n    const ok_response_on_range_request =\n      xhrStatus === OK_RESPONSE &&\n      pendingRequest.expectedStatus === PARTIAL_CONTENT_RESPONSE;\n\n    if (\n      !ok_response_on_range_request &&\n      xhrStatus !== pendingRequest.expectedStatus\n    ) {\n      pendingRequest.onError?.(xhr.status);\n      return;\n    }\n\n    const chunk = getArrayBuffer(xhr);\n    if (xhrStatus === PARTIAL_CONTENT_RESPONSE) {\n      const rangeHeader = xhr.getResponseHeader(\"Content-Range\");\n      const matches = /bytes (\\d+)-(\\d+)\\/(\\d+)/.exec(rangeHeader);\n      pendingRequest.onDone({\n        begin: parseInt(matches[1], 10),\n        chunk,\n      });\n    } else if (chunk) {\n      pendingRequest.onDone({\n        begin: 0,\n        chunk,\n      });\n    } else {\n      pendingRequest.onError?.(xhr.status);\n    }\n  }\n\n  getRequestXhr(xhrId) {\n    return this.pendingRequests[xhrId].xhr;\n  }\n\n  isPendingRequest(xhrId) {\n    return xhrId in this.pendingRequests;\n  }\n\n  abortRequest(xhrId) {\n    const xhr = this.pendingRequests[xhrId].xhr;\n    delete this.pendingRequests[xhrId];\n    xhr.abort();\n  }\n}\n\n/** @implements {IPDFStream} */\nclass PDFNetworkStream {\n  constructor(source) {\n    this._source = source;\n    this._manager = new NetworkManager(source.url, {\n      httpHeaders: source.httpHeaders,\n      withCredentials: source.withCredentials,\n    });\n    this._rangeChunkSize = source.rangeChunkSize;\n    this._fullRequestReader = null;\n    this._rangeRequestReaders = [];\n  }\n\n  _onRangeRequestReaderClosed(reader) {\n    const i = this._rangeRequestReaders.indexOf(reader);\n    if (i >= 0) {\n      this._rangeRequestReaders.splice(i, 1);\n    }\n  }\n\n  getFullReader() {\n    assert(\n      !this._fullRequestReader,\n      \"PDFNetworkStream.getFullReader can only be called once.\"\n    );\n    this._fullRequestReader = new PDFNetworkStreamFullRequestReader(\n      this._manager,\n      this._source\n    );\n    return this._fullRequestReader;\n  }\n\n  getRangeReader(begin, end) {\n    const reader = new PDFNetworkStreamRangeRequestReader(\n      this._manager,\n      begin,\n      end\n    );\n    reader.onClosed = this._onRangeRequestReaderClosed.bind(this);\n    this._rangeRequestReaders.push(reader);\n    return reader;\n  }\n\n  cancelAllRequests(reason) {\n    this._fullRequestReader?.cancel(reason);\n\n    for (const reader of this._rangeRequestReaders.slice(0)) {\n      reader.cancel(reason);\n    }\n  }\n}\n\n/** @implements {IPDFStreamReader} */\nclass PDFNetworkStreamFullRequestReader {\n  constructor(manager, source) {\n    this._manager = manager;\n\n    const args = {\n      onHeadersReceived: this._onHeadersReceived.bind(this),\n      onDone: this._onDone.bind(this),\n      onError: this._onError.bind(this),\n      onProgress: this._onProgress.bind(this),\n    };\n    this._url = source.url;\n    this._fullRequestId = manager.requestFull(args);\n    this._headersReceivedCapability = createPromiseCapability();\n    this._disableRange = source.disableRange || false;\n    this._contentLength = source.length; // Optional\n    this._rangeChunkSize = source.rangeChunkSize;\n    if (!this._rangeChunkSize && !this._disableRange) {\n      this._disableRange = true;\n    }\n\n    this._isStreamingSupported = false;\n    this._isRangeSupported = false;\n\n    this._cachedChunks = [];\n    this._requests = [];\n    this._done = false;\n    this._storedError = undefined;\n    this._filename = null;\n\n    this.onProgress = null;\n  }\n\n  _onHeadersReceived() {\n    const fullRequestXhrId = this._fullRequestId;\n    const fullRequestXhr = this._manager.getRequestXhr(fullRequestXhrId);\n\n    const getResponseHeader = name => {\n      return fullRequestXhr.getResponseHeader(name);\n    };\n    const { allowRangeRequests, suggestedLength } =\n      validateRangeRequestCapabilities({\n        getResponseHeader,\n        isHttp: this._manager.isHttp,\n        rangeChunkSize: this._rangeChunkSize,\n        disableRange: this._disableRange,\n      });\n\n    if (allowRangeRequests) {\n      this._isRangeSupported = true;\n    }\n    // Setting right content length.\n    this._contentLength = suggestedLength || this._contentLength;\n\n    this._filename = extractFilenameFromHeader(getResponseHeader);\n\n    if (this._isRangeSupported) {\n      // NOTE: by cancelling the full request, and then issuing range\n      // requests, there will be an issue for sites where you can only\n      // request the pdf once. However, if this is the case, then the\n      // server should not be returning that it can support range requests.\n      this._manager.abortRequest(fullRequestXhrId);\n    }\n\n    this._headersReceivedCapability.resolve();\n  }\n\n  _onDone(data) {\n    if (data) {\n      if (this._requests.length > 0) {\n        const requestCapability = this._requests.shift();\n        requestCapability.resolve({ value: data.chunk, done: false });\n      } else {\n        this._cachedChunks.push(data.chunk);\n      }\n    }\n    this._done = true;\n    if (this._cachedChunks.length > 0) {\n      return;\n    }\n    for (const requestCapability of this._requests) {\n      requestCapability.resolve({ value: undefined, done: true });\n    }\n    this._requests.length = 0;\n  }\n\n  _onError(status) {\n    this._storedError = createResponseStatusError(status, this._url);\n    this._headersReceivedCapability.reject(this._storedError);\n    for (const requestCapability of this._requests) {\n      requestCapability.reject(this._storedError);\n    }\n    this._requests.length = 0;\n    this._cachedChunks.length = 0;\n  }\n\n  _onProgress(evt) {\n    this.onProgress?.({\n      loaded: evt.loaded,\n      total: evt.lengthComputable ? evt.total : this._contentLength,\n    });\n  }\n\n  get filename() {\n    return this._filename;\n  }\n\n  get isRangeSupported() {\n    return this._isRangeSupported;\n  }\n\n  get isStreamingSupported() {\n    return this._isStreamingSupported;\n  }\n\n  get contentLength() {\n    return this._contentLength;\n  }\n\n  get headersReady() {\n    return this._headersReceivedCapability.promise;\n  }\n\n  async read() {\n    if (this._storedError) {\n      throw this._storedError;\n    }\n    if (this._cachedChunks.length > 0) {\n      const chunk = this._cachedChunks.shift();\n      return { value: chunk, done: false };\n    }\n    if (this._done) {\n      return { value: undefined, done: true };\n    }\n    const requestCapability = createPromiseCapability();\n    this._requests.push(requestCapability);\n    return requestCapability.promise;\n  }\n\n  cancel(reason) {\n    this._done = true;\n    this._headersReceivedCapability.reject(reason);\n    for (const requestCapability of this._requests) {\n      requestCapability.resolve({ value: undefined, done: true });\n    }\n    this._requests.length = 0;\n    if (this._manager.isPendingRequest(this._fullRequestId)) {\n      this._manager.abortRequest(this._fullRequestId);\n    }\n    this._fullRequestReader = null;\n  }\n}\n\n/** @implements {IPDFStreamRangeReader} */\nclass PDFNetworkStreamRangeRequestReader {\n  constructor(manager, begin, end) {\n    this._manager = manager;\n\n    const args = {\n      onDone: this._onDone.bind(this),\n      onError: this._onError.bind(this),\n      onProgress: this._onProgress.bind(this),\n    };\n    this._url = manager.url;\n    this._requestId = manager.requestRange(begin, end, args);\n    this._requests = [];\n    this._queuedChunk = null;\n    this._done = false;\n    this._storedError = undefined;\n\n    this.onProgress = null;\n    this.onClosed = null;\n  }\n\n  _close() {\n    this.onClosed?.(this);\n  }\n\n  _onDone(data) {\n    const chunk = data.chunk;\n    if (this._requests.length > 0) {\n      const requestCapability = this._requests.shift();\n      requestCapability.resolve({ value: chunk, done: false });\n    } else {\n      this._queuedChunk = chunk;\n    }\n    this._done = true;\n    for (const requestCapability of this._requests) {\n      requestCapability.resolve({ value: undefined, done: true });\n    }\n    this._requests.length = 0;\n    this._close();\n  }\n\n  _onError(status) {\n    this._storedError = createResponseStatusError(status, this._url);\n    for (const requestCapability of this._requests) {\n      requestCapability.reject(this._storedError);\n    }\n    this._requests.length = 0;\n    this._queuedChunk = null;\n  }\n\n  _onProgress(evt) {\n    if (!this.isStreamingSupported) {\n      this.onProgress?.({ loaded: evt.loaded });\n    }\n  }\n\n  get isStreamingSupported() {\n    return false;\n  }\n\n  async read() {\n    if (this._storedError) {\n      throw this._storedError;\n    }\n    if (this._queuedChunk !== null) {\n      const chunk = this._queuedChunk;\n      this._queuedChunk = null;\n      return { value: chunk, done: false };\n    }\n    if (this._done) {\n      return { value: undefined, done: true };\n    }\n    const requestCapability = createPromiseCapability();\n    this._requests.push(requestCapability);\n    return requestCapability.promise;\n  }\n\n  cancel(reason) {\n    this._done = true;\n    for (const requestCapability of this._requests) {\n      requestCapability.resolve({ value: undefined, done: true });\n    }\n    this._requests.length = 0;\n    if (this._manager.isPendingRequest(this._requestId)) {\n      this._manager.abortRequest(this._requestId);\n    }\n    this._close();\n  }\n}\n\nexport { PDFNetworkStream };\n","/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AbortException,\n  assert,\n  createPromiseCapability,\n} from \"../shared/util.js\";\nimport {\n  createResponseStatusError,\n  extractFilenameFromHeader,\n  validateRangeRequestCapabilities,\n  validateResponseStatus,\n} from \"./network_utils.js\";\n\nif (typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"MOZCENTRAL\")) {\n  throw new Error(\n    'Module \"./fetch_stream.js\" shall not be used with MOZCENTRAL builds.'\n  );\n}\n\nfunction createFetchOptions(headers, withCredentials, abortController) {\n  return {\n    method: \"GET\",\n    headers,\n    signal: abortController?.signal,\n    mode: \"cors\",\n    credentials: withCredentials ? \"include\" : \"same-origin\",\n    redirect: \"follow\",\n  };\n}\n\nfunction createHeaders(httpHeaders) {\n  const headers = new Headers();\n  for (const property in httpHeaders) {\n    const value = httpHeaders[property];\n    if (typeof value === \"undefined\") {\n      continue;\n    }\n    headers.append(property, value);\n  }\n  return headers;\n}\n\n/** @implements {IPDFStream} */\nclass PDFFetchStream {\n  constructor(source) {\n    this.source = source;\n    this.isHttp = /^https?:/i.test(source.url);\n    this.httpHeaders = (this.isHttp && source.httpHeaders) || {};\n\n    this._fullRequestReader = null;\n    this._rangeRequestReaders = [];\n  }\n\n  get _progressiveDataLength() {\n    return this._fullRequestReader?._loaded ?? 0;\n  }\n\n  getFullReader() {\n    assert(\n      !this._fullRequestReader,\n      \"PDFFetchStream.getFullReader can only be called once.\"\n    );\n    this._fullRequestReader = new PDFFetchStreamReader(this);\n    return this._fullRequestReader;\n  }\n\n  getRangeReader(begin, end) {\n    if (end <= this._progressiveDataLength) {\n      return null;\n    }\n    const reader = new PDFFetchStreamRangeReader(this, begin, end);\n    this._rangeRequestReaders.push(reader);\n    return reader;\n  }\n\n  cancelAllRequests(reason) {\n    if (this._fullRequestReader) {\n      this._fullRequestReader.cancel(reason);\n    }\n    for (const reader of this._rangeRequestReaders.slice(0)) {\n      reader.cancel(reason);\n    }\n  }\n}\n\n/** @implements {IPDFStreamReader} */\nclass PDFFetchStreamReader {\n  constructor(stream) {\n    this._stream = stream;\n    this._reader = null;\n    this._loaded = 0;\n    this._filename = null;\n    const source = stream.source;\n    this._withCredentials = source.withCredentials || false;\n    this._contentLength = source.length;\n    this._headersCapability = createPromiseCapability();\n    this._disableRange = source.disableRange || false;\n    this._rangeChunkSize = source.rangeChunkSize;\n    if (!this._rangeChunkSize && !this._disableRange) {\n      this._disableRange = true;\n    }\n\n    if (typeof AbortController !== \"undefined\") {\n      this._abortController = new AbortController();\n    }\n    this._isStreamingSupported = !source.disableStream;\n    this._isRangeSupported = !source.disableRange;\n\n    this._headers = createHeaders(this._stream.httpHeaders);\n\n    const url = source.url;\n    fetch(\n      url,\n      createFetchOptions(\n        this._headers,\n        this._withCredentials,\n        this._abortController\n      )\n    )\n      .then(response => {\n        if (!validateResponseStatus(response.status)) {\n          throw createResponseStatusError(response.status, url);\n        }\n        this._reader = response.body.getReader();\n        this._headersCapability.resolve();\n\n        const getResponseHeader = name => {\n          return response.headers.get(name);\n        };\n        const { allowRangeRequests, suggestedLength } =\n          validateRangeRequestCapabilities({\n            getResponseHeader,\n            isHttp: this._stream.isHttp,\n            rangeChunkSize: this._rangeChunkSize,\n            disableRange: this._disableRange,\n          });\n\n        this._isRangeSupported = allowRangeRequests;\n        // Setting right content length.\n        this._contentLength = suggestedLength || this._contentLength;\n\n        this._filename = extractFilenameFromHeader(getResponseHeader);\n\n        // We need to stop reading when range is supported and streaming is\n        // disabled.\n        if (!this._isStreamingSupported && this._isRangeSupported) {\n          this.cancel(new AbortException(\"Streaming is disabled.\"));\n        }\n      })\n      .catch(this._headersCapability.reject);\n\n    this.onProgress = null;\n  }\n\n  get headersReady() {\n    return this._headersCapability.promise;\n  }\n\n  get filename() {\n    return this._filename;\n  }\n\n  get contentLength() {\n    return this._contentLength;\n  }\n\n  get isRangeSupported() {\n    return this._isRangeSupported;\n  }\n\n  get isStreamingSupported() {\n    return this._isStreamingSupported;\n  }\n\n  async read() {\n    await this._headersCapability.promise;\n    const { value, done } = await this._reader.read();\n    if (done) {\n      return { value, done };\n    }\n    this._loaded += value.byteLength;\n    if (this.onProgress) {\n      this.onProgress({\n        loaded: this._loaded,\n        total: this._contentLength,\n      });\n    }\n    const buffer = new Uint8Array(value).buffer;\n    return { value: buffer, done: false };\n  }\n\n  cancel(reason) {\n    if (this._reader) {\n      this._reader.cancel(reason);\n    }\n    if (this._abortController) {\n      this._abortController.abort();\n    }\n  }\n}\n\n/** @implements {IPDFStreamRangeReader} */\nclass PDFFetchStreamRangeReader {\n  constructor(stream, begin, end) {\n    this._stream = stream;\n    this._reader = null;\n    this._loaded = 0;\n    const source = stream.source;\n    this._withCredentials = source.withCredentials || false;\n    this._readCapability = createPromiseCapability();\n    this._isStreamingSupported = !source.disableStream;\n\n    if (typeof AbortController !== \"undefined\") {\n      this._abortController = new AbortController();\n    }\n\n    this._headers = createHeaders(this._stream.httpHeaders);\n    this._headers.append(\"Range\", `bytes=${begin}-${end - 1}`);\n\n    const url = source.url;\n    fetch(\n      url,\n      createFetchOptions(\n        this._headers,\n        this._withCredentials,\n        this._abortController\n      )\n    )\n      .then(response => {\n        if (!validateResponseStatus(response.status)) {\n          throw createResponseStatusError(response.status, url);\n        }\n        this._readCapability.resolve();\n        this._reader = response.body.getReader();\n      })\n      .catch(this._readCapability.reject);\n\n    this.onProgress = null;\n  }\n\n  get isStreamingSupported() {\n    return this._isStreamingSupported;\n  }\n\n  async read() {\n    await this._readCapability.promise;\n    const { value, done } = await this._reader.read();\n    if (done) {\n      return { value, done };\n    }\n    this._loaded += value.byteLength;\n    if (this.onProgress) {\n      this.onProgress({ loaded: this._loaded });\n    }\n    const buffer = new Uint8Array(value).buffer;\n    return { value: buffer, done: false };\n  }\n\n  cancel(reason) {\n    if (this._reader) {\n      this._reader.cancel(reason);\n    }\n    if (this._abortController) {\n      this._abortController.abort();\n    }\n  }\n}\n\nexport { PDFFetchStream };\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __w_pdfjs_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __w_pdfjs_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/* eslint-disable sort-exports/sort-exports */\n\n// eslint-disable-next-line max-len\n/** @typedef {import(\"./display/api\").PDFDocumentLoadingTask} PDFDocumentLoadingTask */\n/** @typedef {import(\"./display/api\").PDFDocumentProxy} PDFDocumentProxy */\n/** @typedef {import(\"./display/api\").PDFPageProxy} PDFPageProxy */\n/** @typedef {import(\"./display/api\").RenderTask} RenderTask */\n\nimport {\n  addLinkAttributes,\n  getFilenameFromUrl,\n  getPdfFilenameFromUrl,\n  getXfaPageViewport,\n  isPdfFile,\n  isValidFetchUrl,\n  LinkTarget,\n  loadScript,\n  PDFDateString,\n  PixelsPerInch,\n  RenderingCancelledException,\n} from \"./display/display_utils.js\";\nimport {\n  AnnotationMode,\n  CMapCompressionType,\n  createObjectURL,\n  createPromiseCapability,\n  createValidAbsoluteUrl,\n  InvalidPDFException,\n  MissingPDFException,\n  OPS,\n  PasswordResponses,\n  PermissionFlag,\n  removeNullCharacters,\n  shadow,\n  UnexpectedResponseException,\n  UNSUPPORTED_FEATURES,\n  Util,\n  VerbosityLevel,\n} from \"./shared/util.js\";\nimport {\n  build,\n  getDocument,\n  LoopbackPort,\n  PDFDataRangeTransport,\n  PDFWorker,\n  setPDFNetworkStreamFactory,\n  version,\n} from \"./display/api.js\";\nimport { AnnotationLayer } from \"./display/annotation_layer.js\";\nimport { GlobalWorkerOptions } from \"./display/worker_options.js\";\nimport { isNodeJS } from \"./shared/is_node.js\";\nimport { renderTextLayer } from \"./display/text_layer.js\";\nimport { SVGGraphics } from \"./display/svg.js\";\nimport { XfaLayer } from \"./display/xfa_layer.js\";\n\n/* eslint-disable-next-line no-unused-vars */\nconst pdfjsVersion =\n  typeof PDFJSDev !== \"undefined\" ? PDFJSDev.eval(\"BUNDLE_VERSION\") : void 0;\n/* eslint-disable-next-line no-unused-vars */\nconst pdfjsBuild =\n  typeof PDFJSDev !== \"undefined\" ? PDFJSDev.eval(\"BUNDLE_BUILD\") : void 0;\n\nif (typeof PDFJSDev === \"undefined\" || !PDFJSDev.test(\"PRODUCTION\")) {\n  const streamsPromise = Promise.all([\n    import(\"pdfjs/display/network.js\"),\n    import(\"pdfjs/display/fetch_stream.js\"),\n  ]);\n\n  setPDFNetworkStreamFactory(async params => {\n    const [{ PDFNetworkStream }, { PDFFetchStream }] = await streamsPromise;\n    if (isValidFetchUrl(params.url)) {\n      return new PDFFetchStream(params);\n    }\n    return new PDFNetworkStream(params);\n  });\n} else if (PDFJSDev.test(\"GENERIC || CHROME\")) {\n  if (PDFJSDev.test(\"GENERIC\") && isNodeJS) {\n    const { PDFNodeStream } = require(\"./display/node_stream.js\");\n\n    setPDFNetworkStreamFactory(params => {\n      return new PDFNodeStream(params);\n    });\n  } else {\n    const { PDFNetworkStream } = require(\"./display/network.js\");\n    const { PDFFetchStream } = require(\"./display/fetch_stream.js\");\n\n    setPDFNetworkStreamFactory(params => {\n      if (isValidFetchUrl(params.url)) {\n        return new PDFFetchStream(params);\n      }\n      return new PDFNetworkStream(params);\n    });\n  }\n}\n\nexport {\n  // From \"./display/display_utils.js\":\n  addLinkAttributes,\n  getFilenameFromUrl,\n  getPdfFilenameFromUrl,\n  isPdfFile,\n  LinkTarget,\n  loadScript,\n  PDFDateString,\n  PixelsPerInch,\n  RenderingCancelledException,\n  getXfaPageViewport,\n  // From \"./shared/util.js\":\n  AnnotationMode,\n  CMapCompressionType,\n  createObjectURL,\n  createPromiseCapability,\n  createValidAbsoluteUrl,\n  InvalidPDFException,\n  MissingPDFException,\n  OPS,\n  PasswordResponses,\n  PermissionFlag,\n  removeNullCharacters,\n  shadow,\n  UnexpectedResponseException,\n  UNSUPPORTED_FEATURES,\n  Util,\n  VerbosityLevel,\n  // From \"./display/api.js\":\n  build,\n  getDocument,\n  LoopbackPort,\n  PDFDataRangeTransport,\n  PDFWorker,\n  version,\n  // From \"./display/annotation_layer.js\":\n  AnnotationLayer,\n  // From \"./display/worker_options.js\":\n  GlobalWorkerOptions,\n  // From \"./display/text_layer.js\":\n  renderTextLayer,\n  // From \"./display/svg.js\":\n  SVGGraphics,\n  // From \"./display/xfa_layer.js\":\n  XfaLayer,\n};\n"]},"metadata":{},"sourceType":"script"}